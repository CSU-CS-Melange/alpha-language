/*
 * generated by Xtext 2.22.0
 */
package alpha.targetmapping.services;

import alpha.model.services.AlphaGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TargetMappingGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TargetMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.TargetMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTargetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetSystemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetSystemAlphaSystemCrossReference_1_0 = (CrossReference)cTargetSystemAssignment_1.eContents().get(0);
		private final RuleCall cTargetSystemAlphaSystemQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTargetSystemAlphaSystemCrossReference_1_0.eContents().get(1);
		private final Assignment cSystemBodyTMsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSystemBodyTMsTargetMappingForSystemBodyParserRuleCall_2_0 = (RuleCall)cSystemBodyTMsAssignment_2.eContents().get(0);
		
		//TargetMapping:
		//	'target' targetSystem=[model::AlphaSystem|QualifiedName] systemBodyTMs+=TargetMappingForSystemBody*;
		@Override public ParserRule getRule() { return rule; }
		
		//'target' targetSystem=[model::AlphaSystem|QualifiedName] systemBodyTMs+=TargetMappingForSystemBody*
		public Group getGroup() { return cGroup; }
		
		//'target'
		public Keyword getTargetKeyword_0() { return cTargetKeyword_0; }
		
		//targetSystem=[model::AlphaSystem|QualifiedName]
		public Assignment getTargetSystemAssignment_1() { return cTargetSystemAssignment_1; }
		
		//[model::AlphaSystem|QualifiedName]
		public CrossReference getTargetSystemAlphaSystemCrossReference_1_0() { return cTargetSystemAlphaSystemCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTargetSystemAlphaSystemQualifiedNameParserRuleCall_1_0_1() { return cTargetSystemAlphaSystemQualifiedNameParserRuleCall_1_0_1; }
		
		//systemBodyTMs+=TargetMappingForSystemBody*
		public Assignment getSystemBodyTMsAssignment_2() { return cSystemBodyTMsAssignment_2; }
		
		//TargetMappingForSystemBody
		public RuleCall getSystemBodyTMsTargetMappingForSystemBodyParserRuleCall_2_0() { return cSystemBodyTMsTargetMappingForSystemBodyParserRuleCall_2_0; }
	}
	public class TargetMappingForSystemBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.TargetMappingForSystemBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTargetMappingForSystemBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cBodyKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTargetBodyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTargetBodySystemBodyCrossReference_1_1_0 = (CrossReference)cTargetBodyAssignment_1_1.eContents().get(0);
		private final RuleCall cTargetBodySystemBodyIntRefParserRuleCall_1_1_0_1 = (RuleCall)cTargetBodySystemBodyCrossReference_1_1_0.eContents().get(1);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cScheduleTreeRootAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cScheduleTreeRootAlternatives_2_0 = (Alternatives)cScheduleTreeRootAssignment_2.eContents().get(0);
		private final RuleCall cScheduleTreeRootContextExpressionParserRuleCall_2_0_0 = (RuleCall)cScheduleTreeRootAlternatives_2_0.eContents().get(0);
		private final RuleCall cScheduleTreeRootScheduleTreeExpressionParserRuleCall_2_0_1 = (RuleCall)cScheduleTreeRootAlternatives_2_0.eContents().get(1);
		
		//TargetMappingForSystemBody:
		//	{TargetMappingForSystemBody} ('body' targetBody=[model::SystemBody|IntRef] ':')? scheduleTreeRoot=(ContextExpression |
		//	ScheduleTreeExpression);
		@Override public ParserRule getRule() { return rule; }
		
		//{TargetMappingForSystemBody} ('body' targetBody=[model::SystemBody|IntRef] ':')? scheduleTreeRoot=(ContextExpression |
		//ScheduleTreeExpression)
		public Group getGroup() { return cGroup; }
		
		//{TargetMappingForSystemBody}
		public Action getTargetMappingForSystemBodyAction_0() { return cTargetMappingForSystemBodyAction_0; }
		
		//('body' targetBody=[model::SystemBody|IntRef] ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'body'
		public Keyword getBodyKeyword_1_0() { return cBodyKeyword_1_0; }
		
		//targetBody=[model::SystemBody|IntRef]
		public Assignment getTargetBodyAssignment_1_1() { return cTargetBodyAssignment_1_1; }
		
		//[model::SystemBody|IntRef]
		public CrossReference getTargetBodySystemBodyCrossReference_1_1_0() { return cTargetBodySystemBodyCrossReference_1_1_0; }
		
		//IntRef
		public RuleCall getTargetBodySystemBodyIntRefParserRuleCall_1_1_0_1() { return cTargetBodySystemBodyIntRefParserRuleCall_1_1_0_1; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//scheduleTreeRoot=(ContextExpression | ScheduleTreeExpression)
		public Assignment getScheduleTreeRootAssignment_2() { return cScheduleTreeRootAssignment_2; }
		
		//(ContextExpression | ScheduleTreeExpression)
		public Alternatives getScheduleTreeRootAlternatives_2_0() { return cScheduleTreeRootAlternatives_2_0; }
		
		//ContextExpression
		public RuleCall getScheduleTreeRootContextExpressionParserRuleCall_2_0_0() { return cScheduleTreeRootContextExpressionParserRuleCall_2_0_0; }
		
		//ScheduleTreeExpression
		public RuleCall getScheduleTreeRootScheduleTreeExpressionParserRuleCall_2_0_1() { return cScheduleTreeRootScheduleTreeExpressionParserRuleCall_2_0_1; }
	}
	public class IntRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.IntRef");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntRef:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class ScheduleTreeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.ScheduleTreeExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFilterExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGuardExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMarkExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBandExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ScheduleTreeExpression:
		//	SequenceExpression | SetExpression | FilterExpression | GuardExpression | MarkExpression | BandExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//SequenceExpression | SetExpression | FilterExpression | GuardExpression | MarkExpression | BandExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SequenceExpression
		public RuleCall getSequenceExpressionParserRuleCall_0() { return cSequenceExpressionParserRuleCall_0; }
		
		//SetExpression
		public RuleCall getSetExpressionParserRuleCall_1() { return cSetExpressionParserRuleCall_1; }
		
		//FilterExpression
		public RuleCall getFilterExpressionParserRuleCall_2() { return cFilterExpressionParserRuleCall_2; }
		
		//GuardExpression
		public RuleCall getGuardExpressionParserRuleCall_3() { return cGuardExpressionParserRuleCall_3; }
		
		//MarkExpression
		public RuleCall getMarkExpressionParserRuleCall_4() { return cMarkExpressionParserRuleCall_4; }
		
		//BandExpression
		public RuleCall getBandExpressionParserRuleCall_5() { return cBandExpressionParserRuleCall_5; }
	}
	public class FilterOrExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.FilterOrExtension");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFilterExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExtensionExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FilterOrExtension ScheduleTreeExpression:
		//	FilterExpression | ExtensionExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//FilterExpression | ExtensionExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FilterExpression
		public RuleCall getFilterExpressionParserRuleCall_0() { return cFilterExpressionParserRuleCall_0; }
		
		//ExtensionExpression
		public RuleCall getExtensionExpressionParserRuleCall_1() { return cExtensionExpressionParserRuleCall_1; }
	}
	public class ContextExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.ContextExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContextDomainExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContextDomainExprJNIDomainParserRuleCall_1_0 = (RuleCall)cContextDomainExprAssignment_1.eContents().get(0);
		private final Assignment cChildAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cChildScheduleTreeExpressionParserRuleCall_2_0 = (RuleCall)cChildAssignment_2.eContents().get(0);
		
		//ContextExpression:
		//	'context' contextDomainExpr=JNIDomain child=ScheduleTreeExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' contextDomainExpr=JNIDomain child=ScheduleTreeExpression
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//contextDomainExpr=JNIDomain
		public Assignment getContextDomainExprAssignment_1() { return cContextDomainExprAssignment_1; }
		
		//JNIDomain
		public RuleCall getContextDomainExprJNIDomainParserRuleCall_1_0() { return cContextDomainExprJNIDomainParserRuleCall_1_0; }
		
		//child=ScheduleTreeExpression
		public Assignment getChildAssignment_2() { return cChildAssignment_2; }
		
		//ScheduleTreeExpression
		public RuleCall getChildScheduleTreeExpressionParserRuleCall_2_0() { return cChildScheduleTreeExpressionParserRuleCall_2_0; }
	}
	public class SetExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.SetExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cChildrenAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cChildrenFilterExpressionParserRuleCall_2_0_0 = (RuleCall)cChildrenAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetExpression:
		//	'set' '{' (children+=FilterExpression ';')+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'set' '{' (children+=FilterExpression ';')+ '}'
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(children+=FilterExpression ';')+
		public Group getGroup_2() { return cGroup_2; }
		
		//children+=FilterExpression
		public Assignment getChildrenAssignment_2_0() { return cChildrenAssignment_2_0; }
		
		//FilterExpression
		public RuleCall getChildrenFilterExpressionParserRuleCall_2_0_0() { return cChildrenFilterExpressionParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SequenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.SequenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cChildrenAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cChildrenFilterOrExtensionParserRuleCall_2_0_0 = (RuleCall)cChildrenAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SequenceExpression:
		//	'seq' '{' (children+=FilterOrExtension ';')+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'seq' '{' (children+=FilterOrExtension ';')+ '}'
		public Group getGroup() { return cGroup; }
		
		//'seq'
		public Keyword getSeqKeyword_0() { return cSeqKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(children+=FilterOrExtension ';')+
		public Group getGroup_2() { return cGroup_2; }
		
		//children+=FilterOrExtension
		public Assignment getChildrenAssignment_2_0() { return cChildrenAssignment_2_0; }
		
		//FilterOrExtension
		public RuleCall getChildrenFilterOrExtensionParserRuleCall_2_0_0() { return cChildrenFilterOrExtensionParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ScheduleTargetRestrictDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.ScheduleTargetRestrictDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cScheduleTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cScheduleTargetAlphaScheduleTargetCrossReference_0_0 = (CrossReference)cScheduleTargetAssignment_0.eContents().get(0);
		private final RuleCall cScheduleTargetAlphaScheduleTargetIDTerminalRuleCall_0_0_1 = (RuleCall)cScheduleTargetAlphaScheduleTargetCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexNamesIDTerminalRuleCall_1_1_0 = (RuleCall)cIndexNamesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cIndexNamesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cIndexNamesIDTerminalRuleCall_1_2_1_0 = (RuleCall)cIndexNamesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRestrictDomainExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRestrictDomainExprJNIDomainInArrayNotationParserRuleCall_2_0 = (RuleCall)cRestrictDomainExprAssignment_2.eContents().get(0);
		
		//ScheduleTargetRestrictDomain:
		//	scheduleTarget=[model::AlphaScheduleTarget] ('[' indexNames+=ID (',' indexNames+=ID)* ']')?
		//	restrictDomainExpr=JNIDomainInArrayNotation?;
		@Override public ParserRule getRule() { return rule; }
		
		//scheduleTarget=[model::AlphaScheduleTarget] ('[' indexNames+=ID (',' indexNames+=ID)* ']')?
		//restrictDomainExpr=JNIDomainInArrayNotation?
		public Group getGroup() { return cGroup; }
		
		//scheduleTarget=[model::AlphaScheduleTarget]
		public Assignment getScheduleTargetAssignment_0() { return cScheduleTargetAssignment_0; }
		
		//[model::AlphaScheduleTarget]
		public CrossReference getScheduleTargetAlphaScheduleTargetCrossReference_0_0() { return cScheduleTargetAlphaScheduleTargetCrossReference_0_0; }
		
		//ID
		public RuleCall getScheduleTargetAlphaScheduleTargetIDTerminalRuleCall_0_0_1() { return cScheduleTargetAlphaScheduleTargetIDTerminalRuleCall_0_0_1; }
		
		//('[' indexNames+=ID (',' indexNames+=ID)* ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//indexNames+=ID
		public Assignment getIndexNamesAssignment_1_1() { return cIndexNamesAssignment_1_1; }
		
		//ID
		public RuleCall getIndexNamesIDTerminalRuleCall_1_1_0() { return cIndexNamesIDTerminalRuleCall_1_1_0; }
		
		//(',' indexNames+=ID)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//indexNames+=ID
		public Assignment getIndexNamesAssignment_1_2_1() { return cIndexNamesAssignment_1_2_1; }
		
		//ID
		public RuleCall getIndexNamesIDTerminalRuleCall_1_2_1_0() { return cIndexNamesIDTerminalRuleCall_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
		
		//restrictDomainExpr=JNIDomainInArrayNotation?
		public Assignment getRestrictDomainExprAssignment_2() { return cRestrictDomainExprAssignment_2; }
		
		//JNIDomainInArrayNotation
		public RuleCall getRestrictDomainExprJNIDomainInArrayNotationParserRuleCall_2_0() { return cRestrictDomainExprJNIDomainInArrayNotationParserRuleCall_2_0; }
	}
	public class ScheduleTargetRestrictNoSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.ScheduleTargetRestrictNoSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cScheduleTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cScheduleTargetAlphaScheduleTargetCrossReference_0_0 = (CrossReference)cScheduleTargetAssignment_0.eContents().get(0);
		private final RuleCall cScheduleTargetAlphaScheduleTargetIDTerminalRuleCall_0_0_1 = (RuleCall)cScheduleTargetAlphaScheduleTargetCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexNamesIDTerminalRuleCall_1_1_0 = (RuleCall)cIndexNamesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cIndexNamesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cIndexNamesIDTerminalRuleCall_1_2_1_0 = (RuleCall)cIndexNamesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ScheduleTargetRestrictNoSet ScheduleTargetRestrictDomain:
		//	scheduleTarget=[model::AlphaScheduleTarget] ('[' indexNames+=ID (',' indexNames+=ID)* ']');
		@Override public ParserRule getRule() { return rule; }
		
		//scheduleTarget=[model::AlphaScheduleTarget] ('[' indexNames+=ID (',' indexNames+=ID)* ']')
		public Group getGroup() { return cGroup; }
		
		//scheduleTarget=[model::AlphaScheduleTarget]
		public Assignment getScheduleTargetAssignment_0() { return cScheduleTargetAssignment_0; }
		
		//[model::AlphaScheduleTarget]
		public CrossReference getScheduleTargetAlphaScheduleTargetCrossReference_0_0() { return cScheduleTargetAlphaScheduleTargetCrossReference_0_0; }
		
		//ID
		public RuleCall getScheduleTargetAlphaScheduleTargetIDTerminalRuleCall_0_0_1() { return cScheduleTargetAlphaScheduleTargetIDTerminalRuleCall_0_0_1; }
		
		//('[' indexNames+=ID (',' indexNames+=ID)* ']')
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//indexNames+=ID
		public Assignment getIndexNamesAssignment_1_1() { return cIndexNamesAssignment_1_1; }
		
		//ID
		public RuleCall getIndexNamesIDTerminalRuleCall_1_1_0() { return cIndexNamesIDTerminalRuleCall_1_1_0; }
		
		//(',' indexNames+=ID)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//indexNames+=ID
		public Assignment getIndexNamesAssignment_1_2_1() { return cIndexNamesAssignment_1_2_1; }
		
		//ID
		public RuleCall getIndexNamesIDTerminalRuleCall_1_2_1_0() { return cIndexNamesIDTerminalRuleCall_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class FilterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.FilterExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFilterDomainsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFilterDomainsScheduleTargetRestrictDomainParserRuleCall_0_0 = (RuleCall)cFilterDomainsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFilterDomainsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFilterDomainsScheduleTargetRestrictDomainParserRuleCall_1_1_0 = (RuleCall)cFilterDomainsAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChildAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChildScheduleTreeExpressionParserRuleCall_3_0 = (RuleCall)cChildAssignment_3.eContents().get(0);
		
		//FilterExpression:
		//	filterDomains+=ScheduleTargetRestrictDomain (',' filterDomains+=ScheduleTargetRestrictDomain)* ':'
		//	child=ScheduleTreeExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//filterDomains+=ScheduleTargetRestrictDomain (',' filterDomains+=ScheduleTargetRestrictDomain)* ':'
		//child=ScheduleTreeExpression
		public Group getGroup() { return cGroup; }
		
		//filterDomains+=ScheduleTargetRestrictDomain
		public Assignment getFilterDomainsAssignment_0() { return cFilterDomainsAssignment_0; }
		
		//ScheduleTargetRestrictDomain
		public RuleCall getFilterDomainsScheduleTargetRestrictDomainParserRuleCall_0_0() { return cFilterDomainsScheduleTargetRestrictDomainParserRuleCall_0_0; }
		
		//(',' filterDomains+=ScheduleTargetRestrictDomain)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//filterDomains+=ScheduleTargetRestrictDomain
		public Assignment getFilterDomainsAssignment_1_1() { return cFilterDomainsAssignment_1_1; }
		
		//ScheduleTargetRestrictDomain
		public RuleCall getFilterDomainsScheduleTargetRestrictDomainParserRuleCall_1_1_0() { return cFilterDomainsScheduleTargetRestrictDomainParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//child=ScheduleTreeExpression
		public Assignment getChildAssignment_3() { return cChildAssignment_3; }
		
		//ScheduleTreeExpression
		public RuleCall getChildScheduleTreeExpressionParserRuleCall_3_0() { return cChildScheduleTreeExpressionParserRuleCall_3_0; }
	}
	public class GuardExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.GuardExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGuardDomainExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGuardDomainExprJNIDomainParserRuleCall_1_0 = (RuleCall)cGuardDomainExprAssignment_1.eContents().get(0);
		private final Assignment cChildAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cChildScheduleTreeExpressionParserRuleCall_2_0 = (RuleCall)cChildAssignment_2.eContents().get(0);
		
		//GuardExpression:
		//	'if' guardDomainExpr=JNIDomain child=ScheduleTreeExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' guardDomainExpr=JNIDomain child=ScheduleTreeExpression
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//guardDomainExpr=JNIDomain
		public Assignment getGuardDomainExprAssignment_1() { return cGuardDomainExprAssignment_1; }
		
		//JNIDomain
		public RuleCall getGuardDomainExprJNIDomainParserRuleCall_1_0() { return cGuardDomainExprJNIDomainParserRuleCall_1_0; }
		
		//child=ScheduleTreeExpression
		public Assignment getChildAssignment_2() { return cChildAssignment_2; }
		
		//ScheduleTreeExpression
		public RuleCall getChildScheduleTreeExpressionParserRuleCall_2_0() { return cChildScheduleTreeExpressionParserRuleCall_2_0; }
	}
	public class MarkExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.MarkExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifierIDTerminalRuleCall_2_0 = (RuleCall)cIdentifierAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cChildAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChildScheduleTreeExpressionParserRuleCall_4_0 = (RuleCall)cChildAssignment_4.eContents().get(0);
		
		//MarkExpression:
		//	'mark' '(' identifier=ID ')' child=ScheduleTreeExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'mark' '(' identifier=ID ')' child=ScheduleTreeExpression
		public Group getGroup() { return cGroup; }
		
		//'mark'
		public Keyword getMarkKeyword_0() { return cMarkKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_2() { return cIdentifierAssignment_2; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_2_0() { return cIdentifierIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//child=ScheduleTreeExpression
		public Assignment getChildAssignment_4() { return cChildAssignment_4; }
		
		//ScheduleTreeExpression
		public RuleCall getChildScheduleTreeExpressionParserRuleCall_4_0() { return cChildScheduleTreeExpressionParserRuleCall_4_0; }
	}
	public class BandExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.BandExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cTileAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cTileTileKeyword_1_0_1_0 = (Keyword)cTileAssignment_1_0_1.eContents().get(0);
		private final Assignment cParallelAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cParallelParallelKeyword_1_1_0 = (Keyword)cParallelAssignment_1_1.eContents().get(0);
		private final Assignment cLoopTypeSpecificationsAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final RuleCall cLoopTypeSpecificationsLoopTypeSpecificationParserRuleCall_1_2_0 = (RuleCall)cLoopTypeSpecificationsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cUnorderedGroup_1.eContents().get(3);
		private final Assignment cIsolateSpecificationAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cIsolateSpecificationIsolateSpecificationParserRuleCall_1_3_0_0 = (RuleCall)cIsolateSpecificationAssignment_1_3_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBandPiecesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBandPiecesBandPieceParserRuleCall_3_0 = (RuleCall)cBandPiecesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPlusSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cChildAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cChildScheduleTreeExpressionParserRuleCall_5_1_0 = (RuleCall)cChildAssignment_5_1.eContents().get(0);
		
		//BandExpression:
		//	'band' ('(' tile?='tile'? & parallel?='parallel'?
		//	& loopTypeSpecifications+=LoopTypeSpecification*
		//	& isolateSpecification=IsolateSpecification? ')')? '{'
		//	bandPieces+=BandPiece+
		//	'}' ('+' child=ScheduleTreeExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'band' ('(' tile?='tile'? & parallel?='parallel'? & loopTypeSpecifications+=LoopTypeSpecification* &
		//isolateSpecification=IsolateSpecification? ')')? '{' bandPieces+=BandPiece+ '}' ('+' child=ScheduleTreeExpression)?
		public Group getGroup() { return cGroup; }
		
		//'band'
		public Keyword getBandKeyword_0() { return cBandKeyword_0; }
		
		//('(' tile?='tile'? & parallel?='parallel'? & loopTypeSpecifications+=LoopTypeSpecification* &
		//isolateSpecification=IsolateSpecification? ')')?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//'(' tile?='tile'?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//tile?='tile'?
		public Assignment getTileAssignment_1_0_1() { return cTileAssignment_1_0_1; }
		
		//'tile'
		public Keyword getTileTileKeyword_1_0_1_0() { return cTileTileKeyword_1_0_1_0; }
		
		//parallel?='parallel'?
		public Assignment getParallelAssignment_1_1() { return cParallelAssignment_1_1; }
		
		//'parallel'
		public Keyword getParallelParallelKeyword_1_1_0() { return cParallelParallelKeyword_1_1_0; }
		
		//loopTypeSpecifications+=LoopTypeSpecification*
		public Assignment getLoopTypeSpecificationsAssignment_1_2() { return cLoopTypeSpecificationsAssignment_1_2; }
		
		//LoopTypeSpecification
		public RuleCall getLoopTypeSpecificationsLoopTypeSpecificationParserRuleCall_1_2_0() { return cLoopTypeSpecificationsLoopTypeSpecificationParserRuleCall_1_2_0; }
		
		//isolateSpecification=IsolateSpecification? ')'
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//isolateSpecification=IsolateSpecification?
		public Assignment getIsolateSpecificationAssignment_1_3_0() { return cIsolateSpecificationAssignment_1_3_0; }
		
		//IsolateSpecification
		public RuleCall getIsolateSpecificationIsolateSpecificationParserRuleCall_1_3_0_0() { return cIsolateSpecificationIsolateSpecificationParserRuleCall_1_3_0_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3_1() { return cRightParenthesisKeyword_1_3_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//bandPieces+=BandPiece+
		public Assignment getBandPiecesAssignment_3() { return cBandPiecesAssignment_3; }
		
		//BandPiece
		public RuleCall getBandPiecesBandPieceParserRuleCall_3_0() { return cBandPiecesBandPieceParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//('+' child=ScheduleTreeExpression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'+'
		public Keyword getPlusSignKeyword_5_0() { return cPlusSignKeyword_5_0; }
		
		//child=ScheduleTreeExpression
		public Assignment getChildAssignment_5_1() { return cChildAssignment_5_1; }
		
		//ScheduleTreeExpression
		public RuleCall getChildScheduleTreeExpressionParserRuleCall_5_1_0() { return cChildScheduleTreeExpressionParserRuleCall_5_1_0; }
	}
	public class BandPieceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.BandPiece");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPieceDomainAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPieceDomainScheduleTargetRestrictDomainParserRuleCall_0_0_0 = (RuleCall)cPieceDomainAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPartialScheduleExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPartialScheduleExprJNIFunctionInArrayNotationParserRuleCall_0_2_0 = (RuleCall)cPartialScheduleExprAssignment_0_2.eContents().get(0);
		private final RuleCall cBandPieceForReductionBodyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BandPiece:
		//	pieceDomain=ScheduleTargetRestrictDomain ':' partialScheduleExpr=JNIFunctionInArrayNotation |
		//	BandPieceForReductionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//pieceDomain=ScheduleTargetRestrictDomain ':' partialScheduleExpr=JNIFunctionInArrayNotation | BandPieceForReductionBody
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pieceDomain=ScheduleTargetRestrictDomain ':' partialScheduleExpr=JNIFunctionInArrayNotation
		public Group getGroup_0() { return cGroup_0; }
		
		//pieceDomain=ScheduleTargetRestrictDomain
		public Assignment getPieceDomainAssignment_0_0() { return cPieceDomainAssignment_0_0; }
		
		//ScheduleTargetRestrictDomain
		public RuleCall getPieceDomainScheduleTargetRestrictDomainParserRuleCall_0_0_0() { return cPieceDomainScheduleTargetRestrictDomainParserRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//partialScheduleExpr=JNIFunctionInArrayNotation
		public Assignment getPartialScheduleExprAssignment_0_2() { return cPartialScheduleExprAssignment_0_2; }
		
		//JNIFunctionInArrayNotation
		public RuleCall getPartialScheduleExprJNIFunctionInArrayNotationParserRuleCall_0_2_0() { return cPartialScheduleExprJNIFunctionInArrayNotationParserRuleCall_0_2_0; }
		
		//BandPieceForReductionBody
		public RuleCall getBandPieceForReductionBodyParserRuleCall_1() { return cBandPieceForReductionBodyParserRuleCall_1; }
	}
	public class IsolateSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.IsolateSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsolateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsolateDomainExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIsolateDomainExprJNIDomainParserRuleCall_2_0 = (RuleCall)cIsolateDomainExprAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLoopTypeSpecificationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLoopTypeSpecificationsLoopTypeSpecificationParserRuleCall_3_0_0 = (RuleCall)cLoopTypeSpecificationsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cLoopTypeSpecificationsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cLoopTypeSpecificationsLoopTypeSpecificationParserRuleCall_3_1_1_0 = (RuleCall)cLoopTypeSpecificationsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IsolateSpecification:
		//	'isolate' '('
		//	isolateDomainExpr=JNIDomain (loopTypeSpecifications+=LoopTypeSpecification (','
		//	loopTypeSpecifications+=LoopTypeSpecification)*)?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'isolate' '(' isolateDomainExpr=JNIDomain (loopTypeSpecifications+=LoopTypeSpecification (','
		//loopTypeSpecifications+=LoopTypeSpecification)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'isolate'
		public Keyword getIsolateKeyword_0() { return cIsolateKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//isolateDomainExpr=JNIDomain
		public Assignment getIsolateDomainExprAssignment_2() { return cIsolateDomainExprAssignment_2; }
		
		//JNIDomain
		public RuleCall getIsolateDomainExprJNIDomainParserRuleCall_2_0() { return cIsolateDomainExprJNIDomainParserRuleCall_2_0; }
		
		//(loopTypeSpecifications+=LoopTypeSpecification (',' loopTypeSpecifications+=LoopTypeSpecification)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//loopTypeSpecifications+=LoopTypeSpecification
		public Assignment getLoopTypeSpecificationsAssignment_3_0() { return cLoopTypeSpecificationsAssignment_3_0; }
		
		//LoopTypeSpecification
		public RuleCall getLoopTypeSpecificationsLoopTypeSpecificationParserRuleCall_3_0_0() { return cLoopTypeSpecificationsLoopTypeSpecificationParserRuleCall_3_0_0; }
		
		//(',' loopTypeSpecifications+=LoopTypeSpecification)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//loopTypeSpecifications+=LoopTypeSpecification
		public Assignment getLoopTypeSpecificationsAssignment_3_1_1() { return cLoopTypeSpecificationsAssignment_3_1_1; }
		
		//LoopTypeSpecification
		public RuleCall getLoopTypeSpecificationsLoopTypeSpecificationParserRuleCall_3_1_1_0() { return cLoopTypeSpecificationsLoopTypeSpecificationParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LoopTypeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.LoopTypeSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLoopTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLoopTypeISLASTLoopTypeParserRuleCall_0_0 = (RuleCall)cLoopTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDimensionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDimensionINTTerminalRuleCall_2_0 = (RuleCall)cDimensionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LoopTypeSpecification:
		//	loopType=ISLASTLoopType '(' dimension=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//loopType=ISLASTLoopType '(' dimension=INT ')'
		public Group getGroup() { return cGroup; }
		
		//loopType=ISLASTLoopType
		public Assignment getLoopTypeAssignment_0() { return cLoopTypeAssignment_0; }
		
		//ISLASTLoopType
		public RuleCall getLoopTypeISLASTLoopTypeParserRuleCall_0_0() { return cLoopTypeISLASTLoopTypeParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//dimension=INT
		public Assignment getDimensionAssignment_2() { return cDimensionAssignment_2; }
		
		//INT
		public RuleCall getDimensionINTTerminalRuleCall_2_0() { return cDimensionINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ISLASTLoopTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.ISLASTLoopType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAtomicKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUnrollKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSeparateKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//ISLASTLoopType ISLASTLoopType:
		//	'default' |
		//	'atomic' |
		//	'unroll' |
		//	'separate';
		@Override public ParserRule getRule() { return rule; }
		
		//'default' | 'atomic' | 'unroll' | 'separate'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'default'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//'atomic'
		public Keyword getAtomicKeyword_1() { return cAtomicKeyword_1; }
		
		//'unroll'
		public Keyword getUnrollKeyword_2() { return cUnrollKeyword_2; }
		
		//'separate'
		public Keyword getSeparateKeyword_3() { return cSeparateKeyword_3; }
	}
	public class BandPieceForReductionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.BandPieceForReductionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReductionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPieceDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPieceDomainScheduleTargetRestrictDomainParserRuleCall_2_0 = (RuleCall)cPieceDomainAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cReductionInitializationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cReductionInitializationSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cReductionInitializationAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPartialScheduleExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPartialScheduleExprJNIFunctionInArrayNotationParserRuleCall_6_0 = (RuleCall)cPartialScheduleExprAssignment_6.eContents().get(0);
		
		//BandPieceForReductionBody:
		//	'reduction' '(' pieceDomain=ScheduleTargetRestrictDomain (',' reductionInitialization=STRING)? ')' ':'
		//	partialScheduleExpr=JNIFunctionInArrayNotation;
		@Override public ParserRule getRule() { return rule; }
		
		//'reduction' '(' pieceDomain=ScheduleTargetRestrictDomain (',' reductionInitialization=STRING)? ')' ':'
		//partialScheduleExpr=JNIFunctionInArrayNotation
		public Group getGroup() { return cGroup; }
		
		//'reduction'
		public Keyword getReductionKeyword_0() { return cReductionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//pieceDomain=ScheduleTargetRestrictDomain
		public Assignment getPieceDomainAssignment_2() { return cPieceDomainAssignment_2; }
		
		//ScheduleTargetRestrictDomain
		public RuleCall getPieceDomainScheduleTargetRestrictDomainParserRuleCall_2_0() { return cPieceDomainScheduleTargetRestrictDomainParserRuleCall_2_0; }
		
		//(',' reductionInitialization=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//reductionInitialization=STRING
		public Assignment getReductionInitializationAssignment_3_1() { return cReductionInitializationAssignment_3_1; }
		
		//STRING
		public RuleCall getReductionInitializationSTRINGTerminalRuleCall_3_1_0() { return cReductionInitializationSTRINGTerminalRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//partialScheduleExpr=JNIFunctionInArrayNotation
		public Assignment getPartialScheduleExprAssignment_6() { return cPartialScheduleExprAssignment_6; }
		
		//JNIFunctionInArrayNotation
		public RuleCall getPartialScheduleExprJNIFunctionInArrayNotationParserRuleCall_6_0() { return cPartialScheduleExprJNIFunctionInArrayNotationParserRuleCall_6_0; }
	}
	public class ExtensionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.ExtensionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExtensionTargetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExtensionTargetsExtensionTargetParserRuleCall_2_0 = (RuleCall)cExtensionTargetsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtensionTargetsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtensionTargetsExtensionTargetParserRuleCall_3_1_0 = (RuleCall)cExtensionTargetsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cChildAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChildScheduleTreeExpressionParserRuleCall_5_0 = (RuleCall)cChildAssignment_5.eContents().get(0);
		
		//ExtensionExpression:
		//	'extend' '(' extensionTargets+=ExtensionTarget (',' extensionTargets+=ExtensionTarget)* ')'
		//	child=ScheduleTreeExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'extend' '(' extensionTargets+=ExtensionTarget (',' extensionTargets+=ExtensionTarget)* ')' child=ScheduleTreeExpression
		public Group getGroup() { return cGroup; }
		
		//'extend'
		public Keyword getExtendKeyword_0() { return cExtendKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//extensionTargets+=ExtensionTarget
		public Assignment getExtensionTargetsAssignment_2() { return cExtensionTargetsAssignment_2; }
		
		//ExtensionTarget
		public RuleCall getExtensionTargetsExtensionTargetParserRuleCall_2_0() { return cExtensionTargetsExtensionTargetParserRuleCall_2_0; }
		
		//(',' extensionTargets+=ExtensionTarget)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//extensionTargets+=ExtensionTarget
		public Assignment getExtensionTargetsAssignment_3_1() { return cExtensionTargetsAssignment_3_1; }
		
		//ExtensionTarget
		public RuleCall getExtensionTargetsExtensionTargetParserRuleCall_3_1_0() { return cExtensionTargetsExtensionTargetParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//child=ScheduleTreeExpression
		public Assignment getChildAssignment_5() { return cChildAssignment_5; }
		
		//ScheduleTreeExpression
		public RuleCall getChildScheduleTreeExpressionParserRuleCall_5_0() { return cChildScheduleTreeExpressionParserRuleCall_5_0; }
	}
	public class ExtensionTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.targetmapping.TargetMapping.ExtensionTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cSourceAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cSourceAlphaScheduleTargetCrossReference_0_1_0 = (CrossReference)cSourceAssignment_0_1.eContents().get(0);
		private final RuleCall cSourceAlphaScheduleTargetIDTerminalRuleCall_0_1_0_1 = (RuleCall)cSourceAlphaScheduleTargetCrossReference_0_1_0.eContents().get(1);
		private final Assignment cExtensionMapExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExtensionMapExprJNIRelationParserRuleCall_1_0 = (RuleCall)cExtensionMapExprAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIndexNamesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIndexNamesIDTerminalRuleCall_4_1_0 = (RuleCall)cIndexNamesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cIndexNamesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cIndexNamesIDTerminalRuleCall_4_2_1_0 = (RuleCall)cIndexNamesAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//ExtensionTarget:
		//	('from' source=[model::AlphaScheduleTarget])? extensionMapExpr=JNIRelation 'as' name=ID ('[' indexNames+=ID (','
		//	indexNames+=ID)* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//('from' source=[model::AlphaScheduleTarget])? extensionMapExpr=JNIRelation 'as' name=ID ('[' indexNames+=ID (','
		//indexNames+=ID)* ']')?
		public Group getGroup() { return cGroup; }
		
		//('from' source=[model::AlphaScheduleTarget])?
		public Group getGroup_0() { return cGroup_0; }
		
		//'from'
		public Keyword getFromKeyword_0_0() { return cFromKeyword_0_0; }
		
		//source=[model::AlphaScheduleTarget]
		public Assignment getSourceAssignment_0_1() { return cSourceAssignment_0_1; }
		
		//[model::AlphaScheduleTarget]
		public CrossReference getSourceAlphaScheduleTargetCrossReference_0_1_0() { return cSourceAlphaScheduleTargetCrossReference_0_1_0; }
		
		//ID
		public RuleCall getSourceAlphaScheduleTargetIDTerminalRuleCall_0_1_0_1() { return cSourceAlphaScheduleTargetIDTerminalRuleCall_0_1_0_1; }
		
		//extensionMapExpr=JNIRelation
		public Assignment getExtensionMapExprAssignment_1() { return cExtensionMapExprAssignment_1; }
		
		//JNIRelation
		public RuleCall getExtensionMapExprJNIRelationParserRuleCall_1_0() { return cExtensionMapExprJNIRelationParserRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('[' indexNames+=ID (',' indexNames+=ID)* ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//indexNames+=ID
		public Assignment getIndexNamesAssignment_4_1() { return cIndexNamesAssignment_4_1; }
		
		//ID
		public RuleCall getIndexNamesIDTerminalRuleCall_4_1_0() { return cIndexNamesIDTerminalRuleCall_4_1_0; }
		
		//(',' indexNames+=ID)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//indexNames+=ID
		public Assignment getIndexNamesAssignment_4_2_1() { return cIndexNamesAssignment_4_2_1; }
		
		//ID
		public RuleCall getIndexNamesIDTerminalRuleCall_4_2_1_0() { return cIndexNamesIDTerminalRuleCall_4_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
	}
	
	
	private final TargetMappingElements pTargetMapping;
	private final TargetMappingForSystemBodyElements pTargetMappingForSystemBody;
	private final IntRefElements pIntRef;
	private final ScheduleTreeExpressionElements pScheduleTreeExpression;
	private final FilterOrExtensionElements pFilterOrExtension;
	private final ContextExpressionElements pContextExpression;
	private final SetExpressionElements pSetExpression;
	private final SequenceExpressionElements pSequenceExpression;
	private final ScheduleTargetRestrictDomainElements pScheduleTargetRestrictDomain;
	private final ScheduleTargetRestrictNoSetElements pScheduleTargetRestrictNoSet;
	private final FilterExpressionElements pFilterExpression;
	private final GuardExpressionElements pGuardExpression;
	private final MarkExpressionElements pMarkExpression;
	private final BandExpressionElements pBandExpression;
	private final BandPieceElements pBandPiece;
	private final IsolateSpecificationElements pIsolateSpecification;
	private final LoopTypeSpecificationElements pLoopTypeSpecification;
	private final ISLASTLoopTypeElements pISLASTLoopType;
	private final BandPieceForReductionBodyElements pBandPieceForReductionBody;
	private final ExtensionExpressionElements pExtensionExpression;
	private final ExtensionTargetElements pExtensionTarget;
	
	private final Grammar grammar;
	
	private final AlphaGrammarAccess gaAlpha;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TargetMappingGrammarAccess(GrammarProvider grammarProvider,
			AlphaGrammarAccess gaAlpha,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaAlpha = gaAlpha;
		this.gaTerminals = gaTerminals;
		this.pTargetMapping = new TargetMappingElements();
		this.pTargetMappingForSystemBody = new TargetMappingForSystemBodyElements();
		this.pIntRef = new IntRefElements();
		this.pScheduleTreeExpression = new ScheduleTreeExpressionElements();
		this.pFilterOrExtension = new FilterOrExtensionElements();
		this.pContextExpression = new ContextExpressionElements();
		this.pSetExpression = new SetExpressionElements();
		this.pSequenceExpression = new SequenceExpressionElements();
		this.pScheduleTargetRestrictDomain = new ScheduleTargetRestrictDomainElements();
		this.pScheduleTargetRestrictNoSet = new ScheduleTargetRestrictNoSetElements();
		this.pFilterExpression = new FilterExpressionElements();
		this.pGuardExpression = new GuardExpressionElements();
		this.pMarkExpression = new MarkExpressionElements();
		this.pBandExpression = new BandExpressionElements();
		this.pBandPiece = new BandPieceElements();
		this.pIsolateSpecification = new IsolateSpecificationElements();
		this.pLoopTypeSpecification = new LoopTypeSpecificationElements();
		this.pISLASTLoopType = new ISLASTLoopTypeElements();
		this.pBandPieceForReductionBody = new BandPieceForReductionBodyElements();
		this.pExtensionExpression = new ExtensionExpressionElements();
		this.pExtensionTarget = new ExtensionTargetElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("alpha.targetmapping.TargetMapping".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public AlphaGrammarAccess getAlphaGrammarAccess() {
		return gaAlpha;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TargetMapping:
	//	'target' targetSystem=[model::AlphaSystem|QualifiedName] systemBodyTMs+=TargetMappingForSystemBody*;
	public TargetMappingElements getTargetMappingAccess() {
		return pTargetMapping;
	}
	
	public ParserRule getTargetMappingRule() {
		return getTargetMappingAccess().getRule();
	}
	
	//TargetMappingForSystemBody:
	//	{TargetMappingForSystemBody} ('body' targetBody=[model::SystemBody|IntRef] ':')? scheduleTreeRoot=(ContextExpression |
	//	ScheduleTreeExpression);
	public TargetMappingForSystemBodyElements getTargetMappingForSystemBodyAccess() {
		return pTargetMappingForSystemBody;
	}
	
	public ParserRule getTargetMappingForSystemBodyRule() {
		return getTargetMappingForSystemBodyAccess().getRule();
	}
	
	//IntRef:
	//	INT;
	public IntRefElements getIntRefAccess() {
		return pIntRef;
	}
	
	public ParserRule getIntRefRule() {
		return getIntRefAccess().getRule();
	}
	
	//ScheduleTreeExpression:
	//	SequenceExpression | SetExpression | FilterExpression | GuardExpression | MarkExpression | BandExpression;
	public ScheduleTreeExpressionElements getScheduleTreeExpressionAccess() {
		return pScheduleTreeExpression;
	}
	
	public ParserRule getScheduleTreeExpressionRule() {
		return getScheduleTreeExpressionAccess().getRule();
	}
	
	//FilterOrExtension ScheduleTreeExpression:
	//	FilterExpression | ExtensionExpression;
	public FilterOrExtensionElements getFilterOrExtensionAccess() {
		return pFilterOrExtension;
	}
	
	public ParserRule getFilterOrExtensionRule() {
		return getFilterOrExtensionAccess().getRule();
	}
	
	//ContextExpression:
	//	'context' contextDomainExpr=JNIDomain child=ScheduleTreeExpression;
	public ContextExpressionElements getContextExpressionAccess() {
		return pContextExpression;
	}
	
	public ParserRule getContextExpressionRule() {
		return getContextExpressionAccess().getRule();
	}
	
	//SetExpression:
	//	'set' '{' (children+=FilterExpression ';')+
	//	'}';
	public SetExpressionElements getSetExpressionAccess() {
		return pSetExpression;
	}
	
	public ParserRule getSetExpressionRule() {
		return getSetExpressionAccess().getRule();
	}
	
	//SequenceExpression:
	//	'seq' '{' (children+=FilterOrExtension ';')+
	//	'}';
	public SequenceExpressionElements getSequenceExpressionAccess() {
		return pSequenceExpression;
	}
	
	public ParserRule getSequenceExpressionRule() {
		return getSequenceExpressionAccess().getRule();
	}
	
	//ScheduleTargetRestrictDomain:
	//	scheduleTarget=[model::AlphaScheduleTarget] ('[' indexNames+=ID (',' indexNames+=ID)* ']')?
	//	restrictDomainExpr=JNIDomainInArrayNotation?;
	public ScheduleTargetRestrictDomainElements getScheduleTargetRestrictDomainAccess() {
		return pScheduleTargetRestrictDomain;
	}
	
	public ParserRule getScheduleTargetRestrictDomainRule() {
		return getScheduleTargetRestrictDomainAccess().getRule();
	}
	
	//ScheduleTargetRestrictNoSet ScheduleTargetRestrictDomain:
	//	scheduleTarget=[model::AlphaScheduleTarget] ('[' indexNames+=ID (',' indexNames+=ID)* ']');
	public ScheduleTargetRestrictNoSetElements getScheduleTargetRestrictNoSetAccess() {
		return pScheduleTargetRestrictNoSet;
	}
	
	public ParserRule getScheduleTargetRestrictNoSetRule() {
		return getScheduleTargetRestrictNoSetAccess().getRule();
	}
	
	//FilterExpression:
	//	filterDomains+=ScheduleTargetRestrictDomain (',' filterDomains+=ScheduleTargetRestrictDomain)* ':'
	//	child=ScheduleTreeExpression;
	public FilterExpressionElements getFilterExpressionAccess() {
		return pFilterExpression;
	}
	
	public ParserRule getFilterExpressionRule() {
		return getFilterExpressionAccess().getRule();
	}
	
	//GuardExpression:
	//	'if' guardDomainExpr=JNIDomain child=ScheduleTreeExpression;
	public GuardExpressionElements getGuardExpressionAccess() {
		return pGuardExpression;
	}
	
	public ParserRule getGuardExpressionRule() {
		return getGuardExpressionAccess().getRule();
	}
	
	//MarkExpression:
	//	'mark' '(' identifier=ID ')' child=ScheduleTreeExpression;
	public MarkExpressionElements getMarkExpressionAccess() {
		return pMarkExpression;
	}
	
	public ParserRule getMarkExpressionRule() {
		return getMarkExpressionAccess().getRule();
	}
	
	//BandExpression:
	//	'band' ('(' tile?='tile'? & parallel?='parallel'?
	//	& loopTypeSpecifications+=LoopTypeSpecification*
	//	& isolateSpecification=IsolateSpecification? ')')? '{'
	//	bandPieces+=BandPiece+
	//	'}' ('+' child=ScheduleTreeExpression)?;
	public BandExpressionElements getBandExpressionAccess() {
		return pBandExpression;
	}
	
	public ParserRule getBandExpressionRule() {
		return getBandExpressionAccess().getRule();
	}
	
	//BandPiece:
	//	pieceDomain=ScheduleTargetRestrictDomain ':' partialScheduleExpr=JNIFunctionInArrayNotation |
	//	BandPieceForReductionBody;
	public BandPieceElements getBandPieceAccess() {
		return pBandPiece;
	}
	
	public ParserRule getBandPieceRule() {
		return getBandPieceAccess().getRule();
	}
	
	//IsolateSpecification:
	//	'isolate' '('
	//	isolateDomainExpr=JNIDomain (loopTypeSpecifications+=LoopTypeSpecification (','
	//	loopTypeSpecifications+=LoopTypeSpecification)*)?
	//	')';
	public IsolateSpecificationElements getIsolateSpecificationAccess() {
		return pIsolateSpecification;
	}
	
	public ParserRule getIsolateSpecificationRule() {
		return getIsolateSpecificationAccess().getRule();
	}
	
	//LoopTypeSpecification:
	//	loopType=ISLASTLoopType '(' dimension=INT ')';
	public LoopTypeSpecificationElements getLoopTypeSpecificationAccess() {
		return pLoopTypeSpecification;
	}
	
	public ParserRule getLoopTypeSpecificationRule() {
		return getLoopTypeSpecificationAccess().getRule();
	}
	
	//ISLASTLoopType ISLASTLoopType:
	//	'default' |
	//	'atomic' |
	//	'unroll' |
	//	'separate';
	public ISLASTLoopTypeElements getISLASTLoopTypeAccess() {
		return pISLASTLoopType;
	}
	
	public ParserRule getISLASTLoopTypeRule() {
		return getISLASTLoopTypeAccess().getRule();
	}
	
	//BandPieceForReductionBody:
	//	'reduction' '(' pieceDomain=ScheduleTargetRestrictDomain (',' reductionInitialization=STRING)? ')' ':'
	//	partialScheduleExpr=JNIFunctionInArrayNotation;
	public BandPieceForReductionBodyElements getBandPieceForReductionBodyAccess() {
		return pBandPieceForReductionBody;
	}
	
	public ParserRule getBandPieceForReductionBodyRule() {
		return getBandPieceForReductionBodyAccess().getRule();
	}
	
	//ExtensionExpression:
	//	'extend' '(' extensionTargets+=ExtensionTarget (',' extensionTargets+=ExtensionTarget)* ')'
	//	child=ScheduleTreeExpression;
	public ExtensionExpressionElements getExtensionExpressionAccess() {
		return pExtensionExpression;
	}
	
	public ParserRule getExtensionExpressionRule() {
		return getExtensionExpressionAccess().getRule();
	}
	
	//ExtensionTarget:
	//	('from' source=[model::AlphaScheduleTarget])? extensionMapExpr=JNIRelation 'as' name=ID ('[' indexNames+=ID (','
	//	indexNames+=ID)* ']')?;
	public ExtensionTargetElements getExtensionTargetAccess() {
		return pExtensionTarget;
	}
	
	public ParserRule getExtensionTargetRule() {
		return getExtensionTargetAccess().getRule();
	}
	
	//AlphaRoot:
	//	imports+=Imports*
	//	elements+=(AlphaConstant | ExternalFunction | AlphaPackage | AlphaSystem)*;
	public AlphaGrammarAccess.AlphaRootElements getAlphaRootAccess() {
		return gaAlpha.getAlphaRootAccess();
	}
	
	public ParserRule getAlphaRootRule() {
		return getAlphaRootAccess().getRule();
	}
	
	//AlphaConstant:
	//	'constant' name=ID '=' value=INT;
	public AlphaGrammarAccess.AlphaConstantElements getAlphaConstantAccess() {
		return gaAlpha.getAlphaConstantAccess();
	}
	
	public ParserRule getAlphaConstantRule() {
		return getAlphaConstantAccess().getRule();
	}
	
	//ExternalFunction:
	//	'external' name=ID '(' cardinality=INT ')';
	public AlphaGrammarAccess.ExternalFunctionElements getExternalFunctionAccess() {
		return gaAlpha.getExternalFunctionAccess();
	}
	
	public ParserRule getExternalFunctionRule() {
		return getExternalFunctionAccess().getRule();
	}
	
	//Imports:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public AlphaGrammarAccess.ImportsElements getImportsAccess() {
		return gaAlpha.getImportsAccess();
	}
	
	public ParserRule getImportsRule() {
		return getImportsAccess().getRule();
	}
	
	//AlphaPackage:
	//	'package' name=QualifiedName '{'
	//	elements+=(AlphaConstant | ExternalFunction | AlphaPackage | AlphaSystem)*
	//	'}';
	public AlphaGrammarAccess.AlphaPackageElements getAlphaPackageAccess() {
		return gaAlpha.getAlphaPackageAccess();
	}
	
	public ParserRule getAlphaPackageRule() {
		return getAlphaPackageAccess().getRule();
	}
	
	//AlphaSystem:
	//	'affine' name=SystemName parameterDomainExpr=JNIParamDomain ('define' definedObjects+=PolyhedralObject+)? ('inputs'
	//	(inputs+=Variable | inputs+=VariableNameOnly ',' (inputs+=VariableNameOnly ',')* inputs+=Variable |
	//	inputs+=FuzzyVariable | inputs+=FuzzyVariableNameOnly ',' (inputs+=FuzzyVariableNameOnly ',')*
	//	inputs+=FuzzyVariable)+)? ('outputs' (outputs+=Variable | outputs+=VariableNameOnly ',' (outputs+=VariableNameOnly
	//	',')* outputs+=Variable | outputs+=FuzzyVariable | outputs+=FuzzyVariableNameOnly ',' (outputs+=FuzzyVariableNameOnly
	//	',')* outputs+=FuzzyVariable)+)? ('locals' (locals+=Variable | locals+=VariableNameOnly ',' (locals+=VariableNameOnly
	//	',')* locals+=Variable | locals+=FuzzyVariable | locals+=FuzzyVariableNameOnly ',' (locals+=FuzzyVariableNameOnly
	//	',')* locals+=FuzzyVariable)+)? ('over' whileDomainExpr=CalculatorExpression 'while' '('
	//	testExpression=AlphaExpression ')')?
	//	systemBodies+=SystemBody*
	//	'.';
	public AlphaGrammarAccess.AlphaSystemElements getAlphaSystemAccess() {
		return gaAlpha.getAlphaSystemAccess();
	}
	
	public ParserRule getAlphaSystemRule() {
		return getAlphaSystemAccess().getRule();
	}
	
	//SystemBody:
	//	{SystemBody} ('when' parameterDomainExpr=JNIParamDomainInArrayNotation | 'else')?
	//	'let'
	//	equations+=Equation*;
	public AlphaGrammarAccess.SystemBodyElements getSystemBodyAccess() {
		return gaAlpha.getSystemBodyAccess();
	}
	
	public ParserRule getSystemBodyRule() {
		return getSystemBodyAccess().getRule();
	}
	
	//Variable:
	//	name=ID ':' domainExpr=CalculatorExpression ';'?;
	public AlphaGrammarAccess.VariableElements getVariableAccess() {
		return gaAlpha.getVariableAccess();
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//FuzzyVariable:
	//	'fuzzy' name=ID ':' domainExpr=CalculatorExpression '->' rangeExpr=CalculatorExpression ';'?;
	public AlphaGrammarAccess.FuzzyVariableElements getFuzzyVariableAccess() {
		return gaAlpha.getFuzzyVariableAccess();
	}
	
	public ParserRule getFuzzyVariableRule() {
		return getFuzzyVariableAccess().getRule();
	}
	
	//VariableNameOnly Variable:
	//	name=ID;
	public AlphaGrammarAccess.VariableNameOnlyElements getVariableNameOnlyAccess() {
		return gaAlpha.getVariableNameOnlyAccess();
	}
	
	public ParserRule getVariableNameOnlyRule() {
		return getVariableNameOnlyAccess().getRule();
	}
	
	//FuzzyVariableNameOnly FuzzyVariable:
	//	name=ID;
	public AlphaGrammarAccess.FuzzyVariableNameOnlyElements getFuzzyVariableNameOnlyAccess() {
		return gaAlpha.getFuzzyVariableNameOnlyAccess();
	}
	
	public ParserRule getFuzzyVariableNameOnlyRule() {
		return getFuzzyVariableNameOnlyAccess().getRule();
	}
	
	//JNIDomain:
	//	islString=AISLSet;
	public AlphaGrammarAccess.JNIDomainElements getJNIDomainAccess() {
		return gaAlpha.getJNIDomainAccess();
	}
	
	public ParserRule getJNIDomainRule() {
		return getJNIDomainAccess().getRule();
	}
	
	//JNIDomainInArrayNotation:
	//	'{' ':' islString=AISLString '}';
	public AlphaGrammarAccess.JNIDomainInArrayNotationElements getJNIDomainInArrayNotationAccess() {
		return gaAlpha.getJNIDomainInArrayNotationAccess();
	}
	
	public ParserRule getJNIDomainInArrayNotationRule() {
		return getJNIDomainInArrayNotationAccess().getRule();
	}
	
	//JNIParamDomain JNIDomain:
	//	islString=AParamDomain;
	public AlphaGrammarAccess.JNIParamDomainElements getJNIParamDomainAccess() {
		return gaAlpha.getJNIParamDomainAccess();
	}
	
	public ParserRule getJNIParamDomainRule() {
		return getJNIParamDomainAccess().getRule();
	}
	
	//JNIParamDomainInArrayNotation JNIDomain:
	//	islString=AParamDomainInArrayNotation;
	public AlphaGrammarAccess.JNIParamDomainInArrayNotationElements getJNIParamDomainInArrayNotationAccess() {
		return gaAlpha.getJNIParamDomainInArrayNotationAccess();
	}
	
	public ParserRule getJNIParamDomainInArrayNotationRule() {
		return getJNIParamDomainInArrayNotationAccess().getRule();
	}
	
	//JNIRelation:
	//	islString=AISLRelation;
	public AlphaGrammarAccess.JNIRelationElements getJNIRelationAccess() {
		return gaAlpha.getJNIRelationAccess();
	}
	
	public ParserRule getJNIRelationRule() {
		return getJNIRelationAccess().getRule();
	}
	
	//JNIFunction:
	//	alphaFunction=AlphaFunction;
	public AlphaGrammarAccess.JNIFunctionElements getJNIFunctionAccess() {
		return gaAlpha.getJNIFunctionAccess();
	}
	
	public ParserRule getJNIFunctionRule() {
		return getJNIFunctionAccess().getRule();
	}
	
	//JNIFunctionInArrayNotation:
	//	'[' {JNIFunctionInArrayNotation} (arrayNotation+=AISLExpression (',' arrayNotation+=AISLExpression)*)? ']';
	public AlphaGrammarAccess.JNIFunctionInArrayNotationElements getJNIFunctionInArrayNotationAccess() {
		return gaAlpha.getJNIFunctionInArrayNotationAccess();
	}
	
	public ParserRule getJNIFunctionInArrayNotationRule() {
		return getJNIFunctionInArrayNotationAccess().getRule();
	}
	
	//JNIPolynomial:
	//	islString=AISLPWQPolynomial;
	public AlphaGrammarAccess.JNIPolynomialElements getJNIPolynomialAccess() {
		return gaAlpha.getJNIPolynomialAccess();
	}
	
	public ParserRule getJNIPolynomialRule() {
		return getJNIPolynomialAccess().getRule();
	}
	
	//JNIPolynomialInArrayNotation:
	//	'{' arrayNotation+=AISLQPolynomialBody (';' arrayNotation+=AISLQPolynomialBody)* '}';
	public AlphaGrammarAccess.JNIPolynomialInArrayNotationElements getJNIPolynomialInArrayNotationAccess() {
		return gaAlpha.getJNIPolynomialInArrayNotationAccess();
	}
	
	public ParserRule getJNIPolynomialInArrayNotationRule() {
		return getJNIPolynomialInArrayNotationAccess().getRule();
	}
	
	//FuzzyFunction:
	//	'(' alphaString=AISLWrappedBasicRelation (';' indirections+=FuzzyVariableUse)* ')';
	public AlphaGrammarAccess.FuzzyFunctionElements getFuzzyFunctionAccess() {
		return gaAlpha.getFuzzyFunctionAccess();
	}
	
	public ParserRule getFuzzyFunctionRule() {
		return getFuzzyFunctionAccess().getRule();
	}
	
	//FuzzyVariableUse:
	//	NestedFuzzyFunction | AffineFuzzyVariableUse;
	public AlphaGrammarAccess.FuzzyVariableUseElements getFuzzyVariableUseAccess() {
		return gaAlpha.getFuzzyVariableUseAccess();
	}
	
	public ParserRule getFuzzyVariableUseRule() {
		return getFuzzyVariableUseAccess().getRule();
	}
	
	//NestedFuzzyFunction:
	//	fuzzyIndex=IndexName '=' fuzzyVariable=[FuzzyVariable] '{' alphaString=AISLWrappedBasicRelation (';'
	//	indirections+=FuzzyVariableUse)* '}';
	public AlphaGrammarAccess.NestedFuzzyFunctionElements getNestedFuzzyFunctionAccess() {
		return gaAlpha.getNestedFuzzyFunctionAccess();
	}
	
	public ParserRule getNestedFuzzyFunctionRule() {
		return getNestedFuzzyFunctionAccess().getRule();
	}
	
	//AffineFuzzyVariableUse:
	//	fuzzyIndex=IndexName '=' fuzzyVariable=[FuzzyVariable] useFunction=JNIFunctionInArrayNotation;
	public AlphaGrammarAccess.AffineFuzzyVariableUseElements getAffineFuzzyVariableUseAccess() {
		return gaAlpha.getAffineFuzzyVariableUseAccess();
	}
	
	public ParserRule getAffineFuzzyVariableUseRule() {
		return getAffineFuzzyVariableUseAccess().getRule();
	}
	
	//FuzzyFunctionInArrayNotation:
	//	'[[' {FuzzyFunctionInArrayNotation} (arrayNotation+=AISLFuzzyExpression (',' arrayNotation+=AISLFuzzyExpression)*)?
	//	']]';
	public AlphaGrammarAccess.FuzzyFunctionInArrayNotationElements getFuzzyFunctionInArrayNotationAccess() {
		return gaAlpha.getFuzzyFunctionInArrayNotationAccess();
	}
	
	public ParserRule getFuzzyFunctionInArrayNotationRule() {
		return getFuzzyFunctionInArrayNotationAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public AlphaGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaAlpha.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public AlphaGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaAlpha.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//SystemName:
	//	ID // ('-' ID)*
	//;
	public AlphaGrammarAccess.SystemNameElements getSystemNameAccess() {
		return gaAlpha.getSystemNameAccess();
	}
	
	public ParserRule getSystemNameRule() {
		return getSystemNameAccess().getRule();
	}
	
	//IndexName:
	//	ID;
	public AlphaGrammarAccess.IndexNameElements getIndexNameAccess() {
		return gaAlpha.getIndexNameAccess();
	}
	
	public ParserRule getIndexNameRule() {
		return getIndexNameAccess().getRule();
	}
	
	////IndexDimension:
	////	name=IndexName
	////;
	//AIndexList:
	//	(IndexName (',' IndexName)*)?;
	public AlphaGrammarAccess.AIndexListElements getAIndexListAccess() {
		return gaAlpha.getAIndexListAccess();
	}
	
	public ParserRule getAIndexListRule() {
		return getAIndexListAccess().getRule();
	}
	
	////ISL syntax defs
	//AParamDomain:
	//	('[' AIndexList ']' '->')? '{' ':' AISLString '}';
	public AlphaGrammarAccess.AParamDomainElements getAParamDomainAccess() {
		return gaAlpha.getAParamDomainAccess();
	}
	
	public ParserRule getAParamDomainRule() {
		return getAParamDomainAccess().getRule();
	}
	
	//AParamDomainInArrayNotation:
	//	'{' ':' AISLString '}';
	public AlphaGrammarAccess.AParamDomainInArrayNotationElements getAParamDomainInArrayNotationAccess() {
		return gaAlpha.getAParamDomainInArrayNotationAccess();
	}
	
	public ParserRule getAParamDomainInArrayNotationRule() {
		return getAParamDomainInArrayNotationAccess().getRule();
	}
	
	//AISLSet:
	//	'{' AISLBasicSet (';' AISLBasicSet)* '}' | '{}';
	public AlphaGrammarAccess.AISLSetElements getAISLSetAccess() {
		return gaAlpha.getAISLSetAccess();
	}
	
	public ParserRule getAISLSetRule() {
		return getAISLSetAccess().getRule();
	}
	
	//AISLBasicSet:
	//	'[' AISLExpressionList ']' ':' AISLString;
	public AlphaGrammarAccess.AISLBasicSetElements getAISLBasicSetAccess() {
		return gaAlpha.getAISLBasicSetAccess();
	}
	
	public ParserRule getAISLBasicSetRule() {
		return getAISLBasicSetAccess().getRule();
	}
	
	//AISLRelation:
	//	'{' AISLBasicRelation (';' AISLBasicRelation)* '}';
	public AlphaGrammarAccess.AISLRelationElements getAISLRelationAccess() {
		return gaAlpha.getAISLRelationAccess();
	}
	
	public ParserRule getAISLRelationRule() {
		return getAISLRelationAccess().getRule();
	}
	
	//AISLQPolynomial:
	//	'[' AISLExpressionList ']' '->' AISLQPolynomialBody;
	public AlphaGrammarAccess.AISLQPolynomialElements getAISLQPolynomialAccess() {
		return gaAlpha.getAISLQPolynomialAccess();
	}
	
	public ParserRule getAISLQPolynomialRule() {
		return getAISLQPolynomialAccess().getRule();
	}
	
	//AISLQPolynomialBody:
	//	AISLPolynomialExpression (':' AISLString)?;
	public AlphaGrammarAccess.AISLQPolynomialBodyElements getAISLQPolynomialBodyAccess() {
		return gaAlpha.getAISLQPolynomialBodyAccess();
	}
	
	public ParserRule getAISLQPolynomialBodyRule() {
		return getAISLQPolynomialBodyAccess().getRule();
	}
	
	//AISLPWQPolynomial:
	//	'{' AISLQPolynomial (';' AISLQPolynomial)* '}';
	public AlphaGrammarAccess.AISLPWQPolynomialElements getAISLPWQPolynomialAccess() {
		return gaAlpha.getAISLPWQPolynomialAccess();
	}
	
	public ParserRule getAISLPWQPolynomialRule() {
		return getAISLPWQPolynomialAccess().getRule();
	}
	
	//AISLString:
	//	(IndexName | INT | '+' | '-' | '*' | '/' | '%' | 'floor' | 'and' | 'or' | '[' | ']' | '(' | ')' | ',' | ':' | '&' |
	//	'|' | WS | '>=' | '>' | '=' | '<' | '<=')*;
	public AlphaGrammarAccess.AISLStringElements getAISLStringAccess() {
		return gaAlpha.getAISLStringAccess();
	}
	
	public ParserRule getAISLStringRule() {
		return getAISLStringAccess().getRule();
	}
	
	//AISLExpression:
	//	(IndexName | INT | '=' | '+' | '-' | '*' | '/' | '%' | 'floor' | '(' | ')' | WS)+;
	public AlphaGrammarAccess.AISLExpressionElements getAISLExpressionAccess() {
		return gaAlpha.getAISLExpressionAccess();
	}
	
	public ParserRule getAISLExpressionRule() {
		return getAISLExpressionAccess().getRule();
	}
	
	//AISLPolynomialExpression:
	//	(IndexName | INT | '+' | '-' | '*' | '/' | '(' | ')' | '^')+;
	public AlphaGrammarAccess.AISLPolynomialExpressionElements getAISLPolynomialExpressionAccess() {
		return gaAlpha.getAISLPolynomialExpressionAccess();
	}
	
	public ParserRule getAISLPolynomialExpressionRule() {
		return getAISLPolynomialExpressionAccess().getRule();
	}
	
	//AISLExpressionLiteral:
	//	'-'? (IndexName | INT | WS)+;
	public AlphaGrammarAccess.AISLExpressionLiteralElements getAISLExpressionLiteralAccess() {
		return gaAlpha.getAISLExpressionLiteralAccess();
	}
	
	public ParserRule getAISLExpressionLiteralRule() {
		return getAISLExpressionLiteralAccess().getRule();
	}
	
	//AISLExpressionOperator:
	//	AISLAdditiveOperator | AISLMultiplicativeOperator | AISLRelationalOperator;
	public AlphaGrammarAccess.AISLExpressionOperatorElements getAISLExpressionOperatorAccess() {
		return gaAlpha.getAISLExpressionOperatorAccess();
	}
	
	public ParserRule getAISLExpressionOperatorRule() {
		return getAISLExpressionOperatorAccess().getRule();
	}
	
	//AISLAdditiveOperator:
	//	'+' | '-';
	public AlphaGrammarAccess.AISLAdditiveOperatorElements getAISLAdditiveOperatorAccess() {
		return gaAlpha.getAISLAdditiveOperatorAccess();
	}
	
	public ParserRule getAISLAdditiveOperatorRule() {
		return getAISLAdditiveOperatorAccess().getRule();
	}
	
	//AISLMultiplicativeOperator:
	//	'*' | '/' | '%';
	public AlphaGrammarAccess.AISLMultiplicativeOperatorElements getAISLMultiplicativeOperatorAccess() {
		return gaAlpha.getAISLMultiplicativeOperatorAccess();
	}
	
	public ParserRule getAISLMultiplicativeOperatorRule() {
		return getAISLMultiplicativeOperatorAccess().getRule();
	}
	
	//AISLRelationalOperator:
	//	'=';
	public AlphaGrammarAccess.AISLRelationalOperatorElements getAISLRelationalOperatorAccess() {
		return gaAlpha.getAISLRelationalOperatorAccess();
	}
	
	public ParserRule getAISLRelationalOperatorRule() {
		return getAISLRelationalOperatorAccess().getRule();
	}
	
	//AISLExpressionList:
	//	(AISLExpression (',' AISLExpression)*)?;
	public AlphaGrammarAccess.AISLExpressionListElements getAISLExpressionListAccess() {
		return gaAlpha.getAISLExpressionListAccess();
	}
	
	public ParserRule getAISLExpressionListRule() {
		return getAISLExpressionListAccess().getRule();
	}
	
	////AAlphaFunction:
	////	'[' AIndexList '->' AISLExpressionList ']'
	////;
	//AlphaFunctionTerminalExpression AlphaFunctionExpression:
	//	AlphaFunctionLiteral | AlphaFunctionFloor |
	//	'(' AlphaFunctionAdditiveBinaryExpression ')';
	public AlphaGrammarAccess.AlphaFunctionTerminalExpressionElements getAlphaFunctionTerminalExpressionAccess() {
		return gaAlpha.getAlphaFunctionTerminalExpressionAccess();
	}
	
	public ParserRule getAlphaFunctionTerminalExpressionRule() {
		return getAlphaFunctionTerminalExpressionAccess().getRule();
	}
	
	//AlphaFunctionAdditiveBinaryExpression AlphaFunctionExpression:
	//	AlphaFunctionMultiplicativeBinaryExpression ({AlphaFunctionBinaryExpression.left=current}
	//	operator=AISLAdditiveOperator right=AlphaFunctionMultiplicativeBinaryExpression)*;
	public AlphaGrammarAccess.AlphaFunctionAdditiveBinaryExpressionElements getAlphaFunctionAdditiveBinaryExpressionAccess() {
		return gaAlpha.getAlphaFunctionAdditiveBinaryExpressionAccess();
	}
	
	public ParserRule getAlphaFunctionAdditiveBinaryExpressionRule() {
		return getAlphaFunctionAdditiveBinaryExpressionAccess().getRule();
	}
	
	//AlphaFunctionMultiplicativeBinaryExpression AlphaFunctionExpression:
	//	AlphaFunctionRelationalBinaryExpression ({AlphaFunctionBinaryExpression.left=current}
	//	operator=AISLMultiplicativeOperator right=AlphaFunctionRelationalBinaryExpression)*;
	public AlphaGrammarAccess.AlphaFunctionMultiplicativeBinaryExpressionElements getAlphaFunctionMultiplicativeBinaryExpressionAccess() {
		return gaAlpha.getAlphaFunctionMultiplicativeBinaryExpressionAccess();
	}
	
	public ParserRule getAlphaFunctionMultiplicativeBinaryExpressionRule() {
		return getAlphaFunctionMultiplicativeBinaryExpressionAccess().getRule();
	}
	
	//AlphaFunctionRelationalBinaryExpression AlphaFunctionExpression:
	//	AlphaFunctionTerminalExpression ({AlphaFunctionBinaryExpression.left=current} operator=AISLRelationalOperator
	//	right=AlphaFunctionTerminalExpression)*;
	public AlphaGrammarAccess.AlphaFunctionRelationalBinaryExpressionElements getAlphaFunctionRelationalBinaryExpressionAccess() {
		return gaAlpha.getAlphaFunctionRelationalBinaryExpressionAccess();
	}
	
	public ParserRule getAlphaFunctionRelationalBinaryExpressionRule() {
		return getAlphaFunctionRelationalBinaryExpressionAccess().getRule();
	}
	
	//AlphaFunctionFloor AlphaFunctionExpression:
	//	{AlphaFunctionFloor} 'floor' '(' expr=AlphaFunctionExpression ')';
	public AlphaGrammarAccess.AlphaFunctionFloorElements getAlphaFunctionFloorAccess() {
		return gaAlpha.getAlphaFunctionFloorAccess();
	}
	
	public ParserRule getAlphaFunctionFloorRule() {
		return getAlphaFunctionFloorAccess().getRule();
	}
	
	//AlphaFunctionLiteral AlphaFunctionExpression:
	//	{AlphaFunctionLiteral} value=AISLExpressionLiteral;
	public AlphaGrammarAccess.AlphaFunctionLiteralElements getAlphaFunctionLiteralAccess() {
		return gaAlpha.getAlphaFunctionLiteralAccess();
	}
	
	public ParserRule getAlphaFunctionLiteralRule() {
		return getAlphaFunctionLiteralAccess().getRule();
	}
	
	//AlphaFunctionExpression:
	//	AlphaFunctionAdditiveBinaryExpression;
	public AlphaGrammarAccess.AlphaFunctionExpressionElements getAlphaFunctionExpressionAccess() {
		return gaAlpha.getAlphaFunctionExpressionAccess();
	}
	
	public ParserRule getAlphaFunctionExpressionRule() {
		return getAlphaFunctionExpressionAccess().getRule();
	}
	
	//AlphaFunction:
	//	'(' indexList=AIndexList '->' (exprs+=AlphaFunctionExpression (',' exprs+=AlphaFunctionExpression)*)? ')';
	public AlphaGrammarAccess.AlphaFunctionElements getAlphaFunctionAccess() {
		return gaAlpha.getAlphaFunctionAccess();
	}
	
	public ParserRule getAlphaFunctionRule() {
		return getAlphaFunctionAccess().getRule();
	}
	
	//AISLBasicRelation:
	//	'[' AISLExpressionList ']' '->' '[' AISLExpressionList ']' ':' AISLString;
	public AlphaGrammarAccess.AISLBasicRelationElements getAISLBasicRelationAccess() {
		return gaAlpha.getAISLBasicRelationAccess();
	}
	
	public ParserRule getAISLBasicRelationRule() {
		return getAISLBasicRelationAccess().getRule();
	}
	
	//AISLWrappedBasicRelation:
	//	'[' '[' AIndexList ']' '->' '[' AISLExpressionList ']' ']' '->' '[' AISLExpressionList ']';
	public AlphaGrammarAccess.AISLWrappedBasicRelationElements getAISLWrappedBasicRelationAccess() {
		return gaAlpha.getAISLWrappedBasicRelationAccess();
	}
	
	public ParserRule getAISLWrappedBasicRelationRule() {
		return getAISLWrappedBasicRelationAccess().getRule();
	}
	
	//AISLFuzzyExpression:
	//	(IndexName | INT | '[' | ']' | '=' | '+' | '-' | '*' | '/' | '%' | WS)+;
	public AlphaGrammarAccess.AISLFuzzyExpressionElements getAISLFuzzyExpressionAccess() {
		return gaAlpha.getAISLFuzzyExpressionAccess();
	}
	
	public ParserRule getAISLFuzzyExpressionRule() {
		return getAISLFuzzyExpressionAccess().getRule();
	}
	
	////AIndexAffineExpression:	
	////	 '-'? AIndexAffineExpressionTerminal (('+'|'-') AIndexAffineExpression)*;
	////	
	////AIndexAffineExpressionTerminal:
	////	(INT | INT? IndexName);
	//Equation:
	//	StandardEquation | UseEquation;
	public AlphaGrammarAccess.EquationElements getEquationAccess() {
		return gaAlpha.getEquationAccess();
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}
	
	//StandardEquation:
	//	variable=[Variable] ('[' indexNames+=IndexName (',' indexNames+=IndexName)* ']')? '=' expr=AlphaExpression ';';
	public AlphaGrammarAccess.StandardEquationElements getStandardEquationAccess() {
		return gaAlpha.getStandardEquationAccess();
	}
	
	public ParserRule getStandardEquationRule() {
		return getStandardEquationAccess().getRule();
	}
	
	//UseEquation:
	//	(('over' instantiationDomainExpr=CalculatorExpression)? ('with' ('[' subsystemDims+=IndexName (','
	//	subsystemDims+=IndexName)* ']')?)? ':')?
	//	'(' (outputExprs+=AlphaExpression (',' outputExprs+=AlphaExpression)*)? ')'
	//	'='
	//	system=[AlphaSystem|QualifiedName] callParamsExpr=JNIFunctionInArrayNotation
	//	'(' (inputExprs+=AlphaExpression (',' inputExprs+=AlphaExpression)*)? ')'
	//	';';
	public AlphaGrammarAccess.UseEquationElements getUseEquationAccess() {
		return gaAlpha.getUseEquationAccess();
	}
	
	public ParserRule getUseEquationRule() {
		return getUseEquationAccess().getRule();
	}
	
	///* Alpha Expressions */ AlphaExpression:
	//	IfExpression | RestrictExpression | AutoRestrictExpression | OrExpression;
	public AlphaGrammarAccess.AlphaExpressionElements getAlphaExpressionAccess() {
		return gaAlpha.getAlphaExpressionAccess();
	}
	
	public ParserRule getAlphaExpressionRule() {
		return getAlphaExpressionAccess().getRule();
	}
	
	//AlphaTerminalExpression AlphaExpression:
	//	'(' AlphaExpression ')' | CaseExpression | ConstantExpression | VariableExpression | DependenceExpression |
	//	FuzzyDependenceExpression | IndexExpression | PolynomialIndexExpression | FuzzyIndexExpression | Reductions |
	//	ConvolutionExpression | MultiArgExpression | ExternalMultiArgExpression | SelectExpression;
	public AlphaGrammarAccess.AlphaTerminalExpressionElements getAlphaTerminalExpressionAccess() {
		return gaAlpha.getAlphaTerminalExpressionAccess();
	}
	
	public ParserRule getAlphaTerminalExpressionRule() {
		return getAlphaTerminalExpressionAccess().getRule();
	}
	
	////Child of UnaryExpression excludes constant and dependence expressions
	//// Constants may include negative numbers, which cause ambiguity
	//// Dependences are a form of unary expression, and hence require parentheses
	//AlphaUnaryTerminalExpression AlphaExpression:
	//	'(' AlphaExpression ')' | CaseExpression | VariableExpression | IndexExpression | PolynomialIndexExpression |
	//	FuzzyIndexExpression | Reductions | ConvolutionExpression | MultiArgExpression | ExternalMultiArgExpression |
	//	SelectExpression;
	public AlphaGrammarAccess.AlphaUnaryTerminalExpressionElements getAlphaUnaryTerminalExpressionAccess() {
		return gaAlpha.getAlphaUnaryTerminalExpressionAccess();
	}
	
	public ParserRule getAlphaUnaryTerminalExpressionRule() {
		return getAlphaUnaryTerminalExpressionAccess().getRule();
	}
	
	//Reductions AlphaExpression:
	//	ReduceExpression | ArgReduceExpression | ExternalReduceExpression | ExternalArgReduceExpression |
	//	FuzzyReduceExpression | FuzzyArgReduceExpression | ExternalFuzzyReduceExpression | ExternalFuzzyArgReduceExpression;
	public AlphaGrammarAccess.ReductionsElements getReductionsAccess() {
		return gaAlpha.getReductionsAccess();
	}
	
	public ParserRule getReductionsRule() {
		return getReductionsAccess().getRule();
	}
	
	//IfExpression:
	//	'if' condExpr=AlphaExpression
	//	'then' thenExpr=AlphaExpression
	//	'else' elseExpr=AlphaExpression;
	public AlphaGrammarAccess.IfExpressionElements getIfExpressionAccess() {
		return gaAlpha.getIfExpressionAccess();
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//RestrictExpression:
	//	domainExpr=(JNIDomain | JNIDomainInArrayNotation) ':' expr=AlphaExpression |
	//	'{' domainExpr=CalculatorExpression '}' ':' expr=AlphaExpression;
	public AlphaGrammarAccess.RestrictExpressionElements getRestrictExpressionAccess() {
		return gaAlpha.getRestrictExpressionAccess();
	}
	
	public ParserRule getRestrictExpressionRule() {
		return getRestrictExpressionAccess().getRule();
	}
	
	//AutoRestrictExpression:
	//	'auto' ':' expr=AlphaExpression;
	public AlphaGrammarAccess.AutoRestrictExpressionElements getAutoRestrictExpressionAccess() {
		return gaAlpha.getAutoRestrictExpressionAccess();
	}
	
	public ParserRule getAutoRestrictExpressionRule() {
		return getAutoRestrictExpressionAccess().getRule();
	}
	
	//CaseExpression:
	//	'case' name=ID? '{' (exprs+=AlphaExpression ';')+
	//	'}';
	public AlphaGrammarAccess.CaseExpressionElements getCaseExpressionAccess() {
		return gaAlpha.getCaseExpressionAccess();
	}
	
	public ParserRule getCaseExpressionRule() {
		return getCaseExpressionAccess().getRule();
	}
	
	//DependenceExpression:
	//	functionExpr=JNIFunction '@' expr=AlphaTerminalExpression | expr=VariableExpression
	//	functionExpr=JNIFunctionInArrayNotation | expr=ConstantExpression functionExpr=JNIFunctionInArrayNotation;
	public AlphaGrammarAccess.DependenceExpressionElements getDependenceExpressionAccess() {
		return gaAlpha.getDependenceExpressionAccess();
	}
	
	public ParserRule getDependenceExpressionRule() {
		return getDependenceExpressionAccess().getRule();
	}
	
	//FuzzyDependenceExpression:
	//	fuzzyFunction=FuzzyFunction '@' expr=AlphaTerminalExpression | expr=VariableExpression
	//	fuzzyFunction=FuzzyFunctionInArrayNotation;
	public AlphaGrammarAccess.FuzzyDependenceExpressionElements getFuzzyDependenceExpressionAccess() {
		return gaAlpha.getFuzzyDependenceExpressionAccess();
	}
	
	public ParserRule getFuzzyDependenceExpressionRule() {
		return getFuzzyDependenceExpressionAccess().getRule();
	}
	
	//IndexExpression:
	//	'val' functionExpr=JNIFunction | 'val' functionExpr=JNIFunctionInArrayNotation;
	public AlphaGrammarAccess.IndexExpressionElements getIndexExpressionAccess() {
		return gaAlpha.getIndexExpressionAccess();
	}
	
	public ParserRule getIndexExpressionRule() {
		return getIndexExpressionAccess().getRule();
	}
	
	//PolynomialIndexExpression:
	//	'val' polynomialExpr=JNIPolynomial | 'val' polynomialExpr=JNIPolynomialInArrayNotation;
	public AlphaGrammarAccess.PolynomialIndexExpressionElements getPolynomialIndexExpressionAccess() {
		return gaAlpha.getPolynomialIndexExpressionAccess();
	}
	
	public ParserRule getPolynomialIndexExpressionRule() {
		return getPolynomialIndexExpressionAccess().getRule();
	}
	
	//FuzzyIndexExpression:
	//	'val' fuzzyFunction=FuzzyFunction | fuzzyFunction=FuzzyFunctionInArrayNotation;
	public AlphaGrammarAccess.FuzzyIndexExpressionElements getFuzzyIndexExpressionAccess() {
		return gaAlpha.getFuzzyIndexExpressionAccess();
	}
	
	public ParserRule getFuzzyIndexExpressionRule() {
		return getFuzzyIndexExpressionAccess().getRule();
	}
	
	//ReduceExpression:
	//	'reduce' '(' operator=AREDUCTION_OP ','
	//	projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
	//	body=AlphaExpression
	//	')';
	public AlphaGrammarAccess.ReduceExpressionElements getReduceExpressionAccess() {
		return gaAlpha.getReduceExpressionAccess();
	}
	
	public ParserRule getReduceExpressionRule() {
		return getReduceExpressionAccess().getRule();
	}
	
	//ExternalReduceExpression:
	//	'reduce' '(' externalFunction=[ExternalFunction|QualifiedName] ','
	//	projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
	//	body=AlphaExpression
	//	')';
	public AlphaGrammarAccess.ExternalReduceExpressionElements getExternalReduceExpressionAccess() {
		return gaAlpha.getExternalReduceExpressionAccess();
	}
	
	public ParserRule getExternalReduceExpressionRule() {
		return getExternalReduceExpressionAccess().getRule();
	}
	
	//ArgReduceExpression:
	//	'argreduce' '(' operator=AREDUCTION_OP ','
	//	projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
	//	body=AlphaExpression
	//	')';
	public AlphaGrammarAccess.ArgReduceExpressionElements getArgReduceExpressionAccess() {
		return gaAlpha.getArgReduceExpressionAccess();
	}
	
	public ParserRule getArgReduceExpressionRule() {
		return getArgReduceExpressionAccess().getRule();
	}
	
	//ExternalArgReduceExpression:
	//	'argreduce' '(' externalFunction=[ExternalFunction|QualifiedName] ','
	//	projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
	//	body=AlphaExpression
	//	')';
	public AlphaGrammarAccess.ExternalArgReduceExpressionElements getExternalArgReduceExpressionAccess() {
		return gaAlpha.getExternalArgReduceExpressionAccess();
	}
	
	public ParserRule getExternalArgReduceExpressionRule() {
		return getExternalArgReduceExpressionAccess().getRule();
	}
	
	//FuzzyReduceExpression:
	//	'reduce' '(' operator=AREDUCTION_OP ','
	//	projectionFunction=FuzzyFunction ','
	//	body=AlphaExpression
	//	')';
	public AlphaGrammarAccess.FuzzyReduceExpressionElements getFuzzyReduceExpressionAccess() {
		return gaAlpha.getFuzzyReduceExpressionAccess();
	}
	
	public ParserRule getFuzzyReduceExpressionRule() {
		return getFuzzyReduceExpressionAccess().getRule();
	}
	
	//ExternalFuzzyReduceExpression:
	//	'reduce' '(' externalFunction=[ExternalFunction|QualifiedName] ','
	//	projectionFunction=FuzzyFunction ','
	//	body=AlphaExpression
	//	')';
	public AlphaGrammarAccess.ExternalFuzzyReduceExpressionElements getExternalFuzzyReduceExpressionAccess() {
		return gaAlpha.getExternalFuzzyReduceExpressionAccess();
	}
	
	public ParserRule getExternalFuzzyReduceExpressionRule() {
		return getExternalFuzzyReduceExpressionAccess().getRule();
	}
	
	//FuzzyArgReduceExpression:
	//	'argreduce' '(' operator=AREDUCTION_OP ','
	//	projectionFunction=FuzzyFunction ','
	//	body=AlphaExpression
	//	')';
	public AlphaGrammarAccess.FuzzyArgReduceExpressionElements getFuzzyArgReduceExpressionAccess() {
		return gaAlpha.getFuzzyArgReduceExpressionAccess();
	}
	
	public ParserRule getFuzzyArgReduceExpressionRule() {
		return getFuzzyArgReduceExpressionAccess().getRule();
	}
	
	//ExternalFuzzyArgReduceExpression:
	//	'argreduce' '(' externalFunction=[ExternalFunction|QualifiedName] ','
	//	projectionFunction=FuzzyFunction ','
	//	body=AlphaExpression
	//	')';
	public AlphaGrammarAccess.ExternalFuzzyArgReduceExpressionElements getExternalFuzzyArgReduceExpressionAccess() {
		return gaAlpha.getExternalFuzzyArgReduceExpressionAccess();
	}
	
	public ParserRule getExternalFuzzyArgReduceExpressionRule() {
		return getExternalFuzzyArgReduceExpressionAccess().getRule();
	}
	
	//ConvolutionExpression:
	//	'conv' '(' kernelDomainExpr=CalculatorExpression ','
	//	kernelExpression=AlphaExpression ','
	//	dataExpression=AlphaExpression
	//	')';
	public AlphaGrammarAccess.ConvolutionExpressionElements getConvolutionExpressionAccess() {
		return gaAlpha.getConvolutionExpressionAccess();
	}
	
	public ParserRule getConvolutionExpressionRule() {
		return getConvolutionExpressionAccess().getRule();
	}
	
	//SelectExpression:
	//	'select' relationExpr=CalculatorExpression 'from' expr=AlphaTerminalExpression;
	public AlphaGrammarAccess.SelectExpressionElements getSelectExpressionAccess() {
		return gaAlpha.getSelectExpressionAccess();
	}
	
	public ParserRule getSelectExpressionRule() {
		return getSelectExpressionAccess().getRule();
	}
	
	//OrExpression AlphaExpression:
	//	AndExpression ({BinaryExpression.left=current} operator=AOrOP right=AndExpression)*;
	public AlphaGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaAlpha.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression AlphaExpression:
	//	RelationalExpression ({BinaryExpression.left=current} operator=AAndOP right=RelationalExpression)*;
	public AlphaGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaAlpha.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//RelationalExpression AlphaExpression:
	//	AdditiveExpression ({BinaryExpression.left=current} operator=ARelationalOP right=AdditiveExpression)*;
	public AlphaGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaAlpha.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//AdditiveExpression AlphaExpression:
	//	MultiplicativeExpression ({BinaryExpression.left=current} operator=AAdditiveOP right=MultiplicativeExpression)*;
	public AlphaGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaAlpha.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression AlphaExpression:
	//	MinMaxExpression ({BinaryExpression.left=current} operator=AMultiplicativeOP right=MinMaxExpression)*;
	public AlphaGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaAlpha.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//MinMaxExpression AlphaExpression:
	//	UnaryOrTerminalExpression ({BinaryExpression.left=current} operator=AMINMAX_OP right=UnaryOrTerminalExpression)*;
	public AlphaGrammarAccess.MinMaxExpressionElements getMinMaxExpressionAccess() {
		return gaAlpha.getMinMaxExpressionAccess();
	}
	
	public ParserRule getMinMaxExpressionRule() {
		return getMinMaxExpressionAccess().getRule();
	}
	
	//MultiArgExpression:
	//	operator=AREDUCTION_OP '(' exprs+=AlphaExpression (',' exprs+=AlphaExpression)* ')';
	public AlphaGrammarAccess.MultiArgExpressionElements getMultiArgExpressionAccess() {
		return gaAlpha.getMultiArgExpressionAccess();
	}
	
	public ParserRule getMultiArgExpressionRule() {
		return getMultiArgExpressionAccess().getRule();
	}
	
	//ExternalMultiArgExpression:
	//	externalFunction=[ExternalFunction|QualifiedName] '(' exprs+=AlphaExpression (',' exprs+=AlphaExpression)* ')';
	public AlphaGrammarAccess.ExternalMultiArgExpressionElements getExternalMultiArgExpressionAccess() {
		return gaAlpha.getExternalMultiArgExpressionAccess();
	}
	
	public ParserRule getExternalMultiArgExpressionRule() {
		return getExternalMultiArgExpressionAccess().getRule();
	}
	
	//UnaryOrTerminalExpression AlphaExpression:
	//	UnaryExpression | AlphaTerminalExpression;
	public AlphaGrammarAccess.UnaryOrTerminalExpressionElements getUnaryOrTerminalExpressionAccess() {
		return gaAlpha.getUnaryOrTerminalExpressionAccess();
	}
	
	public ParserRule getUnaryOrTerminalExpressionRule() {
		return getUnaryOrTerminalExpressionAccess().getRule();
	}
	
	//UnaryExpression:
	//	operator=AUnaryOP expr=AlphaUnaryTerminalExpression;
	public AlphaGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaAlpha.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//VariableExpression:
	//	variable=[Variable];
	public AlphaGrammarAccess.VariableExpressionElements getVariableExpressionAccess() {
		return gaAlpha.getVariableExpressionAccess();
	}
	
	public ParserRule getVariableExpressionRule() {
		return getVariableExpressionAccess().getRule();
	}
	
	//ConstantExpression:
	//	BooleanExpression | RealExpression | IntegerExpression;
	public AlphaGrammarAccess.ConstantExpressionElements getConstantExpressionAccess() {
		return gaAlpha.getConstantExpressionAccess();
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	//BooleanExpression:
	//	value=BOOLEAN;
	public AlphaGrammarAccess.BooleanExpressionElements getBooleanExpressionAccess() {
		return gaAlpha.getBooleanExpressionAccess();
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//IntegerExpression:
	//	value=SINT;
	public AlphaGrammarAccess.IntegerExpressionElements getIntegerExpressionAccess() {
		return gaAlpha.getIntegerExpressionAccess();
	}
	
	public ParserRule getIntegerExpressionRule() {
		return getIntegerExpressionAccess().getRule();
	}
	
	//RealExpression:
	//	value=FLOAT;
	public AlphaGrammarAccess.RealExpressionElements getRealExpressionAccess() {
		return gaAlpha.getRealExpressionAccess();
	}
	
	public ParserRule getRealExpressionRule() {
		return getRealExpressionAccess().getRule();
	}
	
	//AREDUCTION_OP REDUCTION_OP:
	//	"min" | "max" | "prod" | "sum" | "and" | "or" | "xor" | "+" | "*";
	public AlphaGrammarAccess.AREDUCTION_OPElements getAREDUCTION_OPAccess() {
		return gaAlpha.getAREDUCTION_OPAccess();
	}
	
	public ParserRule getAREDUCTION_OPRule() {
		return getAREDUCTION_OPAccess().getRule();
	}
	
	//AOrOP BINARY_OP:
	//	"or" | "xor";
	public AlphaGrammarAccess.AOrOPElements getAOrOPAccess() {
		return gaAlpha.getAOrOPAccess();
	}
	
	public ParserRule getAOrOPRule() {
		return getAOrOPAccess().getRule();
	}
	
	//AAndOP BINARY_OP:
	//	"and";
	public AlphaGrammarAccess.AAndOPElements getAAndOPAccess() {
		return gaAlpha.getAAndOPAccess();
	}
	
	public ParserRule getAAndOPRule() {
		return getAAndOPAccess().getRule();
	}
	
	//ARelationalOP BINARY_OP:
	//	"=" | "!=" | ">=" | ">" | "<" | "<=";
	public AlphaGrammarAccess.ARelationalOPElements getARelationalOPAccess() {
		return gaAlpha.getARelationalOPAccess();
	}
	
	public ParserRule getARelationalOPRule() {
		return getARelationalOPAccess().getRule();
	}
	
	//AAdditiveOP BINARY_OP:
	//	"+" | "-";
	public AlphaGrammarAccess.AAdditiveOPElements getAAdditiveOPAccess() {
		return gaAlpha.getAAdditiveOPAccess();
	}
	
	public ParserRule getAAdditiveOPRule() {
		return getAAdditiveOPAccess().getRule();
	}
	
	//AMultiplicativeOP BINARY_OP:
	//	"*" | "/";
	public AlphaGrammarAccess.AMultiplicativeOPElements getAMultiplicativeOPAccess() {
		return gaAlpha.getAMultiplicativeOPAccess();
	}
	
	public ParserRule getAMultiplicativeOPRule() {
		return getAMultiplicativeOPAccess().getRule();
	}
	
	//AMINMAX_OP BINARY_OP:
	//	"min" | "max";
	public AlphaGrammarAccess.AMINMAX_OPElements getAMINMAX_OPAccess() {
		return gaAlpha.getAMINMAX_OPAccess();
	}
	
	public ParserRule getAMINMAX_OPRule() {
		return getAMINMAX_OPAccess().getRule();
	}
	
	//AUnaryOP UNARY_OP:
	//	"not" | "-";
	public AlphaGrammarAccess.AUnaryOPElements getAUnaryOPAccess() {
		return gaAlpha.getAUnaryOPAccess();
	}
	
	public ParserRule getAUnaryOPRule() {
		return getAUnaryOPAccess().getRule();
	}
	
	///* Calculator Expressions */ PolyhedralObject:
	//	name=ID '=' expr=CalculatorExpression;
	public AlphaGrammarAccess.PolyhedralObjectElements getPolyhedralObjectAccess() {
		return gaAlpha.getPolyhedralObjectAccess();
	}
	
	public ParserRule getPolyhedralObjectRule() {
		return getPolyhedralObjectAccess().getRule();
	}
	
	//CalculatorExpression:
	//	UnaryOrTerminalCalculatorExpression ({BinaryCalculatorExpression.left=current} operator=ABinaryCalcOp
	//	right=UnaryOrTerminalCalculatorExpression)*;
	public AlphaGrammarAccess.CalculatorExpressionElements getCalculatorExpressionAccess() {
		return gaAlpha.getCalculatorExpressionAccess();
	}
	
	public ParserRule getCalculatorExpressionRule() {
		return getCalculatorExpressionAccess().getRule();
	}
	
	//UnaryOrTerminalCalculatorExpression CalculatorExpression:
	//	UnaryCalculatorExpression | CalculatorExpressionTerminal;
	public AlphaGrammarAccess.UnaryOrTerminalCalculatorExpressionElements getUnaryOrTerminalCalculatorExpressionAccess() {
		return gaAlpha.getUnaryOrTerminalCalculatorExpressionAccess();
	}
	
	public ParserRule getUnaryOrTerminalCalculatorExpressionRule() {
		return getUnaryOrTerminalCalculatorExpressionAccess().getRule();
	}
	
	//CalculatorExpressionTerminal CalculatorExpression:
	//	JNIDomain | JNIRelation | JNIFunction | DefinedObject | RectangularDomain | VariableDomain |
	//	'(' CalculatorExpression ')';
	public AlphaGrammarAccess.CalculatorExpressionTerminalElements getCalculatorExpressionTerminalAccess() {
		return gaAlpha.getCalculatorExpressionTerminalAccess();
	}
	
	public ParserRule getCalculatorExpressionTerminalRule() {
		return getCalculatorExpressionTerminalAccess().getRule();
	}
	
	//UnaryCalculatorExpression:
	//	operator=AUnaryCalcOp expr=CalculatorExpressionTerminal;
	public AlphaGrammarAccess.UnaryCalculatorExpressionElements getUnaryCalculatorExpressionAccess() {
		return gaAlpha.getUnaryCalculatorExpressionAccess();
	}
	
	public ParserRule getUnaryCalculatorExpressionRule() {
		return getUnaryCalculatorExpressionAccess().getRule();
	}
	
	//VariableDomain:
	//	'{' variable=[Variable] '}';
	public AlphaGrammarAccess.VariableDomainElements getVariableDomainAccess() {
		return gaAlpha.getVariableDomainAccess();
	}
	
	public ParserRule getVariableDomainRule() {
		return getVariableDomainAccess().getRule();
	}
	
	//RectangularDomain:
	//	'[' upperBounds+=AISLExpression (',' upperBounds+=AISLExpression)* ']' ('as' '[' indexNames+=IndexName (','
	//	indexNames+=IndexName)* ']')? |
	//	'[' lowerBounds+=AISLExpression ':' upperBounds+=AISLExpression (',' lowerBounds+=AISLExpression ':'
	//	upperBounds+=AISLExpression)* ']' ('as' '[' indexNames+=IndexName (',' indexNames+=IndexName)* ']')?;
	public AlphaGrammarAccess.RectangularDomainElements getRectangularDomainAccess() {
		return gaAlpha.getRectangularDomainAccess();
	}
	
	public ParserRule getRectangularDomainRule() {
		return getRectangularDomainAccess().getRule();
	}
	
	//DefinedObject:
	//	object=[PolyhedralObject];
	public AlphaGrammarAccess.DefinedObjectElements getDefinedObjectAccess() {
		return gaAlpha.getDefinedObjectAccess();
	}
	
	public ParserRule getDefinedObjectRule() {
		return getDefinedObjectAccess().getRule();
	}
	
	//AUnaryCalcOp CALCULATOR_UNARY_OP:
	//	'domain' | 'range' | 'complement' | 'affine-hull' | 'poly-hull' | 'reverse';
	public AlphaGrammarAccess.AUnaryCalcOpElements getAUnaryCalcOpAccess() {
		return gaAlpha.getAUnaryCalcOpAccess();
	}
	
	public ParserRule getAUnaryCalcOpRule() {
		return getAUnaryCalcOpAccess().getRule();
	}
	
	//ABinaryCalcOp CALCULATOR_BINARY_OP:
	//	'cross' | '+' | '-' | '*' | '@' | 'intersectRange' | 'subtractRange';
	public AlphaGrammarAccess.ABinaryCalcOpElements getABinaryCalcOpAccess() {
		return gaAlpha.getABinaryCalcOpAccess();
	}
	
	public ParserRule getABinaryCalcOpRule() {
		return getABinaryCalcOpAccess().getRule();
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAlpha.getBOOLEANRule();
	}
	
	//////terminal INT : ('0'..'9')+;
	//FLOAT ecore::EFloat:
	//	'-'? INT '.' INT;
	public AlphaGrammarAccess.FLOATElements getFLOATAccess() {
		return gaAlpha.getFLOATAccess();
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//SINT ecore::EInt:
	//	'-'? INT;
	public AlphaGrammarAccess.SINTElements getSINTAccess() {
		return gaAlpha.getSINTAccess();
	}
	
	public ParserRule getSINTRule() {
		return getSINTAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* |
	//	"'" ('a'..'z' | 'A'..'Z' | '~' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '-' | '_' | '+' | '=' |
	//	'|' | '/' | '?' | '0'..'9')+ "'";
	public TerminalRule getIDRule() {
		return gaAlpha.getIDRule();
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaAlpha.getSTRINGRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
