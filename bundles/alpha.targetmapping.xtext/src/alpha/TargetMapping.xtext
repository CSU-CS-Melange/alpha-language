// automatically generated by Xtext
grammar alpha.targetmapping.TargetMapping with alpha.model.Alpha

import "alpha.targetmapping" 
import "alpha.model" as model
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TargetMapping returns TargetMapping:
	'target' targetSystem=[model::AlphaSystem|QualifiedName]
	
	(systemBodyTMs+=TargetMappingForSystemBody)*
 
;

TargetMappingForSystemBody:
	{TargetMappingForSystemBody}  ('body' targetBody=[model::SystemBody|IntRef] ':')? scheduleTreeRoot=(ContextExpression|ScheduleTreeExpression)
;
IntRef returns ecore::EString: INT;


ScheduleTreeExpression:
	SequenceExpression |
	SetExpression |
	FilterExpression |
	GuardExpression |
	MarkExpression |
	BandExpression |
	ExtensionExpression
;

ContextExpression:
	'context' contextDomain=JNIDomainInArrayNotation child=ScheduleTreeExpression
;

SetExpression:
	'set' '{'
		(children+=ScheduleTreeExpression ';')+
	'}'
;

SequenceExpression:
	'seq' '{'
		(children+=ScheduleTreeExpression ';')+
	'}'
;

ScheduleTargetRestrictDomain:
	scheduleTarget=[model::AlphaScheduleTarget|ID] ('[' indexNames+=ID (',' indexNames+=ID)* ']')? restrictDomain=JNIDomainInArrayNotation?
;
ScheduleTargetRestrictNoSet returns ScheduleTargetRestrictDomain:
	scheduleTarget=[model::AlphaScheduleTarget|ID] ('[' indexNames+=ID (',' indexNames+=ID)* ']')
;
FilterExpression:
	filterDomains+=ScheduleTargetRestrictDomain (',' filterDomains+=ScheduleTargetRestrictDomain)* ':' child=ScheduleTreeExpression
;

GuardExpression:
	'if' guardDomain=JNIDomain child=ScheduleTreeExpression
;

MarkExpression:
	'mark' '(' identifier=ID ')' child=ScheduleTreeExpression 
;

BandExpression:
	'band' ('(' tile?='tile'? & parallel?='parallel'? 
		& loopTypeSpecifications+=LoopTypeSpecification* 
		& isolateSpecification=IsolateSpecification? ')'
	)? '{'
		(bandPieces+=BandPiece)+
	'}' ('+' child=ScheduleTreeExpression)?
;
BandPiece:
	pieceDomain=ScheduleTargetRestrictDomain ':' partialSchedule=JNIFunctionInArrayNotation |
	BandPieceForReductionBody
;
IsolateSpecification:
	'isolate' '(' 
		isolateDomain=JNIDomain 
		(loopTypeSpecifications+=LoopTypeSpecification (',' loopTypeSpecifications+=LoopTypeSpecification)* )?
	')'
;
LoopTypeSpecification:
	loopType=ISLASTLoopType '(' dimension=INT ')'
;
ISLASTLoopType returns ISLASTLoopType:
	'default' |
	'atomic' |
	'unroll' |
	'separate'
	
;
BandPieceForReductionBody:
	'reduction' '(' pieceDomain=ScheduleTargetRestrictDomain (',' reductionInitialization=STRING)? ')'  ':' partialSchedule=JNIFunctionInArrayNotation
;

ExtensionExpression:
	'extend' '(' extensionTargets+=ExtensionTarget (',' extensionTargets+=ExtensionTarget)* ')' child=ScheduleTreeExpression
;

ExtensionTarget:
	('from' source=[model::AlphaScheduleTarget|ID])? extensionMap=JNIRelation 'as' name=ID ('[' indexNames+=ID (',' indexNames+=ID)* ']')? 
;



//	('SpaceTime' '{'
//		((spaceTimeMaps+=SpaceTimeMappingVariableNameOnly ',')* spaceTimeMaps+=(SpaceTimeMapping|SpaceTimeMappingIdentity))+
//	'}')?
//	
//	('MemoryMap' '{'
//		(memorySpaces+=(MemorySpace|MemorySpaceMappingOnly))+
//	'}')?
//
//MemorySpace:
//	name=ID '{' 
//		((memoryMaps+=MemoryMappingVariableNameOnly ',')* memoryMaps+=(MemoryMapping|MemoryMappingIdentity))*
//	'}'
//;
//
//MemorySpaceMappingOnly returns MemorySpace:
//	memoryMaps+=(MemoryMapping|MemoryMappingIdentity)
//;
//
//SpaceTimeMapping:
//		scheduleTarget=[model::AlphaScheduleTarget|ID] ':' mapping=JNIFunction
//;
//
//MemoryMapping:
//		scheduleTarget=[model::AlphaScheduleTarget|ID] ':' mapping=JNIFunction
//;
//
//SpaceTimeMappingVariableNameOnly returns SpaceTimeMapping:
//	scheduleTarget=[model::AlphaScheduleTarget|ID]
//;
//MemoryMappingVariableNameOnly returns MemoryMapping:
//	scheduleTarget=[model::AlphaScheduleTarget|ID]
//;
//
//SpaceTimeMappingIdentity returns SpaceTimeMapping:
//	scheduleTarget=[model::AlphaScheduleTarget|ID] ':' 'Id'
//;
//MemoryMappingIdentity returns MemoryMapping:
//	scheduleTarget=[model::AlphaScheduleTarget|ID] ':' 'Id'
//;
