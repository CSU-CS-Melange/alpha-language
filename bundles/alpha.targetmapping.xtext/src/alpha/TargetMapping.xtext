// automatically generated by Xtext
grammar alpha.targetmapping.TargetMapping with alpha.model.Alpha

import "alpha.targetmapping"
import "alpha.model" as model
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TargetMapping returns TargetMapping:
	'target' targetSystem=[model::AlphaSystem|QualifiedName]
	
	(systemBodyTMs+=TargetMappingForSystemBody)*
 
;

TargetMappingForSystemBody:
	{TargetMappingForSystemBody}  ('body' targetBody=[model::SystemBody|IntRef] ':')? scheduleTreeRoot=(ContextExpression|ScheduleTreeExpression)
;
IntRef returns ecore::EString: INT;


ScheduleTreeExpression:
	SequenceExpression |
	SetExpression      |
	FilterExpression   |
	GuardExpression    |
	MarkExpression     |
	BandExpression     |
	TileBandExpression
;

FilterOrExtension returns ScheduleTreeExpression:
	FilterExpression|ExtensionExpression
;

ContextExpression:
	'context' contextDomainExpr=JNIDomainInArrayNotation child=ScheduleTreeExpression
;

SetExpression:
	'set' '{'
		(children+=FilterExpression ';')+
	'}'
;

SequenceExpression:
	'seq' '{'
		(children+=FilterOrExtension ';')+
	'}'
;

ScheduleTargetRestrictDomain:
	scheduleTarget=[model::AlphaScheduleTarget|ID] ('[' indexNames+=ID (',' indexNames+=ID)* ']')? restrictDomainExpr=(JNIDomain|JNIDomainInArrayNotation)?
;
ScheduleTargetRestrictNoSet returns ScheduleTargetRestrictDomain:
	scheduleTarget=[model::AlphaScheduleTarget|ID] ('[' indexNames+=ID (',' indexNames+=ID)* ']')
;
FilterExpression:
	filterDomains+=ScheduleTargetRestrictDomain (',' filterDomains+=ScheduleTargetRestrictDomain)* (':' child=ScheduleTreeExpression)?
;

GuardExpression:
	'if' guardDomainExpr=(JNIDomain|JNIDomainInArrayNotation) child=ScheduleTreeExpression
;

MarkExpression:
	'mark' '(' identifier=ID ')' child=ScheduleTreeExpression 
;

BandExpression:
	'band' ('[' scheduleDimensionNames+=ID (',' scheduleDimensionNames+=ID)* ']')? '{'
		(bandPieces+=BandPiece)+
		loopTypeSpecifications+=LoopTypeSpecification*
		isolateSpecification=IsolateSpecification?
	'}' ('+' child=ScheduleTreeExpression)?
;
BandPiece:
	pieceDomain=ScheduleTargetRestrictDomain ':' partialScheduleExpr=(JNIFunction|JNIFunctionInArrayNotation)
;
IsolateSpecification:
	'isolate' '(' 
		isolateDomainExpr=(JNIDomain|JNIDomainInArrayNotation) 
		(loopTypeSpecifications+=LoopTypeSpecification (',' loopTypeSpecifications+=LoopTypeSpecification)* )?
	')'
;
LoopTypeSpecification:
	ISLLoopTypeSpecification |
	AlphaLoopTypeSpecification
;
ISLLoopTypeSpecification: 
	loopType=ISLASTLoopType '(' dimension=INT ')'
;
AlphaLoopTypeSpecification:
	loopType=AlphaLoopType '(' dimension=INT ')' 
;

ISLASTLoopType returns ISLASTLoopType:
	'default' |
	'atomic'  |
	'unroll'  |
	'separate'
;
AlphaLoopType returns ALPHA_LOOP_TYPE:
	'parallel' 
;
FixedSizeTilingType returns TILING_TYPE:
	'fixed-size'
;
ParametricTilingType returns TILING_TYPE:
	'parametric'
;
CompileTimeConstantTilingType returns TILING_TYPE:
	'compile-time-constant'
;

/*
 * TileBandExpression has lots of copy & paste to fake context sensitive parsing.
 * The tiling type is specified at the TileBandExpression (default = fixed size)
 * and the later TileLoopSpecifications are forced to only accept the 
 * corresponding TileSizeSpecifications.
 * 
 */
TileBandExpression:
	FixedSizeTileBandExpression |
	ParametricTileBandExpression |
	CompileTimeConstantTileBandExpression
;
FixedSizeTileBandExpression returns TileBandExpression:
	'tile-band' ('(' tilingType=FixedSizeTilingType ')')? ('[' scheduleDimensionNames+=ID (',' scheduleDimensionNames+=ID)* ']')? '{'
		(bandPieces+=BandPiece)+
		tilingSpecification=FixedSizeTilingTileLoopSpecification
	'}'
;
ParametricTileBandExpression returns TileBandExpression:
	'tile-band' '(' tilingType=ParametricTilingType ')' ('[' scheduleDimensionNames+=ID (',' scheduleDimensionNames+=ID)* ']')? '{'
		(bandPieces+=BandPiece)+
		tilingSpecification=ParametricTilingTileLoopSpecification
	'}'
;
CompileTimeConstantTileBandExpression returns TileBandExpression:
	'tile-band' '(' tilingType=CompileTimeConstantTilingType ')' ('[' scheduleDimensionNames+=ID (',' scheduleDimensionNames+=ID)* ']')? '{'
		(bandPieces+=BandPiece)+
		tilingSpecification=CompileTimeConstantTilingTileLoopSpecification
	'}'
;

FixedSizeTilingSpecification returns TilingSpecification:
	FixedSizeTilingTileLoopSpecification | 
	PointLoopSpecification
;
ParametricTilingSpecification returns TilingSpecification:
	ParametricTilingTileLoopSpecification | 
	PointLoopSpecification
;
CompileTimeConstantTilingSpecification returns TilingSpecification:
	CompileTimeConstantTilingTileLoopSpecification | 
	PointLoopSpecification
;

FixedSizeTilingTileLoopSpecification returns TileLoopSpecification:
	'tile' parallel?='parallel'?
	'(' tileSizeSpecifications+=FixedTileSize (',' tileSizeSpecifications+=FixedTileSize)* ')'
	loopScheduleExpr=(JNIFunction|JNIFunctionInArrayNotation|JNIIdentityFunction)?
	tilingSpecification=FixedSizeTilingSpecification
;
ParametricTilingTileLoopSpecification returns TileLoopSpecification:
	'tile' parallel?='parallel'?
	'(' tileSizeSpecifications+=ParametricTileSize (',' tileSizeSpecifications+=ParametricTileSize)* ')'
	loopScheduleExpr=(JNIFunction|JNIFunctionInArrayNotation|JNIIdentityFunction)?
	tilingSpecification=ParametricTilingSpecification
;
CompileTimeConstantTilingTileLoopSpecification returns TileLoopSpecification:
	'tile' parallel?='parallel'?
	'(' tileSizeSpecifications+=CompileTimeConstantTileSize (',' tileSizeSpecifications+=CompileTimeConstantTileSize)* ')'
	loopScheduleExpr=(JNIFunction|JNIFunctionInArrayNotation|JNIIdentityFunction)?
	tilingSpecification=CompileTimeConstantTilingSpecification
;

PointLoopSpecification:
	{PointLoopSpecification} 'point' //loopScheduleExpr=(JNIFunction|JNIFunctionInArrayNotation|JNIIdentityFunction)?
		 loopTypeSpecifications+=LoopTypeSpecification*
		 fullTileSpecification=FullTileSpecification?
;

FullTileSpecification:
	{FullTileSpecification} 'full-tile' ('(' 
		loopTypeSpecifications+=LoopTypeSpecification (',' loopTypeSpecifications+=LoopTypeSpecification)*
	')')?
;

ExtensionExpression:
	'extend' '(' extensionTargets+=ExtensionTarget (',' extensionTargets+=ExtensionTarget)* ')' child=ScheduleTreeExpression
;

ExtensionTarget:
	extensionMapExpr=JNIRelation 'as' name=ID ('[' indexNames+=ID (',' indexNames+=ID)* ']')? 
;

FixedTileSize:
	tileSize=INT
;
ParametricTileSize:
	tileSizeName=ID
;
CompileTimeConstantTileSize:
	tileSizeName=ID '=' defaultValue=INT
;

JNIIdentityFunction:
	{JNIIdentityFunction} 'Id';

//	('SpaceTime' '{'
//		((spaceTimeMaps+=SpaceTimeMappingVariableNameOnly ',')* spaceTimeMaps+=(SpaceTimeMapping|SpaceTimeMappingIdentity))+
//	'}')?
//	
//	('MemoryMap' '{'
//		(memorySpaces+=(MemorySpace|MemorySpaceMappingOnly))+
//	'}')?
//
//MemorySpace:
//	name=ID '{' 
//		((memoryMaps+=MemoryMappingVariableNameOnly ',')* memoryMaps+=(MemoryMapping|MemoryMappingIdentity))*
//	'}'
//;
//
//MemorySpaceMappingOnly returns MemorySpace:
//	memoryMaps+=(MemoryMapping|MemoryMappingIdentity)
//;
//
//SpaceTimeMapping:
//		scheduleTarget=[model::AlphaScheduleTarget|ID] ':' mapping=JNIFunction
//;
//
//MemoryMapping:
//		scheduleTarget=[model::AlphaScheduleTarget|ID] ':' mapping=JNIFunction
//;
//
//SpaceTimeMappingVariableNameOnly returns SpaceTimeMapping:
//	scheduleTarget=[model::AlphaScheduleTarget|ID]
//;
//MemoryMappingVariableNameOnly returns MemoryMapping:
//	scheduleTarget=[model::AlphaScheduleTarget|ID]
//;
//
//SpaceTimeMappingIdentity returns SpaceTimeMapping:
//	scheduleTarget=[model::AlphaScheduleTarget|ID] ':' 'Id'
//;
//MemoryMappingIdentity returns MemoryMapping:
//	scheduleTarget=[model::AlphaScheduleTarget|ID] ':' 'Id'
//;
