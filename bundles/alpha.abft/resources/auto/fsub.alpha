
affine fsub_aabft [N] -> {  : N > 0 }
	inputs
		L : {[i, j]: i < N and 0 <= j <= i }
		b : {[i]: 0 <= i < N }
	outputs
		x : {[i]: 0 <= i < N }
		Inv_x_c : {}
	locals
		x_c_0 : {}
		x_c_1 : {}
	when {  : N > 0 } let
		x[i] = case  {
			{: i = 0 } : (b / L[i,i]);
			{: i > 0 } : ((b - reduce(+, (i,j->i), {: 0 <= j < i } : (L * x[j]))) / L[i,i]);
		};
		
		x_c_0 = reduce(+, (i->), x);
		
		x_c_1 = reduce(+, (i->), case  {
			{: i = 0 } : (b / L[i,i]);
			((b - reduce(+, (i,j->i), {: 0 <= j < i } : (L * x[j]))) / L[i,i]);
		});
		
		Inv_x_c = ((x_c_0 - x_c_1) / x_c_0);
.
