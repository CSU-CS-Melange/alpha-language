
affine matmult_aabft [N] -> {  : N > 0 }
	inputs
		A : {[i, j]: 0 <= i < N and 0 <= j < N }
		B : {[i, j]: 0 <= i < N and 0 <= j < N }
	outputs
		C : {[i, j]: 0 <= i < N and 0 <= j < N }
		Inv_C_r : {[i]: 0 <= i < N }
		Inv_C_c : {[j]: 0 <= j < N }
	locals
		C_r_0 : {[i]: 0 <= i < N }
		C_r_1 : {[i]: 0 <= i < N }
		C_c_0 : {[j]: 0 <= j < N }
		C_c_1 : {[j]: 0 <= j < N }
	when {  : N > 0 } let
		C[i,j] = reduce(+, (i,j,k->i,j), (A[i,k] * B[k,j]));
		
		C_r_0[i] = reduce(+, (i,j->i), C);
		
		C_r_1[i] = reduce(+, (i,j,k->i), (A[i,k] * B[k,j]));
		
		C_c_0[j] = reduce(+, (i,j->j), C);
		
		C_c_1[j] = reduce(+, (i,j,k->j), (A[i,k] * B[k,j]));
		
		Inv_C_r[i] = ((C_r_0 - C_r_1) / C_r_0);
		
		Inv_C_c[j] = ((C_c_0 - C_c_1) / C_c_0);
.
