
affine bsub_aabft [N] -> {  : N > 0 }
	inputs
		U : {[i, j]: i >= 0 and i <= j < N }
		b : {[i]: 0 <= i < N }
	outputs
		x : {[i]: 0 <= i < N }
		Inv_x_c : {}
	locals
		x_c_0 : {}
		x_c_1 : {}
	when {  : N > 0 } let
		x[i] = case  {
			{: i = -1 + N } : (b / U[i,i]);
			{: i <= -2 + N } : ((b - reduce(+, (i,j->i), {: i < j < N } : (U * x[j]))) / U[i,i]);
		};
		
		x_c_0 = reduce(+, (i->), x);
		
		x_c_1 = reduce(+, (i->), case  {
			{: i = -1 + N } : (b / U[i,i]);
			((b - reduce(+, (i,j->i), {: i < j < N } : (U * x[j]))) / U[i,i]);
		});
		
		Inv_x_c = ((x_c_0 - x_c_1) / x_c_0);
.
