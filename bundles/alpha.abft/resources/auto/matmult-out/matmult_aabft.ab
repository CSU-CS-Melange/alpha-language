affine matmult_aabft { N | -1 + N >= 0  }
	input
		float A { i,j |  i >= 0  &&  -1 + N - i >= 0  &&  j >= 0  &&  -1 + N - j >= 0  };
		float B { i,j |  i >= 0  &&  -1 + N - i >= 0  &&  j >= 0  &&  -1 + N - j >= 0  };
	output
		float C { i,j |  i >= 0  &&  -1 + N - i >= 0  &&  j >= 0  &&  -1 + N - j >= 0  };
		float Inv_C_r { i |  i >= 0  &&  -1 + N - i >= 0  &&  -1 + N >= 0  };
		float Inv_C_c { j |  j >= 0  &&  -1 + N - j >= 0  &&  -1 + N >= 0  };
	local
		float C_r_0 { i |  i >= 0  &&  -1 + N - i >= 0  };
		float C_r_1 { i |  i >= 0  &&  -1 + N - i >= 0  };
		float C_c_0 { j |  j >= 0  &&  -1 + N - j >= 0  };
		float C_c_1 { j |  j >= 0  &&  -1 + N - j >= 0  };
	let
		C = reduce(+, (i,j,k->i,j), ((i,j,k->i,k)@(A) * (i,j,k->k,j)@(B)));
		
		C_r_0 = reduce(+, (i,j->i), C);
		
		C_r_1 = reduce(+, (i,j,k->i), ((i,j,k->i,k)@(A) * (i,j,k->k,j)@(B)));
		
		C_c_0 = reduce(+, (i,j->j), C);
		
		C_c_1 = reduce(+, (i,j,k->j), ((i,j,k->i,k)@(A) * (i,j,k->k,j)@(B)));
		
		Inv_C_r = ((C_r_0 - C_r_1) / C_r_0);
		
		Inv_C_c = ((C_c_0 - C_c_1) / C_c_0);
.
