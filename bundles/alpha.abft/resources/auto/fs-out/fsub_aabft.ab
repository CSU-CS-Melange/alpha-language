affine fsub_aabft { N | -1 + N >= 0  }
	input
		float L { i,j |  -1 + N - i >= 0  &&  j >= 0  &&  i - j >= 0  };
		float b { i |  i >= 0  &&  -1 + N - i >= 0  };
	output
		float x { i |  i >= 0  &&  -1 + N - i >= 0  };
		float Inv_x_c { s |  s == 0  &&  -1 + N >= 0  };
	local
		float x_c_0 { s |  s == 0  &&  -1 + N >= 0  };
		float x_c_1 { s |  s == 0  &&  -1 + N >= 0  };
	let
		x = case 
			{ i |  i == 0  &&  -1 + N >= 0  } : (b / (i->i,i)@(L));
			{ i |  -1 + N >= 0  &&  -1 + i >= 0  } : ((b - reduce(+, (i,j->i), { i,j |  -1 + N >= 0  &&  j >= 0  &&  -1 + i - j >= 0  } : (L * (i,j->j)@(x)))) / (i->i,i)@(L));
		esac;
		
		x_c_0 = reduce(+, (i->i), x);
		
		x_c_1 = reduce(+, (s,i->s), case 
			{ s,i |  i == 0  &&  -1 + N >= 0  } : ((s,i->i)@(b) / (s,i->i,i)@(L));
			(((s,i->i)@(b) - reduce(+, (s,i,j->s,i), { s,i,j |  -1 + N >= 0  &&  j >= 0  &&  -1 + i - j >= 0  } : ((s,i,j->i,j)@(L) * (s,i,j->j)@(x)))) / (s,i->i,i)@(L));
		esac);
		
		Inv_x_c = ((x_c_0 - x_c_1) / x_c_0);
.
