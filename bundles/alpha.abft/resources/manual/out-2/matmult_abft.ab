affine matmult_abft { N | -1 + N >= 0  }
	input
		float A { i,j |  i >= 0  &&  -1 + N - i >= 0  &&  j >= 0  &&  -1 + N - j >= 0  };
		float B { i,j |  i >= 0  &&  -1 + N - i >= 0  &&  j >= 0  &&  -1 + N - j >= 0  };
	output
		float C { i,j |  i >= 0  &&  -1 + N - i >= 0  &&  j >= 0  &&  -1 + N - j >= 0  };
		float Inv_C_i { i |  i >= 0  &&  -1 + N - i >= 0  &&  -1 + N >= 0  };
	local
		float C_C_i_0 { i |  i >= 0  &&  -1 + N - i >= 0  };
		float C_C_i_1 { i |  i >= 0  &&  -1 + N - i >= 0  };
	let
		C = reduce(+, (i,j,k->i,j), ((i,j,k->i,k)@(A) * (i,j,k->k,j)@(B)));
		
		C_C_i_0 = reduce(+, (i,j->i), (i,j->i,j)@(C));
		
		C_C_i_1 = reduce(+, (i,j,k->i), ((i,j,k->i,k)@(A) * (i,j,k->k,j)@(B)));
		
		Inv_C_i = ((C_C_i_0 - C_C_i_1) / C_C_i_0);
.
