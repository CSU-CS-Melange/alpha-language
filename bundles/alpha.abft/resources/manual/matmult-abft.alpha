affine matmult_abft_full [N]->{: N>0}
inputs
	A, B : {[i,j] : 0<=i,j<N}
outputs
	C : {[i,j] : 0<=i,j<N}
	Inv_C_r : {[i] : 0<=i<N}
	Inv_C_c : {[j] : 0<=j<N}
	
//locals
	C_r_0, C_r_1: {[i] : 0<=i<N} // C_C_i_0, C_C_i_1
	C_c_0, C_c_1: {[j] : 0<=j<N}
	
let
	C[i,j] = reduce(+, [k], A[i,k]*B[k,j]);
  
	C_r_0[i] = reduce(+, [j], C[i,j]);
	
	C_r_1[i] = reduce(+, [j,k], A[i,k]*B[k,j]);
 
	C_c_0[j] = reduce(+, [i], C[i,j]);
  
	C_c_1[j] = reduce(+, [i,k], A[i,k]*B[k,j]);
  
  	Inv_C_r[i] = (C_r_0 - C_r_1) / C_r_0;
  	
  	Inv_C_c[j] = (C_c_0 - C_c_1) / C_c_0;
.