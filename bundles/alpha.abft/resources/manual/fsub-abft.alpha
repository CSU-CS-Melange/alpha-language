affine fsub_abft [N]->{: N>0}
 inputs
 	L 			 : {[i,j] : 0<=j<=i<N}
 	b 			 : {[i]   : 0<=i<N}
 	
 outputs
 	x 			 : {[i]   : 0<=i<N}
 	Inv_b_c 	 : {[s]   : 0<=s<1}
 	
 locals
	b_c_0, b_c_1 : {[s]	 : 0<=s<1}	
//	L_c			 : {[j]   : 0<=j<N}
		
 let
 	x[i] = case {
 		{: 0 = i} :  b[i] / L[i,i];
 		{: 0 < i} : (b[i] - reduce(+, [j], {: 0<=j<i} : L[i,j] * x[j])) / L[i,i];
 	};
 	
// 	L_c[j] = reduce(+, [i], L[i,j]);
 	
 	Inv_b_c[s] = (b_c_0 - b_c_1)/b_c_0;
 	
 	b_c_0[s] = reduce (+, [i], b[i]);
 	
 	b_c_1[s] = reduce (+, [i], case{
		{: 0 = i} : x[i];
 		{: 0 < i} : reduce(+, [k], L[i,k]*x[k]);
 	});
 	
.