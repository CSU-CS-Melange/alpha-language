affine lud_abft { N | -1 + N >= 0  }
	input
		float A { i,j |  i >= 0  &&  -1 + N - i >= 0  &&  j >= 0  &&  -1 + N - j >= 0  };
	output
		float L { i,j |  -1 + N - i >= 0  &&  j >= 0  &&  i - j >= 0  };
		float U { i,j |  i >= 0  &&  -i + j >= 0  &&  -1 + N - j >= 0  };
		float Inv_L_c { j |  j >= 0  &&  -1 + N - j >= 0  &&  -1 + N >= 0  };
		float Inv_U_r { i |  i >= 0  &&  -1 + N - i >= 0  &&  -1 + N >= 0  };
	local
		float L_c_0 { j |  j >= 0  &&  -1 + N - j >= 0  };
		float L_c_1 { j |  j >= 0  &&  -1 + N - j >= 0  };
		float U_r_0 { i |  i >= 0  &&  -1 + N - i >= 0  };
		float U_r_1 { i |  i >= 0  &&  -1 + N - i >= 0  };
	let
		U = case 
			{ i,j |  i == 0  &&  -1 + N >= 0  } : (i,j->i,j)@(A);
			{ i,j |  -1 + N >= 0  &&  -1 + i >= 0  &&  -i + j >= 0  } : ((i,j->i,j)@(A) - reduce(+, (i,j,k->i,j), { i,j,k |  -1 + N >= 0  &&  k >= 0  &&  -1 + i - k >= 0  } : ((i,j,k->i,k)@(L) * (i,j,k->k,j)@(U))));
		esac;
		
		L = case 
			{ i,j |  j == 0  &&  -1 + N >= 0  } : ((i,j->i,j)@(A) / (i,j->j,j)@(U));
			{ i,j |  -1 + N >= 0  &&  -1 + j >= 0  } : (((i,j->i,j)@(A) - reduce(+, (i,j,k->i,j), { i,j,k |  -1 + N >= 0  &&  k >= 0  &&  -1 + j - k >= 0  } : ((i,j,k->i,k)@(L) * (i,j,k->k,j)@(U)))) / (i,j->j,j)@(U));
		esac;
		
		L_c_0 = reduce(+, (j,i->j), (j,i->i,j)@(L));
		
		L_c_1 = reduce(+, (j,i->j), case 
			{ j,i |  j == 0  &&  -1 + N >= 0  } : ((j,i->i,j)@(A) / (j,i->j,j)@(U));
			{ j,i |  -1 + N >= 0  &&  -1 + j >= 0  } : (((j,i->i,j)@(A) - reduce(+, (j,i,k->j,i), { j,i,k |  -1 + N >= 0  &&  k >= 0  &&  -1 + j - k >= 0  } : ((j,i,k->i,k)@(L) * (j,i,k->k,j)@(U)))) / (j,i->j,j)@(U));
		esac);
		
		U_r_0 = reduce(+, (i,j->i), (i,j->i,j)@(U));
		
		U_r_1 = reduce(+, (i,j->i), case 
			{ i,j |  i == 0  &&  -1 + N >= 0  } : (i,j->i,j)@(A);
			{ i,j |  -1 + N >= 0  &&  -1 + i >= 0  &&  -i + j >= 0  } : ((i,j->i,j)@(A) - reduce(+, (i,j,k->i,j), { i,j,k |  -1 + N >= 0  &&  k >= 0  &&  -1 + i - k >= 0  } : ((i,j,k->i,k)@(L) * (i,j,k->k,j)@(U))));
		esac);
		
		Inv_L_c = ((L_c_0 - L_c_1) / L_c_0);
		
		Inv_U_r = ((U_r_0 - U_r_1) / U_r_0);
.
