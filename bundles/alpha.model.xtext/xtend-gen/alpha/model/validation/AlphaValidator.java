/**
 * generated by Xtext 2.13.0
 */
package alpha.model.validation;

import alpha.model.AlphaSystem;
import alpha.model.JNIDomainCalculator;
import alpha.model.issue.AlphaIssue;
import alpha.model.issue.CalculatorExpressionIssue;
import alpha.model.validation.AbstractAlphaValidator;
import com.google.common.base.Objects;
import java.util.List;
import java.util.function.Consumer;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.ValidationMessageAcceptor;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class AlphaValidator extends AbstractAlphaValidator {
  @Check
  public void checkSystem(final AlphaSystem system) {
    final List<CalculatorExpressionIssue> issues = JNIDomainCalculator.calculate(system);
    final Function1<CalculatorExpressionIssue, Boolean> _function = (CalculatorExpressionIssue i) -> {
      AlphaIssue.TYPE _type = i.getType();
      return Boolean.valueOf(Objects.equal(_type, AlphaIssue.TYPE.ERROR));
    };
    final Consumer<CalculatorExpressionIssue> _function_1 = (CalculatorExpressionIssue i) -> {
      this.error(i.getMessage(), i.getSource(), i.getFeature(), ValidationMessageAcceptor.INSIGNIFICANT_INDEX);
    };
    IterableExtensions.<CalculatorExpressionIssue>filter(issues, _function).forEach(_function_1);
    final Function1<CalculatorExpressionIssue, Boolean> _function_2 = (CalculatorExpressionIssue i) -> {
      AlphaIssue.TYPE _type = i.getType();
      return Boolean.valueOf(Objects.equal(_type, AlphaIssue.TYPE.WARNING));
    };
    final Consumer<CalculatorExpressionIssue> _function_3 = (CalculatorExpressionIssue i) -> {
      this.warning(i.getMessage(), i.getSource(), i.getFeature(), ValidationMessageAcceptor.INSIGNIFICANT_INDEX);
    };
    IterableExtensions.<CalculatorExpressionIssue>filter(issues, _function_2).forEach(_function_3);
  }
}
