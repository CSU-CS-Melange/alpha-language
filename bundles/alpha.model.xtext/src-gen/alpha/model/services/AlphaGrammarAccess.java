/*
 * generated by Xtext 2.15.0
 */
package alpha.model.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AlphaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AlphaRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AlphaRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportsParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cElementsAlternatives_1_0 = (Alternatives)cElementsAssignment_1.eContents().get(0);
		private final RuleCall cElementsAlphaConstantParserRuleCall_1_0_0 = (RuleCall)cElementsAlternatives_1_0.eContents().get(0);
		private final RuleCall cElementsExternalFunctionParserRuleCall_1_0_1 = (RuleCall)cElementsAlternatives_1_0.eContents().get(1);
		private final RuleCall cElementsAlphaPackageParserRuleCall_1_0_2 = (RuleCall)cElementsAlternatives_1_0.eContents().get(2);
		private final RuleCall cElementsAlphaSystemParserRuleCall_1_0_3 = (RuleCall)cElementsAlternatives_1_0.eContents().get(3);
		
		//AlphaRoot:
		//	imports+=Imports*
		//	elements+=(AlphaConstant | ExternalFunction | AlphaPackage | AlphaSystem)*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Imports* elements+=(AlphaConstant | ExternalFunction | AlphaPackage | AlphaSystem)*
		public Group getGroup() { return cGroup; }
		
		//imports+=Imports*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Imports
		public RuleCall getImportsImportsParserRuleCall_0_0() { return cImportsImportsParserRuleCall_0_0; }
		
		//elements+=(AlphaConstant | ExternalFunction | AlphaPackage | AlphaSystem)*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//(AlphaConstant | ExternalFunction | AlphaPackage | AlphaSystem)
		public Alternatives getElementsAlternatives_1_0() { return cElementsAlternatives_1_0; }
		
		//AlphaConstant
		public RuleCall getElementsAlphaConstantParserRuleCall_1_0_0() { return cElementsAlphaConstantParserRuleCall_1_0_0; }
		
		//ExternalFunction
		public RuleCall getElementsExternalFunctionParserRuleCall_1_0_1() { return cElementsExternalFunctionParserRuleCall_1_0_1; }
		
		//AlphaPackage
		public RuleCall getElementsAlphaPackageParserRuleCall_1_0_2() { return cElementsAlphaPackageParserRuleCall_1_0_2; }
		
		//AlphaSystem
		public RuleCall getElementsAlphaSystemParserRuleCall_1_0_3() { return cElementsAlphaSystemParserRuleCall_1_0_3; }
	}
	public class AlphaConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AlphaConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//AlphaConstant:
		//	'constant' name=ID '=' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'constant' name=ID '=' value=INT
		public Group getGroup() { return cGroup; }
		
		//'constant'
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
	}
	public class ExternalFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.ExternalFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCardinalityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCardinalityINTTerminalRuleCall_3_0 = (RuleCall)cCardinalityAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExternalFunction:
		//	'external' name=ID '(' cardinality=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'external' name=ID '(' cardinality=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'external'
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//cardinality=INT
		public Assignment getCardinalityAssignment_3() { return cCardinalityAssignment_3; }
		
		//INT
		public RuleCall getCardinalityINTTerminalRuleCall_3_0() { return cCardinalityINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ImportsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.Imports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Imports:
		//	'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class AlphaPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AlphaPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cElementsAlternatives_3_0 = (Alternatives)cElementsAssignment_3.eContents().get(0);
		private final RuleCall cElementsAlphaConstantParserRuleCall_3_0_0 = (RuleCall)cElementsAlternatives_3_0.eContents().get(0);
		private final RuleCall cElementsExternalFunctionParserRuleCall_3_0_1 = (RuleCall)cElementsAlternatives_3_0.eContents().get(1);
		private final RuleCall cElementsAlphaPackageParserRuleCall_3_0_2 = (RuleCall)cElementsAlternatives_3_0.eContents().get(2);
		private final RuleCall cElementsAlphaSystemParserRuleCall_3_0_3 = (RuleCall)cElementsAlternatives_3_0.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AlphaPackage:
		//	'package' name=QualifiedName '{'
		//	elements+=(AlphaConstant | ExternalFunction | AlphaPackage | AlphaSystem)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName '{' elements+=(AlphaConstant | ExternalFunction | AlphaPackage | AlphaSystem)* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=(AlphaConstant | ExternalFunction | AlphaPackage | AlphaSystem)*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//(AlphaConstant | ExternalFunction | AlphaPackage | AlphaSystem)
		public Alternatives getElementsAlternatives_3_0() { return cElementsAlternatives_3_0; }
		
		//AlphaConstant
		public RuleCall getElementsAlphaConstantParserRuleCall_3_0_0() { return cElementsAlphaConstantParserRuleCall_3_0_0; }
		
		//ExternalFunction
		public RuleCall getElementsExternalFunctionParserRuleCall_3_0_1() { return cElementsExternalFunctionParserRuleCall_3_0_1; }
		
		//AlphaPackage
		public RuleCall getElementsAlphaPackageParserRuleCall_3_0_2() { return cElementsAlphaPackageParserRuleCall_3_0_2; }
		
		//AlphaSystem
		public RuleCall getElementsAlphaSystemParserRuleCall_3_0_3() { return cElementsAlphaSystemParserRuleCall_3_0_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AlphaSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AlphaSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAffineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSystemNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParameterDomainExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterDomainExprJNIParamDomainParserRuleCall_2_0 = (RuleCall)cParameterDomainExprAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDefineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefinedObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefinedObjectsPolyhedralObjectParserRuleCall_3_1_0 = (RuleCall)cDefinedObjectsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInputsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cInputsAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cInputsInputVariableParserRuleCall_4_1_0_0 = (RuleCall)cInputsAssignment_4_1_0.eContents().get(0);
		private final Assignment cInputsAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cInputsFuzzyInputVariableParserRuleCall_4_1_1_0 = (RuleCall)cInputsAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOutputsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cOutputsAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cOutputsOutputVariableParserRuleCall_5_1_0_0 = (RuleCall)cOutputsAssignment_5_1_0.eContents().get(0);
		private final Assignment cOutputsAssignment_5_1_1 = (Assignment)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cOutputsFuzzyOutputVariableParserRuleCall_5_1_1_0 = (RuleCall)cOutputsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLocalsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Assignment cLocalsAssignment_6_1_0 = (Assignment)cAlternatives_6_1.eContents().get(0);
		private final RuleCall cLocalsLocalVariableParserRuleCall_6_1_0_0 = (RuleCall)cLocalsAssignment_6_1_0.eContents().get(0);
		private final Assignment cLocalsAssignment_6_1_1 = (Assignment)cAlternatives_6_1.eContents().get(1);
		private final RuleCall cLocalsFuzzyLocalVariableParserRuleCall_6_1_1_0 = (RuleCall)cLocalsAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cOverKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cWhileDomainExprAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cWhileDomainExprCalculatorExpressionParserRuleCall_7_1_0 = (RuleCall)cWhileDomainExprAssignment_7_1.eContents().get(0);
		private final Keyword cWhileKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cTestExpressionAssignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final RuleCall cTestExpressionAlphaExpressionParserRuleCall_7_4_0 = (RuleCall)cTestExpressionAssignment_7_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLetKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cUseEquationsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cUseEquationsUseEquationParserRuleCall_8_1_0 = (RuleCall)cUseEquationsAssignment_8_1.eContents().get(0);
		private final Assignment cEquationsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cEquationsStandardEquationParserRuleCall_8_2_0 = (RuleCall)cEquationsAssignment_8_2.eContents().get(0);
		private final Keyword cFullStopKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//AlphaSystem:
		//	'affine' name=SystemName parameterDomainExpr=JNIParamDomain ('define' definedObjects+=PolyhedralObject+)? ('inputs'
		//	(inputs+=InputVariable | inputs+=FuzzyInputVariable)+)? ('outputs' (outputs+=OutputVariable |
		//	outputs+=FuzzyOutputVariable)+)? ('locals' (locals+=LocalVariable | locals+=FuzzyLocalVariable)+)? ('over'
		//	whileDomainExpr=CalculatorExpression 'while' '(' testExpression=AlphaExpression ')')? ('let'
		//	useEquations+=UseEquation*
		//	equations+=StandardEquation*)?
		//	'.';
		@Override public ParserRule getRule() { return rule; }
		
		//'affine' name=SystemName parameterDomainExpr=JNIParamDomain ('define' definedObjects+=PolyhedralObject+)? ('inputs'
		//(inputs+=InputVariable | inputs+=FuzzyInputVariable)+)? ('outputs' (outputs+=OutputVariable |
		//outputs+=FuzzyOutputVariable)+)? ('locals' (locals+=LocalVariable | locals+=FuzzyLocalVariable)+)? ('over'
		//whileDomainExpr=CalculatorExpression 'while' '(' testExpression=AlphaExpression ')')? ('let' useEquations+=UseEquation*
		//equations+=StandardEquation*)? '.'
		public Group getGroup() { return cGroup; }
		
		//'affine'
		public Keyword getAffineKeyword_0() { return cAffineKeyword_0; }
		
		//name=SystemName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SystemName
		public RuleCall getNameSystemNameParserRuleCall_1_0() { return cNameSystemNameParserRuleCall_1_0; }
		
		//parameterDomainExpr=JNIParamDomain
		public Assignment getParameterDomainExprAssignment_2() { return cParameterDomainExprAssignment_2; }
		
		//JNIParamDomain
		public RuleCall getParameterDomainExprJNIParamDomainParserRuleCall_2_0() { return cParameterDomainExprJNIParamDomainParserRuleCall_2_0; }
		
		//('define' definedObjects+=PolyhedralObject+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'define'
		public Keyword getDefineKeyword_3_0() { return cDefineKeyword_3_0; }
		
		//definedObjects+=PolyhedralObject+
		public Assignment getDefinedObjectsAssignment_3_1() { return cDefinedObjectsAssignment_3_1; }
		
		//PolyhedralObject
		public RuleCall getDefinedObjectsPolyhedralObjectParserRuleCall_3_1_0() { return cDefinedObjectsPolyhedralObjectParserRuleCall_3_1_0; }
		
		//('inputs' (inputs+=InputVariable | inputs+=FuzzyInputVariable)+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'inputs'
		public Keyword getInputsKeyword_4_0() { return cInputsKeyword_4_0; }
		
		//(inputs+=InputVariable | inputs+=FuzzyInputVariable)+
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//inputs+=InputVariable
		public Assignment getInputsAssignment_4_1_0() { return cInputsAssignment_4_1_0; }
		
		//InputVariable
		public RuleCall getInputsInputVariableParserRuleCall_4_1_0_0() { return cInputsInputVariableParserRuleCall_4_1_0_0; }
		
		//inputs+=FuzzyInputVariable
		public Assignment getInputsAssignment_4_1_1() { return cInputsAssignment_4_1_1; }
		
		//FuzzyInputVariable
		public RuleCall getInputsFuzzyInputVariableParserRuleCall_4_1_1_0() { return cInputsFuzzyInputVariableParserRuleCall_4_1_1_0; }
		
		//('outputs' (outputs+=OutputVariable | outputs+=FuzzyOutputVariable)+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'outputs'
		public Keyword getOutputsKeyword_5_0() { return cOutputsKeyword_5_0; }
		
		//(outputs+=OutputVariable | outputs+=FuzzyOutputVariable)+
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//outputs+=OutputVariable
		public Assignment getOutputsAssignment_5_1_0() { return cOutputsAssignment_5_1_0; }
		
		//OutputVariable
		public RuleCall getOutputsOutputVariableParserRuleCall_5_1_0_0() { return cOutputsOutputVariableParserRuleCall_5_1_0_0; }
		
		//outputs+=FuzzyOutputVariable
		public Assignment getOutputsAssignment_5_1_1() { return cOutputsAssignment_5_1_1; }
		
		//FuzzyOutputVariable
		public RuleCall getOutputsFuzzyOutputVariableParserRuleCall_5_1_1_0() { return cOutputsFuzzyOutputVariableParserRuleCall_5_1_1_0; }
		
		//('locals' (locals+=LocalVariable | locals+=FuzzyLocalVariable)+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'locals'
		public Keyword getLocalsKeyword_6_0() { return cLocalsKeyword_6_0; }
		
		//(locals+=LocalVariable | locals+=FuzzyLocalVariable)+
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }
		
		//locals+=LocalVariable
		public Assignment getLocalsAssignment_6_1_0() { return cLocalsAssignment_6_1_0; }
		
		//LocalVariable
		public RuleCall getLocalsLocalVariableParserRuleCall_6_1_0_0() { return cLocalsLocalVariableParserRuleCall_6_1_0_0; }
		
		//locals+=FuzzyLocalVariable
		public Assignment getLocalsAssignment_6_1_1() { return cLocalsAssignment_6_1_1; }
		
		//FuzzyLocalVariable
		public RuleCall getLocalsFuzzyLocalVariableParserRuleCall_6_1_1_0() { return cLocalsFuzzyLocalVariableParserRuleCall_6_1_1_0; }
		
		//('over' whileDomainExpr=CalculatorExpression 'while' '(' testExpression=AlphaExpression ')')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'over'
		public Keyword getOverKeyword_7_0() { return cOverKeyword_7_0; }
		
		//whileDomainExpr=CalculatorExpression
		public Assignment getWhileDomainExprAssignment_7_1() { return cWhileDomainExprAssignment_7_1; }
		
		//CalculatorExpression
		public RuleCall getWhileDomainExprCalculatorExpressionParserRuleCall_7_1_0() { return cWhileDomainExprCalculatorExpressionParserRuleCall_7_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_7_2() { return cWhileKeyword_7_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_3() { return cLeftParenthesisKeyword_7_3; }
		
		//testExpression=AlphaExpression
		public Assignment getTestExpressionAssignment_7_4() { return cTestExpressionAssignment_7_4; }
		
		//AlphaExpression
		public RuleCall getTestExpressionAlphaExpressionParserRuleCall_7_4_0() { return cTestExpressionAlphaExpressionParserRuleCall_7_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_5() { return cRightParenthesisKeyword_7_5; }
		
		//('let' useEquations+=UseEquation* equations+=StandardEquation*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'let'
		public Keyword getLetKeyword_8_0() { return cLetKeyword_8_0; }
		
		//useEquations+=UseEquation*
		public Assignment getUseEquationsAssignment_8_1() { return cUseEquationsAssignment_8_1; }
		
		//UseEquation
		public RuleCall getUseEquationsUseEquationParserRuleCall_8_1_0() { return cUseEquationsUseEquationParserRuleCall_8_1_0; }
		
		//equations+=StandardEquation*
		public Assignment getEquationsAssignment_8_2() { return cEquationsAssignment_8_2; }
		
		//StandardEquation
		public RuleCall getEquationsStandardEquationParserRuleCall_8_2_0() { return cEquationsStandardEquationParserRuleCall_8_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_9() { return cFullStopKeyword_9; }
	}
	public class InputVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.InputVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDomainExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainExprCalculatorExpressionParserRuleCall_2_0 = (RuleCall)cDomainExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InputVariable Variable:
		//	name=ID ':' domainExpr=CalculatorExpression? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' domainExpr=CalculatorExpression? ';'?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//domainExpr=CalculatorExpression?
		public Assignment getDomainExprAssignment_2() { return cDomainExprAssignment_2; }
		
		//CalculatorExpression
		public RuleCall getDomainExprCalculatorExpressionParserRuleCall_2_0() { return cDomainExprCalculatorExpressionParserRuleCall_2_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class OutputVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.OutputVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDomainExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainExprCalculatorExpressionParserRuleCall_2_0 = (RuleCall)cDomainExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OutputVariable Variable:
		//	name=ID ':' domainExpr=CalculatorExpression? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' domainExpr=CalculatorExpression? ';'?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//domainExpr=CalculatorExpression?
		public Assignment getDomainExprAssignment_2() { return cDomainExprAssignment_2; }
		
		//CalculatorExpression
		public RuleCall getDomainExprCalculatorExpressionParserRuleCall_2_0() { return cDomainExprCalculatorExpressionParserRuleCall_2_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.LocalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDomainExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainExprCalculatorExpressionParserRuleCall_2_0 = (RuleCall)cDomainExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LocalVariable Variable:
		//	name=ID ':' domainExpr=CalculatorExpression? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' domainExpr=CalculatorExpression? ';'?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//domainExpr=CalculatorExpression?
		public Assignment getDomainExprAssignment_2() { return cDomainExprAssignment_2; }
		
		//CalculatorExpression
		public RuleCall getDomainExprCalculatorExpressionParserRuleCall_2_0() { return cDomainExprCalculatorExpressionParserRuleCall_2_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class FuzzyInputVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.FuzzyInputVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuzzyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDomainExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDomainExprCalculatorExpressionParserRuleCall_3_0 = (RuleCall)cDomainExprAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRangeExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRangeExprCalculatorExpressionParserRuleCall_5_0 = (RuleCall)cRangeExprAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FuzzyInputVariable FuzzyVariable:
		//	'fuzzy' name=ID ':' domainExpr=CalculatorExpression '->' rangeExpr=CalculatorExpression ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'fuzzy' name=ID ':' domainExpr=CalculatorExpression '->' rangeExpr=CalculatorExpression ';'?
		public Group getGroup() { return cGroup; }
		
		//'fuzzy'
		public Keyword getFuzzyKeyword_0() { return cFuzzyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//domainExpr=CalculatorExpression
		public Assignment getDomainExprAssignment_3() { return cDomainExprAssignment_3; }
		
		//CalculatorExpression
		public RuleCall getDomainExprCalculatorExpressionParserRuleCall_3_0() { return cDomainExprCalculatorExpressionParserRuleCall_3_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//rangeExpr=CalculatorExpression
		public Assignment getRangeExprAssignment_5() { return cRangeExprAssignment_5; }
		
		//CalculatorExpression
		public RuleCall getRangeExprCalculatorExpressionParserRuleCall_5_0() { return cRangeExprCalculatorExpressionParserRuleCall_5_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class FuzzyOutputVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.FuzzyOutputVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuzzyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDomainExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDomainExprCalculatorExpressionParserRuleCall_3_0 = (RuleCall)cDomainExprAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRangeExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRangeExprCalculatorExpressionParserRuleCall_5_0 = (RuleCall)cRangeExprAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FuzzyOutputVariable FuzzyVariable:
		//	'fuzzy' name=ID ':' domainExpr=CalculatorExpression '->' rangeExpr=CalculatorExpression ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'fuzzy' name=ID ':' domainExpr=CalculatorExpression '->' rangeExpr=CalculatorExpression ';'?
		public Group getGroup() { return cGroup; }
		
		//'fuzzy'
		public Keyword getFuzzyKeyword_0() { return cFuzzyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//domainExpr=CalculatorExpression
		public Assignment getDomainExprAssignment_3() { return cDomainExprAssignment_3; }
		
		//CalculatorExpression
		public RuleCall getDomainExprCalculatorExpressionParserRuleCall_3_0() { return cDomainExprCalculatorExpressionParserRuleCall_3_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//rangeExpr=CalculatorExpression
		public Assignment getRangeExprAssignment_5() { return cRangeExprAssignment_5; }
		
		//CalculatorExpression
		public RuleCall getRangeExprCalculatorExpressionParserRuleCall_5_0() { return cRangeExprCalculatorExpressionParserRuleCall_5_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class FuzzyLocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.FuzzyLocalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuzzyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDomainExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDomainExprCalculatorExpressionParserRuleCall_3_0 = (RuleCall)cDomainExprAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRangeExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRangeExprCalculatorExpressionParserRuleCall_5_0 = (RuleCall)cRangeExprAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FuzzyLocalVariable FuzzyVariable:
		//	'fuzzy' name=ID ':' domainExpr=CalculatorExpression '->' rangeExpr=CalculatorExpression ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'fuzzy' name=ID ':' domainExpr=CalculatorExpression '->' rangeExpr=CalculatorExpression ';'?
		public Group getGroup() { return cGroup; }
		
		//'fuzzy'
		public Keyword getFuzzyKeyword_0() { return cFuzzyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//domainExpr=CalculatorExpression
		public Assignment getDomainExprAssignment_3() { return cDomainExprAssignment_3; }
		
		//CalculatorExpression
		public RuleCall getDomainExprCalculatorExpressionParserRuleCall_3_0() { return cDomainExprCalculatorExpressionParserRuleCall_3_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//rangeExpr=CalculatorExpression
		public Assignment getRangeExprAssignment_5() { return cRangeExprAssignment_5; }
		
		//CalculatorExpression
		public RuleCall getRangeExprCalculatorExpressionParserRuleCall_5_0() { return cRangeExprCalculatorExpressionParserRuleCall_5_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class JNIDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.JNIDomain");
		private final Assignment cIslStringAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIslStringAISLSetParserRuleCall_0 = (RuleCall)cIslStringAssignment.eContents().get(0);
		
		//JNIDomain:
		//	islString=AISLSet;
		@Override public ParserRule getRule() { return rule; }
		
		//islString=AISLSet
		public Assignment getIslStringAssignment() { return cIslStringAssignment; }
		
		//AISLSet
		public RuleCall getIslStringAISLSetParserRuleCall_0() { return cIslStringAISLSetParserRuleCall_0; }
	}
	public class JNIDomainInArrayNotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.JNIDomainInArrayNotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIslStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIslStringAISLStringParserRuleCall_2_0 = (RuleCall)cIslStringAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JNIDomainInArrayNotation:
		//	'{' ':' islString=AISLString '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' ':' islString=AISLString '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//islString=AISLString
		public Assignment getIslStringAssignment_2() { return cIslStringAssignment_2; }
		
		//AISLString
		public RuleCall getIslStringAISLStringParserRuleCall_2_0() { return cIslStringAISLStringParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class JNIParamDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.JNIParamDomain");
		private final Assignment cIslStringAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIslStringAParamDomainParserRuleCall_0 = (RuleCall)cIslStringAssignment.eContents().get(0);
		
		//JNIParamDomain JNIDomain:
		//	islString=AParamDomain;
		@Override public ParserRule getRule() { return rule; }
		
		//islString=AParamDomain
		public Assignment getIslStringAssignment() { return cIslStringAssignment; }
		
		//AParamDomain
		public RuleCall getIslStringAParamDomainParserRuleCall_0() { return cIslStringAParamDomainParserRuleCall_0; }
	}
	public class JNIRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.JNIRelation");
		private final Assignment cIslStringAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIslStringAISLRelationParserRuleCall_0 = (RuleCall)cIslStringAssignment.eContents().get(0);
		
		//JNIRelation:
		//	islString=AISLRelation;
		@Override public ParserRule getRule() { return rule; }
		
		//islString=AISLRelation
		public Assignment getIslStringAssignment() { return cIslStringAssignment; }
		
		//AISLRelation
		public RuleCall getIslStringAISLRelationParserRuleCall_0() { return cIslStringAISLRelationParserRuleCall_0; }
	}
	public class JNIFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.JNIFunction");
		private final Assignment cAlphaStringAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAlphaStringAAlphaFunctionParserRuleCall_0 = (RuleCall)cAlphaStringAssignment.eContents().get(0);
		
		//JNIFunction:
		//	alphaString=AAlphaFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//alphaString=AAlphaFunction
		public Assignment getAlphaStringAssignment() { return cAlphaStringAssignment; }
		
		//AAlphaFunction
		public RuleCall getAlphaStringAAlphaFunctionParserRuleCall_0() { return cAlphaStringAAlphaFunctionParserRuleCall_0; }
	}
	public class JNIFunctionInArrayNotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.JNIFunctionInArrayNotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cJNIFunctionInArrayNotationAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArrayNotationAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArrayNotationAISLExpressionParserRuleCall_2_0_0 = (RuleCall)cArrayNotationAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArrayNotationAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArrayNotationAISLExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArrayNotationAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JNIFunctionInArrayNotation:
		//	'[' {JNIFunctionInArrayNotation} (arrayNotation+=AISLExpression (',' arrayNotation+=AISLExpression)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' {JNIFunctionInArrayNotation} (arrayNotation+=AISLExpression (',' arrayNotation+=AISLExpression)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//{JNIFunctionInArrayNotation}
		public Action getJNIFunctionInArrayNotationAction_1() { return cJNIFunctionInArrayNotationAction_1; }
		
		//(arrayNotation+=AISLExpression (',' arrayNotation+=AISLExpression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//arrayNotation+=AISLExpression
		public Assignment getArrayNotationAssignment_2_0() { return cArrayNotationAssignment_2_0; }
		
		//AISLExpression
		public RuleCall getArrayNotationAISLExpressionParserRuleCall_2_0_0() { return cArrayNotationAISLExpressionParserRuleCall_2_0_0; }
		
		//(',' arrayNotation+=AISLExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//arrayNotation+=AISLExpression
		public Assignment getArrayNotationAssignment_2_1_1() { return cArrayNotationAssignment_2_1_1; }
		
		//AISLExpression
		public RuleCall getArrayNotationAISLExpressionParserRuleCall_2_1_1_0() { return cArrayNotationAISLExpressionParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class FuzzyFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.FuzzyFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAlphaStringAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAlphaStringAISLWrappedBasicRelationParserRuleCall_1_0 = (RuleCall)cAlphaStringAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndirectionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndirectionsFuzzyVariableUseParserRuleCall_2_1_0 = (RuleCall)cIndirectionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FuzzyFunction:
		//	'(' alphaString=AISLWrappedBasicRelation (';' indirections+=FuzzyVariableUse)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' alphaString=AISLWrappedBasicRelation (';' indirections+=FuzzyVariableUse)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//alphaString=AISLWrappedBasicRelation
		public Assignment getAlphaStringAssignment_1() { return cAlphaStringAssignment_1; }
		
		//AISLWrappedBasicRelation
		public RuleCall getAlphaStringAISLWrappedBasicRelationParserRuleCall_1_0() { return cAlphaStringAISLWrappedBasicRelationParserRuleCall_1_0; }
		
		//(';' indirections+=FuzzyVariableUse)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//indirections+=FuzzyVariableUse
		public Assignment getIndirectionsAssignment_2_1() { return cIndirectionsAssignment_2_1; }
		
		//FuzzyVariableUse
		public RuleCall getIndirectionsFuzzyVariableUseParserRuleCall_2_1_0() { return cIndirectionsFuzzyVariableUseParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FuzzyVariableUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.FuzzyVariableUse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNestedFuzzyFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAffineFuzzyVariableUseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FuzzyVariableUse:
		//	NestedFuzzyFunction | AffineFuzzyVariableUse;
		@Override public ParserRule getRule() { return rule; }
		
		//NestedFuzzyFunction | AffineFuzzyVariableUse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NestedFuzzyFunction
		public RuleCall getNestedFuzzyFunctionParserRuleCall_0() { return cNestedFuzzyFunctionParserRuleCall_0; }
		
		//AffineFuzzyVariableUse
		public RuleCall getAffineFuzzyVariableUseParserRuleCall_1() { return cAffineFuzzyVariableUseParserRuleCall_1; }
	}
	public class NestedFuzzyFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.NestedFuzzyFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuzzyIndexAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFuzzyIndexIndexNameParserRuleCall_0_0 = (RuleCall)cFuzzyIndexAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFuzzyVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFuzzyVariableFuzzyVariableCrossReference_2_0 = (CrossReference)cFuzzyVariableAssignment_2.eContents().get(0);
		private final RuleCall cFuzzyVariableFuzzyVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cFuzzyVariableFuzzyVariableCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAlphaStringAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAlphaStringAISLWrappedBasicRelationParserRuleCall_4_0 = (RuleCall)cAlphaStringAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cIndirectionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cIndirectionsFuzzyVariableUseParserRuleCall_5_1_0 = (RuleCall)cIndirectionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NestedFuzzyFunction:
		//	fuzzyIndex=IndexName '=' fuzzyVariable=[FuzzyVariable] '{' alphaString=AISLWrappedBasicRelation (';'
		//	indirections+=FuzzyVariableUse)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//fuzzyIndex=IndexName '=' fuzzyVariable=[FuzzyVariable] '{' alphaString=AISLWrappedBasicRelation (';'
		//indirections+=FuzzyVariableUse)* '}'
		public Group getGroup() { return cGroup; }
		
		//fuzzyIndex=IndexName
		public Assignment getFuzzyIndexAssignment_0() { return cFuzzyIndexAssignment_0; }
		
		//IndexName
		public RuleCall getFuzzyIndexIndexNameParserRuleCall_0_0() { return cFuzzyIndexIndexNameParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//fuzzyVariable=[FuzzyVariable]
		public Assignment getFuzzyVariableAssignment_2() { return cFuzzyVariableAssignment_2; }
		
		//[FuzzyVariable]
		public CrossReference getFuzzyVariableFuzzyVariableCrossReference_2_0() { return cFuzzyVariableFuzzyVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getFuzzyVariableFuzzyVariableIDTerminalRuleCall_2_0_1() { return cFuzzyVariableFuzzyVariableIDTerminalRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//alphaString=AISLWrappedBasicRelation
		public Assignment getAlphaStringAssignment_4() { return cAlphaStringAssignment_4; }
		
		//AISLWrappedBasicRelation
		public RuleCall getAlphaStringAISLWrappedBasicRelationParserRuleCall_4_0() { return cAlphaStringAISLWrappedBasicRelationParserRuleCall_4_0; }
		
		//(';' indirections+=FuzzyVariableUse)*
		public Group getGroup_5() { return cGroup_5; }
		
		//';'
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }
		
		//indirections+=FuzzyVariableUse
		public Assignment getIndirectionsAssignment_5_1() { return cIndirectionsAssignment_5_1; }
		
		//FuzzyVariableUse
		public RuleCall getIndirectionsFuzzyVariableUseParserRuleCall_5_1_0() { return cIndirectionsFuzzyVariableUseParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AffineFuzzyVariableUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AffineFuzzyVariableUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuzzyIndexAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFuzzyIndexIndexNameParserRuleCall_0_0 = (RuleCall)cFuzzyIndexAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFuzzyVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFuzzyVariableFuzzyVariableCrossReference_2_0 = (CrossReference)cFuzzyVariableAssignment_2.eContents().get(0);
		private final RuleCall cFuzzyVariableFuzzyVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cFuzzyVariableFuzzyVariableCrossReference_2_0.eContents().get(1);
		private final Assignment cUseFunctionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUseFunctionJNIFunctionInArrayNotationParserRuleCall_3_0 = (RuleCall)cUseFunctionAssignment_3.eContents().get(0);
		
		//AffineFuzzyVariableUse:
		//	fuzzyIndex=IndexName '=' fuzzyVariable=[FuzzyVariable] useFunction=JNIFunctionInArrayNotation;
		@Override public ParserRule getRule() { return rule; }
		
		//fuzzyIndex=IndexName '=' fuzzyVariable=[FuzzyVariable] useFunction=JNIFunctionInArrayNotation
		public Group getGroup() { return cGroup; }
		
		//fuzzyIndex=IndexName
		public Assignment getFuzzyIndexAssignment_0() { return cFuzzyIndexAssignment_0; }
		
		//IndexName
		public RuleCall getFuzzyIndexIndexNameParserRuleCall_0_0() { return cFuzzyIndexIndexNameParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//fuzzyVariable=[FuzzyVariable]
		public Assignment getFuzzyVariableAssignment_2() { return cFuzzyVariableAssignment_2; }
		
		//[FuzzyVariable]
		public CrossReference getFuzzyVariableFuzzyVariableCrossReference_2_0() { return cFuzzyVariableFuzzyVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getFuzzyVariableFuzzyVariableIDTerminalRuleCall_2_0_1() { return cFuzzyVariableFuzzyVariableIDTerminalRuleCall_2_0_1; }
		
		//useFunction=JNIFunctionInArrayNotation
		public Assignment getUseFunctionAssignment_3() { return cUseFunctionAssignment_3; }
		
		//JNIFunctionInArrayNotation
		public RuleCall getUseFunctionJNIFunctionInArrayNotationParserRuleCall_3_0() { return cUseFunctionJNIFunctionInArrayNotationParserRuleCall_3_0; }
	}
	public class FuzzyFunctionInArrayNotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.FuzzyFunctionInArrayNotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFuzzyFunctionInArrayNotationAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArrayNotationAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArrayNotationAISLFuzzyExpressionParserRuleCall_2_0_0 = (RuleCall)cArrayNotationAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArrayNotationAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArrayNotationAISLFuzzyExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArrayNotationAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FuzzyFunctionInArrayNotation:
		//	'[[' {FuzzyFunctionInArrayNotation} (arrayNotation+=AISLFuzzyExpression (',' arrayNotation+=AISLFuzzyExpression)*)?
		//	']]';
		@Override public ParserRule getRule() { return rule; }
		
		//'[[' {FuzzyFunctionInArrayNotation} (arrayNotation+=AISLFuzzyExpression (',' arrayNotation+=AISLFuzzyExpression)*)? ']]'
		public Group getGroup() { return cGroup; }
		
		//'[['
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_0() { return cLeftSquareBracketLeftSquareBracketKeyword_0; }
		
		//{FuzzyFunctionInArrayNotation}
		public Action getFuzzyFunctionInArrayNotationAction_1() { return cFuzzyFunctionInArrayNotationAction_1; }
		
		//(arrayNotation+=AISLFuzzyExpression (',' arrayNotation+=AISLFuzzyExpression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//arrayNotation+=AISLFuzzyExpression
		public Assignment getArrayNotationAssignment_2_0() { return cArrayNotationAssignment_2_0; }
		
		//AISLFuzzyExpression
		public RuleCall getArrayNotationAISLFuzzyExpressionParserRuleCall_2_0_0() { return cArrayNotationAISLFuzzyExpressionParserRuleCall_2_0_0; }
		
		//(',' arrayNotation+=AISLFuzzyExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//arrayNotation+=AISLFuzzyExpression
		public Assignment getArrayNotationAssignment_2_1_1() { return cArrayNotationAssignment_2_1_1; }
		
		//AISLFuzzyExpression
		public RuleCall getArrayNotationAISLFuzzyExpressionParserRuleCall_2_1_1_0() { return cArrayNotationAISLFuzzyExpressionParserRuleCall_2_1_1_0; }
		
		//']]'
		public Keyword getRightSquareBracketRightSquareBracketKeyword_3() { return cRightSquareBracketRightSquareBracketKeyword_3; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class SystemNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.SystemName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SystemName:
		//	ID // ('-' ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class IndexNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.IndexName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IndexName:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class AIndexListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AIndexList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIndexNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIndexNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////IndexDimension:
		////	name=IndexName
		////;
		//AIndexList:
		//	(IndexName (',' IndexName)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(IndexName (',' IndexName)*)?
		public Group getGroup() { return cGroup; }
		
		//IndexName
		public RuleCall getIndexNameParserRuleCall_0() { return cIndexNameParserRuleCall_0; }
		
		//(',' IndexName)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//IndexName
		public RuleCall getIndexNameParserRuleCall_1_1() { return cIndexNameParserRuleCall_1_1; }
	}
	public class AParamDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AParamDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAIndexListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cAISLStringParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////ISL syntax defs
		//AParamDomain:
		//	'[' AIndexList ']' '->' '{' ':' AISLString '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' AIndexList ']' '->' '{' ':' AISLString '}'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//AIndexList
		public RuleCall getAIndexListParserRuleCall_1() { return cAIndexListParserRuleCall_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//AISLString
		public RuleCall getAISLStringParserRuleCall_6() { return cAISLStringParserRuleCall_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AISLSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AISLSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAISLBasicSetParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cAISLBasicSetParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AISLSet:
		//	'{' AISLBasicSet (';' AISLBasicSet)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' AISLBasicSet (';' AISLBasicSet)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//AISLBasicSet
		public RuleCall getAISLBasicSetParserRuleCall_1() { return cAISLBasicSetParserRuleCall_1; }
		
		//(';' AISLBasicSet)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//AISLBasicSet
		public RuleCall getAISLBasicSetParserRuleCall_2_1() { return cAISLBasicSetParserRuleCall_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AISLBasicSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AISLBasicSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAISLExpressionListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cAISLStringParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//AISLBasicSet:
		//	'[' AISLExpressionList ']' ':' AISLString;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' AISLExpressionList ']' ':' AISLString
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//AISLExpressionList
		public RuleCall getAISLExpressionListParserRuleCall_1() { return cAISLExpressionListParserRuleCall_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//AISLString
		public RuleCall getAISLStringParserRuleCall_4() { return cAISLStringParserRuleCall_4; }
	}
	public class AISLRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AISLRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAISLBasicRelationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cAISLBasicRelationParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AISLRelation:
		//	'{' AISLBasicRelation (';' AISLBasicRelation)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' AISLBasicRelation (';' AISLBasicRelation)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//AISLBasicRelation
		public RuleCall getAISLBasicRelationParserRuleCall_1() { return cAISLBasicRelationParserRuleCall_1; }
		
		//(';' AISLBasicRelation)*
		public Group getGroup_2() { return cGroup_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//AISLBasicRelation
		public RuleCall getAISLBasicRelationParserRuleCall_2_1() { return cAISLBasicRelationParserRuleCall_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AISLStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AISLString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIndexNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAsteriskKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSolidusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPercentSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAndKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOrKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cCommaKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cColonKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cAmpersandKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cVerticalLineKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final RuleCall cWSTerminalRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final Keyword cGreaterThanSignEqualsSignKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cGreaterThanSignKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cEqualsSignKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cLessThanSignKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cLessThanSignEqualsSignKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		
		//AISLString:
		//	(IndexName | INT | '+' | '-' | '*' | '/' | '%' | 'and' | 'or' | '[' | ']' | '(' | ')' | ',' | ':' | '&' | '|' | WS |
		//	'>=' | '>' | '=' | '<' | '<=')*;
		@Override public ParserRule getRule() { return rule; }
		
		//(IndexName | INT | '+' | '-' | '*' | '/' | '%' | 'and' | 'or' | '[' | ']' | '(' | ')' | ',' | ':' | '&' | '|' | WS |
		//'>=' | '>' | '=' | '<' | '<=')*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IndexName
		public RuleCall getIndexNameParserRuleCall_0() { return cIndexNameParserRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//'*'
		public Keyword getAsteriskKeyword_4() { return cAsteriskKeyword_4; }
		
		//'/'
		public Keyword getSolidusKeyword_5() { return cSolidusKeyword_5; }
		
		//'%'
		public Keyword getPercentSignKeyword_6() { return cPercentSignKeyword_6; }
		
		//'and'
		public Keyword getAndKeyword_7() { return cAndKeyword_7; }
		
		//'or'
		public Keyword getOrKeyword_8() { return cOrKeyword_8; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_9() { return cLeftSquareBracketKeyword_9; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_11() { return cLeftParenthesisKeyword_11; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
		
		//','
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//':'
		public Keyword getColonKeyword_14() { return cColonKeyword_14; }
		
		//'&'
		public Keyword getAmpersandKeyword_15() { return cAmpersandKeyword_15; }
		
		//'|'
		public Keyword getVerticalLineKeyword_16() { return cVerticalLineKeyword_16; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_17() { return cWSTerminalRuleCall_17; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_18() { return cGreaterThanSignEqualsSignKeyword_18; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_19() { return cGreaterThanSignKeyword_19; }
		
		//'='
		public Keyword getEqualsSignKeyword_20() { return cEqualsSignKeyword_20; }
		
		//'<'
		public Keyword getLessThanSignKeyword_21() { return cLessThanSignKeyword_21; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_22() { return cLessThanSignEqualsSignKeyword_22; }
	}
	public class AISLExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AISLExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIndexNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPlusSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAsteriskKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSolidusKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cPercentSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final RuleCall cWSTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//AISLExpression:
		//	(IndexName | INT | '=' | '+' | '-' | '*' | '/' | '%' | WS)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(IndexName | INT | '=' | '+' | '-' | '*' | '/' | '%' | WS)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IndexName
		public RuleCall getIndexNameParserRuleCall_0() { return cIndexNameParserRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_3() { return cPlusSignKeyword_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_4() { return cHyphenMinusKeyword_4; }
		
		//'*'
		public Keyword getAsteriskKeyword_5() { return cAsteriskKeyword_5; }
		
		//'/'
		public Keyword getSolidusKeyword_6() { return cSolidusKeyword_6; }
		
		//'%'
		public Keyword getPercentSignKeyword_7() { return cPercentSignKeyword_7; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_8() { return cWSTerminalRuleCall_8; }
	}
	public class AISLExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AISLExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAISLExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAISLExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//AISLExpressionList:
		//	(AISLExpression (',' AISLExpression)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(AISLExpression (',' AISLExpression)*)?
		public Group getGroup() { return cGroup; }
		
		//AISLExpression
		public RuleCall getAISLExpressionParserRuleCall_0() { return cAISLExpressionParserRuleCall_0; }
		
		//(',' AISLExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//AISLExpression
		public RuleCall getAISLExpressionParserRuleCall_1_1() { return cAISLExpressionParserRuleCall_1_1; }
	}
	public class AAlphaFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AAlphaFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAIndexListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAISLExpressionListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AAlphaFunction:
		//	'(' AIndexList '->' AISLExpressionList ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' AIndexList '->' AISLExpressionList ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//AIndexList
		public RuleCall getAIndexListParserRuleCall_1() { return cAIndexListParserRuleCall_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//AISLExpressionList
		public RuleCall getAISLExpressionListParserRuleCall_3() { return cAISLExpressionListParserRuleCall_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AISLBasicRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AISLBasicRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAISLExpressionListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cAISLExpressionListParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cAISLStringParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//AISLBasicRelation:
		//	'[' AISLExpressionList ']' '->' '[' AISLExpressionList ']' ':' AISLString;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' AISLExpressionList ']' '->' '[' AISLExpressionList ']' ':' AISLString
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//AISLExpressionList
		public RuleCall getAISLExpressionListParserRuleCall_1() { return cAISLExpressionListParserRuleCall_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//AISLExpressionList
		public RuleCall getAISLExpressionListParserRuleCall_5() { return cAISLExpressionListParserRuleCall_5; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//AISLString
		public RuleCall getAISLStringParserRuleCall_8() { return cAISLStringParserRuleCall_8; }
	}
	public class AISLWrappedBasicRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AISLWrappedBasicRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cAIndexListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cAISLExpressionListParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cAISLExpressionListParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Keyword cRightSquareBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//AISLWrappedBasicRelation:
		//	'[' '[' AIndexList ']' '->' '[' AISLExpressionList ']' ']' '->' '[' AISLExpressionList ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' '[' AIndexList ']' '->' '[' AISLExpressionList ']' ']' '->' '[' AISLExpressionList ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//AIndexList
		public RuleCall getAIndexListParserRuleCall_2() { return cAIndexListParserRuleCall_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//AISLExpressionList
		public RuleCall getAISLExpressionListParserRuleCall_6() { return cAISLExpressionListParserRuleCall_6; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_9() { return cHyphenMinusGreaterThanSignKeyword_9; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_10() { return cLeftSquareBracketKeyword_10; }
		
		//AISLExpressionList
		public RuleCall getAISLExpressionListParserRuleCall_11() { return cAISLExpressionListParserRuleCall_11; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_12() { return cRightSquareBracketKeyword_12; }
	}
	public class AISLFuzzyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AISLFuzzyExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIndexNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPlusSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cHyphenMinusKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAsteriskKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cSolidusKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cPercentSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final RuleCall cWSTerminalRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//AISLFuzzyExpression:
		//	(IndexName | INT | '[' | ']' | '=' | '+' | '-' | '*' | '/' | '%' | WS)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(IndexName | INT | '[' | ']' | '=' | '+' | '-' | '*' | '/' | '%' | WS)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IndexName
		public RuleCall getIndexNameParserRuleCall_0() { return cIndexNameParserRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//'+'
		public Keyword getPlusSignKeyword_5() { return cPlusSignKeyword_5; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_6() { return cHyphenMinusKeyword_6; }
		
		//'*'
		public Keyword getAsteriskKeyword_7() { return cAsteriskKeyword_7; }
		
		//'/'
		public Keyword getSolidusKeyword_8() { return cSolidusKeyword_8; }
		
		//'%'
		public Keyword getPercentSignKeyword_9() { return cPercentSignKeyword_9; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_10() { return cWSTerminalRuleCall_10; }
	}
	public class StandardEquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.StandardEquation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexNamesIndexNameParserRuleCall_1_1_0 = (RuleCall)cIndexNamesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cIndexNamesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cIndexNamesIndexNameParserRuleCall_1_2_1_0 = (RuleCall)cIndexNamesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprAlphaExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////AIndexAffineExpression:	
		////	 '-'? AIndexAffineExpressionTerminal (('+'|'-') AIndexAffineExpression)*;
		////	
		////AIndexAffineExpressionTerminal:
		////	(INT | INT? IndexName);
		//StandardEquation:
		//	variable=[Variable] ('[' indexNames+=IndexName (',' indexNames+=IndexName)* ']')? '=' expr=AlphaExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variable] ('[' indexNames+=IndexName (',' indexNames+=IndexName)* ']')? '=' expr=AlphaExpression ';'
		public Group getGroup() { return cGroup; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_0_0() { return cVariableVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_0_1() { return cVariableVariableIDTerminalRuleCall_0_0_1; }
		
		//('[' indexNames+=IndexName (',' indexNames+=IndexName)* ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//indexNames+=IndexName
		public Assignment getIndexNamesAssignment_1_1() { return cIndexNamesAssignment_1_1; }
		
		//IndexName
		public RuleCall getIndexNamesIndexNameParserRuleCall_1_1_0() { return cIndexNamesIndexNameParserRuleCall_1_1_0; }
		
		//(',' indexNames+=IndexName)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//indexNames+=IndexName
		public Assignment getIndexNamesAssignment_1_2_1() { return cIndexNamesAssignment_1_2_1; }
		
		//IndexName
		public RuleCall getIndexNamesIndexNameParserRuleCall_1_2_1_0() { return cIndexNamesIndexNameParserRuleCall_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//expr=AlphaExpression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//AlphaExpression
		public RuleCall getExprAlphaExpressionParserRuleCall_3_0() { return cExprAlphaExpressionParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class UseEquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.UseEquation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cOverKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cInstantiationDomainExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInstantiationDomainExprCalculatorExpressionParserRuleCall_0_1_0 = (RuleCall)cInstantiationDomainExprAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cWithKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cGroup_0_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_2_1_0 = (Keyword)cGroup_0_2_1.eContents().get(0);
		private final Assignment cSubsystemDimsAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final RuleCall cSubsystemDimsIndexNameParserRuleCall_0_2_1_1_0 = (RuleCall)cSubsystemDimsAssignment_0_2_1_1.eContents().get(0);
		private final Group cGroup_0_2_1_2 = (Group)cGroup_0_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_1_2_0 = (Keyword)cGroup_0_2_1_2.eContents().get(0);
		private final Assignment cSubsystemDimsAssignment_0_2_1_2_1 = (Assignment)cGroup_0_2_1_2.eContents().get(1);
		private final RuleCall cSubsystemDimsIndexNameParserRuleCall_0_2_1_2_1_0 = (RuleCall)cSubsystemDimsAssignment_0_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2_1_3 = (Keyword)cGroup_0_2_1.eContents().get(3);
		private final Keyword cColonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprUseExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UseEquation:
		//	('over' instantiationDomainExpr=CalculatorExpression ('with' ('[' subsystemDims+=IndexName (','
		//	subsystemDims+=IndexName)* ']')?)? ':')?
		//	expr=UseExpression
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//('over' instantiationDomainExpr=CalculatorExpression ('with' ('[' subsystemDims+=IndexName (','
		//subsystemDims+=IndexName)* ']')?)? ':')? expr=UseExpression ';'
		public Group getGroup() { return cGroup; }
		
		//('over' instantiationDomainExpr=CalculatorExpression ('with' ('[' subsystemDims+=IndexName (','
		//subsystemDims+=IndexName)* ']')?)? ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'over'
		public Keyword getOverKeyword_0_0() { return cOverKeyword_0_0; }
		
		//instantiationDomainExpr=CalculatorExpression
		public Assignment getInstantiationDomainExprAssignment_0_1() { return cInstantiationDomainExprAssignment_0_1; }
		
		//CalculatorExpression
		public RuleCall getInstantiationDomainExprCalculatorExpressionParserRuleCall_0_1_0() { return cInstantiationDomainExprCalculatorExpressionParserRuleCall_0_1_0; }
		
		//('with' ('[' subsystemDims+=IndexName (',' subsystemDims+=IndexName)* ']')?)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'with'
		public Keyword getWithKeyword_0_2_0() { return cWithKeyword_0_2_0; }
		
		//('[' subsystemDims+=IndexName (',' subsystemDims+=IndexName)* ']')?
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_2_1_0() { return cLeftSquareBracketKeyword_0_2_1_0; }
		
		//subsystemDims+=IndexName
		public Assignment getSubsystemDimsAssignment_0_2_1_1() { return cSubsystemDimsAssignment_0_2_1_1; }
		
		//IndexName
		public RuleCall getSubsystemDimsIndexNameParserRuleCall_0_2_1_1_0() { return cSubsystemDimsIndexNameParserRuleCall_0_2_1_1_0; }
		
		//(',' subsystemDims+=IndexName)*
		public Group getGroup_0_2_1_2() { return cGroup_0_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_1_2_0() { return cCommaKeyword_0_2_1_2_0; }
		
		//subsystemDims+=IndexName
		public Assignment getSubsystemDimsAssignment_0_2_1_2_1() { return cSubsystemDimsAssignment_0_2_1_2_1; }
		
		//IndexName
		public RuleCall getSubsystemDimsIndexNameParserRuleCall_0_2_1_2_1_0() { return cSubsystemDimsIndexNameParserRuleCall_0_2_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2_1_3() { return cRightSquareBracketKeyword_0_2_1_3; }
		
		//':'
		public Keyword getColonKeyword_0_3() { return cColonKeyword_0_3; }
		
		//expr=UseExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//UseExpression
		public RuleCall getExprUseExpressionParserRuleCall_1_0() { return cExprUseExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class UseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.UseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubSystemCaseExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubSystemRestrictExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubSystemCallExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//UseExpression:
		//	SubSystemCaseExpression | SubSystemRestrictExpression | SubSystemCallExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//SubSystemCaseExpression | SubSystemRestrictExpression | SubSystemCallExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SubSystemCaseExpression
		public RuleCall getSubSystemCaseExpressionParserRuleCall_0() { return cSubSystemCaseExpressionParserRuleCall_0; }
		
		//SubSystemRestrictExpression
		public RuleCall getSubSystemRestrictExpressionParserRuleCall_1() { return cSubSystemRestrictExpressionParserRuleCall_1; }
		
		//SubSystemCallExpression
		public RuleCall getSubSystemCallExpressionParserRuleCall_2() { return cSubSystemCallExpressionParserRuleCall_2; }
	}
	public class SubSystemCaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.SubSystemCaseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExprsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprsUseExpressionParserRuleCall_2_0_0 = (RuleCall)cExprsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SubSystemCaseExpression:
		//	'case' '{' (exprs+=UseExpression ';')+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'case' '{' (exprs+=UseExpression ';')+ '}'
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(exprs+=UseExpression ';')+
		public Group getGroup_2() { return cGroup_2; }
		
		//exprs+=UseExpression
		public Assignment getExprsAssignment_2_0() { return cExprsAssignment_2_0; }
		
		//UseExpression
		public RuleCall getExprsUseExpressionParserRuleCall_2_0_0() { return cExprsUseExpressionParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SubSystemRestrictExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.SubSystemRestrictExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDomainExprAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cDomainExprAlternatives_0_0_0 = (Alternatives)cDomainExprAssignment_0_0.eContents().get(0);
		private final RuleCall cDomainExprJNIDomainParserRuleCall_0_0_0_0 = (RuleCall)cDomainExprAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cDomainExprJNIDomainInArrayNotationParserRuleCall_0_0_0_1 = (RuleCall)cDomainExprAlternatives_0_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprUseExpressionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDomainExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDomainExprCalculatorExpressionParserRuleCall_1_1_0 = (RuleCall)cDomainExprAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cExprAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExprUseExpressionParserRuleCall_1_4_0 = (RuleCall)cExprAssignment_1_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//SubSystemRestrictExpression:
		//	domainExpr=(JNIDomain | JNIDomainInArrayNotation) ':' expr=UseExpression |
		//	'{' domainExpr=CalculatorExpression '}' ':' expr=UseExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//domainExpr=(JNIDomain | JNIDomainInArrayNotation) ':' expr=UseExpression | '{' domainExpr=CalculatorExpression '}' ':'
		//expr=UseExpression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//domainExpr=(JNIDomain | JNIDomainInArrayNotation) ':' expr=UseExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//domainExpr=(JNIDomain | JNIDomainInArrayNotation)
		public Assignment getDomainExprAssignment_0_0() { return cDomainExprAssignment_0_0; }
		
		//(JNIDomain | JNIDomainInArrayNotation)
		public Alternatives getDomainExprAlternatives_0_0_0() { return cDomainExprAlternatives_0_0_0; }
		
		//JNIDomain
		public RuleCall getDomainExprJNIDomainParserRuleCall_0_0_0_0() { return cDomainExprJNIDomainParserRuleCall_0_0_0_0; }
		
		//JNIDomainInArrayNotation
		public RuleCall getDomainExprJNIDomainInArrayNotationParserRuleCall_0_0_0_1() { return cDomainExprJNIDomainInArrayNotationParserRuleCall_0_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//expr=UseExpression
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }
		
		//UseExpression
		public RuleCall getExprUseExpressionParserRuleCall_0_2_0() { return cExprUseExpressionParserRuleCall_0_2_0; }
		
		//'{' domainExpr=CalculatorExpression '}' ':' expr=UseExpression ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//domainExpr=CalculatorExpression
		public Assignment getDomainExprAssignment_1_1() { return cDomainExprAssignment_1_1; }
		
		//CalculatorExpression
		public RuleCall getDomainExprCalculatorExpressionParserRuleCall_1_1_0() { return cDomainExprCalculatorExpressionParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//expr=UseExpression
		public Assignment getExprAssignment_1_4() { return cExprAssignment_1_4; }
		
		//UseExpression
		public RuleCall getExprUseExpressionParserRuleCall_1_4_0() { return cExprUseExpressionParserRuleCall_1_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }
	}
	public class SubSystemCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.SubSystemCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOutputExprsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOutputExprsAlphaExpressionParserRuleCall_1_0_0 = (RuleCall)cOutputExprsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cOutputExprsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOutputExprsAlphaExpressionParserRuleCall_1_1_1_0 = (RuleCall)cOutputExprsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSystemAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSystemAlphaSystemCrossReference_4_0 = (CrossReference)cSystemAssignment_4.eContents().get(0);
		private final RuleCall cSystemAlphaSystemQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cSystemAlphaSystemCrossReference_4_0.eContents().get(1);
		private final Assignment cCallParamsExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCallParamsExprJNIFunctionInArrayNotationParserRuleCall_5_0 = (RuleCall)cCallParamsExprAssignment_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cInputExprsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cInputExprsAlphaExpressionParserRuleCall_7_0_0 = (RuleCall)cInputExprsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cInputExprsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cInputExprsAlphaExpressionParserRuleCall_7_1_1_0 = (RuleCall)cInputExprsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SubSystemCallExpression:
		//	'(' (outputExprs+=AlphaExpression (',' outputExprs+=AlphaExpression)*)? ')'
		//	'='
		//	system=[AlphaSystem|QualifiedName] callParamsExpr=JNIFunctionInArrayNotation
		//	'(' (inputExprs+=AlphaExpression (',' inputExprs+=AlphaExpression)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (outputExprs+=AlphaExpression (',' outputExprs+=AlphaExpression)*)? ')' '=' system=[AlphaSystem|QualifiedName]
		//callParamsExpr=JNIFunctionInArrayNotation '(' (inputExprs+=AlphaExpression (',' inputExprs+=AlphaExpression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(outputExprs+=AlphaExpression (',' outputExprs+=AlphaExpression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//outputExprs+=AlphaExpression
		public Assignment getOutputExprsAssignment_1_0() { return cOutputExprsAssignment_1_0; }
		
		//AlphaExpression
		public RuleCall getOutputExprsAlphaExpressionParserRuleCall_1_0_0() { return cOutputExprsAlphaExpressionParserRuleCall_1_0_0; }
		
		//(',' outputExprs+=AlphaExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//outputExprs+=AlphaExpression
		public Assignment getOutputExprsAssignment_1_1_1() { return cOutputExprsAssignment_1_1_1; }
		
		//AlphaExpression
		public RuleCall getOutputExprsAlphaExpressionParserRuleCall_1_1_1_0() { return cOutputExprsAlphaExpressionParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//system=[AlphaSystem|QualifiedName]
		public Assignment getSystemAssignment_4() { return cSystemAssignment_4; }
		
		//[AlphaSystem|QualifiedName]
		public CrossReference getSystemAlphaSystemCrossReference_4_0() { return cSystemAlphaSystemCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getSystemAlphaSystemQualifiedNameParserRuleCall_4_0_1() { return cSystemAlphaSystemQualifiedNameParserRuleCall_4_0_1; }
		
		//callParamsExpr=JNIFunctionInArrayNotation
		public Assignment getCallParamsExprAssignment_5() { return cCallParamsExprAssignment_5; }
		
		//JNIFunctionInArrayNotation
		public RuleCall getCallParamsExprJNIFunctionInArrayNotationParserRuleCall_5_0() { return cCallParamsExprJNIFunctionInArrayNotationParserRuleCall_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//(inputExprs+=AlphaExpression (',' inputExprs+=AlphaExpression)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//inputExprs+=AlphaExpression
		public Assignment getInputExprsAssignment_7_0() { return cInputExprsAssignment_7_0; }
		
		//AlphaExpression
		public RuleCall getInputExprsAlphaExpressionParserRuleCall_7_0_0() { return cInputExprsAlphaExpressionParserRuleCall_7_0_0; }
		
		//(',' inputExprs+=AlphaExpression)*
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//','
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }
		
		//inputExprs+=AlphaExpression
		public Assignment getInputExprsAssignment_7_1_1() { return cInputExprsAssignment_7_1_1; }
		
		//AlphaExpression
		public RuleCall getInputExprsAlphaExpressionParserRuleCall_7_1_1_0() { return cInputExprsAlphaExpressionParserRuleCall_7_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class AlphaExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AlphaExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRestrictExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAutoRestrictExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOrExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///* Alpha Expressions */ AlphaExpression:
		//	IfExpression | RestrictExpression | AutoRestrictExpression | OrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//IfExpression | RestrictExpression | AutoRestrictExpression | OrExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_0() { return cIfExpressionParserRuleCall_0; }
		
		//RestrictExpression
		public RuleCall getRestrictExpressionParserRuleCall_1() { return cRestrictExpressionParserRuleCall_1; }
		
		//AutoRestrictExpression
		public RuleCall getAutoRestrictExpressionParserRuleCall_2() { return cAutoRestrictExpressionParserRuleCall_2; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_3() { return cOrExpressionParserRuleCall_3; }
	}
	public class AlphaTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AlphaTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cAlphaExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cCaseExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDependenceExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFuzzyDependenceExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIndexExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFuzzyIndexExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cReductionsParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cConvolutionExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMultiArgExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cExternalMultiArgExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSelectExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//AlphaTerminalExpression AlphaExpression:
		//	'(' AlphaExpression ')' | CaseExpression | ConstantExpression | VariableExpression | DependenceExpression |
		//	FuzzyDependenceExpression | IndexExpression | FuzzyIndexExpression | Reductions | ConvolutionExpression |
		//	MultiArgExpression | ExternalMultiArgExpression | SelectExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' AlphaExpression ')' | CaseExpression | ConstantExpression | VariableExpression | DependenceExpression |
		//FuzzyDependenceExpression | IndexExpression | FuzzyIndexExpression | Reductions | ConvolutionExpression |
		//MultiArgExpression | ExternalMultiArgExpression | SelectExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' AlphaExpression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//AlphaExpression
		public RuleCall getAlphaExpressionParserRuleCall_0_1() { return cAlphaExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//CaseExpression
		public RuleCall getCaseExpressionParserRuleCall_1() { return cCaseExpressionParserRuleCall_1; }
		
		//ConstantExpression
		public RuleCall getConstantExpressionParserRuleCall_2() { return cConstantExpressionParserRuleCall_2; }
		
		//VariableExpression
		public RuleCall getVariableExpressionParserRuleCall_3() { return cVariableExpressionParserRuleCall_3; }
		
		//DependenceExpression
		public RuleCall getDependenceExpressionParserRuleCall_4() { return cDependenceExpressionParserRuleCall_4; }
		
		//FuzzyDependenceExpression
		public RuleCall getFuzzyDependenceExpressionParserRuleCall_5() { return cFuzzyDependenceExpressionParserRuleCall_5; }
		
		//IndexExpression
		public RuleCall getIndexExpressionParserRuleCall_6() { return cIndexExpressionParserRuleCall_6; }
		
		//FuzzyIndexExpression
		public RuleCall getFuzzyIndexExpressionParserRuleCall_7() { return cFuzzyIndexExpressionParserRuleCall_7; }
		
		//Reductions
		public RuleCall getReductionsParserRuleCall_8() { return cReductionsParserRuleCall_8; }
		
		//ConvolutionExpression
		public RuleCall getConvolutionExpressionParserRuleCall_9() { return cConvolutionExpressionParserRuleCall_9; }
		
		//MultiArgExpression
		public RuleCall getMultiArgExpressionParserRuleCall_10() { return cMultiArgExpressionParserRuleCall_10; }
		
		//ExternalMultiArgExpression
		public RuleCall getExternalMultiArgExpressionParserRuleCall_11() { return cExternalMultiArgExpressionParserRuleCall_11; }
		
		//SelectExpression
		public RuleCall getSelectExpressionParserRuleCall_12() { return cSelectExpressionParserRuleCall_12; }
	}
	public class ReductionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.Reductions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReduceExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArgReduceExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExternalReduceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExternalArgReduceExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFuzzyReduceExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFuzzyArgReduceExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExternalFuzzyReduceExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cExternalFuzzyArgReduceExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Reductions AlphaExpression:
		//	ReduceExpression | ArgReduceExpression | ExternalReduceExpression | ExternalArgReduceExpression |
		//	FuzzyReduceExpression | FuzzyArgReduceExpression | ExternalFuzzyReduceExpression | ExternalFuzzyArgReduceExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ReduceExpression | ArgReduceExpression | ExternalReduceExpression | ExternalArgReduceExpression | FuzzyReduceExpression
		//| FuzzyArgReduceExpression | ExternalFuzzyReduceExpression | ExternalFuzzyArgReduceExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ReduceExpression
		public RuleCall getReduceExpressionParserRuleCall_0() { return cReduceExpressionParserRuleCall_0; }
		
		//ArgReduceExpression
		public RuleCall getArgReduceExpressionParserRuleCall_1() { return cArgReduceExpressionParserRuleCall_1; }
		
		//ExternalReduceExpression
		public RuleCall getExternalReduceExpressionParserRuleCall_2() { return cExternalReduceExpressionParserRuleCall_2; }
		
		//ExternalArgReduceExpression
		public RuleCall getExternalArgReduceExpressionParserRuleCall_3() { return cExternalArgReduceExpressionParserRuleCall_3; }
		
		//FuzzyReduceExpression
		public RuleCall getFuzzyReduceExpressionParserRuleCall_4() { return cFuzzyReduceExpressionParserRuleCall_4; }
		
		//FuzzyArgReduceExpression
		public RuleCall getFuzzyArgReduceExpressionParserRuleCall_5() { return cFuzzyArgReduceExpressionParserRuleCall_5; }
		
		//ExternalFuzzyReduceExpression
		public RuleCall getExternalFuzzyReduceExpressionParserRuleCall_6() { return cExternalFuzzyReduceExpressionParserRuleCall_6; }
		
		//ExternalFuzzyArgReduceExpression
		public RuleCall getExternalFuzzyArgReduceExpressionParserRuleCall_7() { return cExternalFuzzyArgReduceExpressionParserRuleCall_7; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprAlphaExpressionParserRuleCall_1_0 = (RuleCall)cCondExprAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExprAlphaExpressionParserRuleCall_3_0 = (RuleCall)cThenExprAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseExprAlphaExpressionParserRuleCall_5_0 = (RuleCall)cElseExprAssignment_5.eContents().get(0);
		
		//IfExpression:
		//	'if' condExpr=AlphaExpression
		//	'then' thenExpr=AlphaExpression
		//	'else' elseExpr=AlphaExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condExpr=AlphaExpression 'then' thenExpr=AlphaExpression 'else' elseExpr=AlphaExpression
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condExpr=AlphaExpression
		public Assignment getCondExprAssignment_1() { return cCondExprAssignment_1; }
		
		//AlphaExpression
		public RuleCall getCondExprAlphaExpressionParserRuleCall_1_0() { return cCondExprAlphaExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//thenExpr=AlphaExpression
		public Assignment getThenExprAssignment_3() { return cThenExprAssignment_3; }
		
		//AlphaExpression
		public RuleCall getThenExprAlphaExpressionParserRuleCall_3_0() { return cThenExprAlphaExpressionParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//elseExpr=AlphaExpression
		public Assignment getElseExprAssignment_5() { return cElseExprAssignment_5; }
		
		//AlphaExpression
		public RuleCall getElseExprAlphaExpressionParserRuleCall_5_0() { return cElseExprAlphaExpressionParserRuleCall_5_0; }
	}
	public class RestrictExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.RestrictExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDomainExprAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cDomainExprAlternatives_0_0_0 = (Alternatives)cDomainExprAssignment_0_0.eContents().get(0);
		private final RuleCall cDomainExprJNIDomainParserRuleCall_0_0_0_0 = (RuleCall)cDomainExprAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cDomainExprJNIDomainInArrayNotationParserRuleCall_0_0_0_1 = (RuleCall)cDomainExprAlternatives_0_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprAlphaExpressionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDomainExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDomainExprCalculatorExpressionParserRuleCall_1_1_0 = (RuleCall)cDomainExprAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cExprAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExprAlphaExpressionParserRuleCall_1_4_0 = (RuleCall)cExprAssignment_1_4.eContents().get(0);
		
		//RestrictExpression:
		//	domainExpr=(JNIDomain | JNIDomainInArrayNotation) ':' expr=AlphaExpression |
		//	'{' domainExpr=CalculatorExpression '}' ':' expr=AlphaExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//domainExpr=(JNIDomain | JNIDomainInArrayNotation) ':' expr=AlphaExpression | '{' domainExpr=CalculatorExpression '}' ':'
		//expr=AlphaExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//domainExpr=(JNIDomain | JNIDomainInArrayNotation) ':' expr=AlphaExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//domainExpr=(JNIDomain | JNIDomainInArrayNotation)
		public Assignment getDomainExprAssignment_0_0() { return cDomainExprAssignment_0_0; }
		
		//(JNIDomain | JNIDomainInArrayNotation)
		public Alternatives getDomainExprAlternatives_0_0_0() { return cDomainExprAlternatives_0_0_0; }
		
		//JNIDomain
		public RuleCall getDomainExprJNIDomainParserRuleCall_0_0_0_0() { return cDomainExprJNIDomainParserRuleCall_0_0_0_0; }
		
		//JNIDomainInArrayNotation
		public RuleCall getDomainExprJNIDomainInArrayNotationParserRuleCall_0_0_0_1() { return cDomainExprJNIDomainInArrayNotationParserRuleCall_0_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//expr=AlphaExpression
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }
		
		//AlphaExpression
		public RuleCall getExprAlphaExpressionParserRuleCall_0_2_0() { return cExprAlphaExpressionParserRuleCall_0_2_0; }
		
		//'{' domainExpr=CalculatorExpression '}' ':' expr=AlphaExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//domainExpr=CalculatorExpression
		public Assignment getDomainExprAssignment_1_1() { return cDomainExprAssignment_1_1; }
		
		//CalculatorExpression
		public RuleCall getDomainExprCalculatorExpressionParserRuleCall_1_1_0() { return cDomainExprCalculatorExpressionParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//expr=AlphaExpression
		public Assignment getExprAssignment_1_4() { return cExprAssignment_1_4; }
		
		//AlphaExpression
		public RuleCall getExprAlphaExpressionParserRuleCall_1_4_0() { return cExprAlphaExpressionParserRuleCall_1_4_0; }
	}
	public class AutoRestrictExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AutoRestrictExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAutoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprAlphaExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//AutoRestrictExpression:
		//	'auto' ':' expr=AlphaExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'auto' ':' expr=AlphaExpression
		public Group getGroup() { return cGroup; }
		
		//'auto'
		public Keyword getAutoKeyword_0() { return cAutoKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//expr=AlphaExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//AlphaExpression
		public RuleCall getExprAlphaExpressionParserRuleCall_2_0() { return cExprAlphaExpressionParserRuleCall_2_0; }
	}
	public class CaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.CaseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cExprsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cExprsAlphaExpressionParserRuleCall_3_0_0 = (RuleCall)cExprsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CaseExpression:
		//	'case' name=ID? '{' (exprs+=AlphaExpression ';')+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'case' name=ID? '{' (exprs+=AlphaExpression ';')+ '}'
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(exprs+=AlphaExpression ';')+
		public Group getGroup_3() { return cGroup_3; }
		
		//exprs+=AlphaExpression
		public Assignment getExprsAssignment_3_0() { return cExprsAssignment_3_0; }
		
		//AlphaExpression
		public RuleCall getExprsAlphaExpressionParserRuleCall_3_0_0() { return cExprsAlphaExpressionParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DependenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.DependenceExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFunctionExprAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFunctionExprJNIFunctionParserRuleCall_0_0_0 = (RuleCall)cFunctionExprAssignment_0_0.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprAlphaTerminalExpressionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprVariableExpressionParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Assignment cFunctionExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionExprJNIFunctionInArrayNotationParserRuleCall_1_1_0 = (RuleCall)cFunctionExprAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cExprAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprConstantExpressionParserRuleCall_2_0_0 = (RuleCall)cExprAssignment_2_0.eContents().get(0);
		private final Assignment cFunctionExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFunctionExprJNIFunctionInArrayNotationParserRuleCall_2_1_0 = (RuleCall)cFunctionExprAssignment_2_1.eContents().get(0);
		
		//DependenceExpression:
		//	functionExpr=JNIFunction '@' expr=AlphaTerminalExpression | expr=VariableExpression
		//	functionExpr=JNIFunctionInArrayNotation | expr=ConstantExpression functionExpr=JNIFunctionInArrayNotation;
		@Override public ParserRule getRule() { return rule; }
		
		//functionExpr=JNIFunction '@' expr=AlphaTerminalExpression | expr=VariableExpression
		//functionExpr=JNIFunctionInArrayNotation | expr=ConstantExpression functionExpr=JNIFunctionInArrayNotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//functionExpr=JNIFunction '@' expr=AlphaTerminalExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//functionExpr=JNIFunction
		public Assignment getFunctionExprAssignment_0_0() { return cFunctionExprAssignment_0_0; }
		
		//JNIFunction
		public RuleCall getFunctionExprJNIFunctionParserRuleCall_0_0_0() { return cFunctionExprJNIFunctionParserRuleCall_0_0_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0_1() { return cCommercialAtKeyword_0_1; }
		
		//expr=AlphaTerminalExpression
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }
		
		//AlphaTerminalExpression
		public RuleCall getExprAlphaTerminalExpressionParserRuleCall_0_2_0() { return cExprAlphaTerminalExpressionParserRuleCall_0_2_0; }
		
		//expr=VariableExpression functionExpr=JNIFunctionInArrayNotation
		public Group getGroup_1() { return cGroup_1; }
		
		//expr=VariableExpression
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//VariableExpression
		public RuleCall getExprVariableExpressionParserRuleCall_1_0_0() { return cExprVariableExpressionParserRuleCall_1_0_0; }
		
		//functionExpr=JNIFunctionInArrayNotation
		public Assignment getFunctionExprAssignment_1_1() { return cFunctionExprAssignment_1_1; }
		
		//JNIFunctionInArrayNotation
		public RuleCall getFunctionExprJNIFunctionInArrayNotationParserRuleCall_1_1_0() { return cFunctionExprJNIFunctionInArrayNotationParserRuleCall_1_1_0; }
		
		//expr=ConstantExpression functionExpr=JNIFunctionInArrayNotation
		public Group getGroup_2() { return cGroup_2; }
		
		//expr=ConstantExpression
		public Assignment getExprAssignment_2_0() { return cExprAssignment_2_0; }
		
		//ConstantExpression
		public RuleCall getExprConstantExpressionParserRuleCall_2_0_0() { return cExprConstantExpressionParserRuleCall_2_0_0; }
		
		//functionExpr=JNIFunctionInArrayNotation
		public Assignment getFunctionExprAssignment_2_1() { return cFunctionExprAssignment_2_1; }
		
		//JNIFunctionInArrayNotation
		public RuleCall getFunctionExprJNIFunctionInArrayNotationParserRuleCall_2_1_0() { return cFunctionExprJNIFunctionInArrayNotationParserRuleCall_2_1_0; }
	}
	public class FuzzyDependenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.FuzzyDependenceExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFuzzyFunctionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFuzzyFunctionFuzzyFunctionParserRuleCall_0_0_0 = (RuleCall)cFuzzyFunctionAssignment_0_0.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprAlphaTerminalExpressionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprVariableExpressionParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Assignment cFuzzyFunctionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFuzzyFunctionFuzzyFunctionInArrayNotationParserRuleCall_1_1_0 = (RuleCall)cFuzzyFunctionAssignment_1_1.eContents().get(0);
		
		//FuzzyDependenceExpression:
		//	fuzzyFunction=FuzzyFunction '@' expr=AlphaTerminalExpression | expr=VariableExpression
		//	fuzzyFunction=FuzzyFunctionInArrayNotation;
		@Override public ParserRule getRule() { return rule; }
		
		//fuzzyFunction=FuzzyFunction '@' expr=AlphaTerminalExpression | expr=VariableExpression
		//fuzzyFunction=FuzzyFunctionInArrayNotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fuzzyFunction=FuzzyFunction '@' expr=AlphaTerminalExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//fuzzyFunction=FuzzyFunction
		public Assignment getFuzzyFunctionAssignment_0_0() { return cFuzzyFunctionAssignment_0_0; }
		
		//FuzzyFunction
		public RuleCall getFuzzyFunctionFuzzyFunctionParserRuleCall_0_0_0() { return cFuzzyFunctionFuzzyFunctionParserRuleCall_0_0_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0_1() { return cCommercialAtKeyword_0_1; }
		
		//expr=AlphaTerminalExpression
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }
		
		//AlphaTerminalExpression
		public RuleCall getExprAlphaTerminalExpressionParserRuleCall_0_2_0() { return cExprAlphaTerminalExpressionParserRuleCall_0_2_0; }
		
		//expr=VariableExpression fuzzyFunction=FuzzyFunctionInArrayNotation
		public Group getGroup_1() { return cGroup_1; }
		
		//expr=VariableExpression
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//VariableExpression
		public RuleCall getExprVariableExpressionParserRuleCall_1_0_0() { return cExprVariableExpressionParserRuleCall_1_0_0; }
		
		//fuzzyFunction=FuzzyFunctionInArrayNotation
		public Assignment getFuzzyFunctionAssignment_1_1() { return cFuzzyFunctionAssignment_1_1; }
		
		//FuzzyFunctionInArrayNotation
		public RuleCall getFuzzyFunctionFuzzyFunctionInArrayNotationParserRuleCall_1_1_0() { return cFuzzyFunctionFuzzyFunctionInArrayNotationParserRuleCall_1_1_0; }
	}
	public class IndexExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.IndexExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cValKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFunctionExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFunctionExprJNIFunctionParserRuleCall_0_1_0 = (RuleCall)cFunctionExprAssignment_0_1.eContents().get(0);
		private final Assignment cFunctionExprAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionExprJNIFunctionInArrayNotationParserRuleCall_1_0 = (RuleCall)cFunctionExprAssignment_1.eContents().get(0);
		
		//IndexExpression:
		//	'val' functionExpr=JNIFunction | functionExpr=JNIFunctionInArrayNotation;
		@Override public ParserRule getRule() { return rule; }
		
		//'val' functionExpr=JNIFunction | functionExpr=JNIFunctionInArrayNotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'val' functionExpr=JNIFunction
		public Group getGroup_0() { return cGroup_0; }
		
		//'val'
		public Keyword getValKeyword_0_0() { return cValKeyword_0_0; }
		
		//functionExpr=JNIFunction
		public Assignment getFunctionExprAssignment_0_1() { return cFunctionExprAssignment_0_1; }
		
		//JNIFunction
		public RuleCall getFunctionExprJNIFunctionParserRuleCall_0_1_0() { return cFunctionExprJNIFunctionParserRuleCall_0_1_0; }
		
		//functionExpr=JNIFunctionInArrayNotation
		public Assignment getFunctionExprAssignment_1() { return cFunctionExprAssignment_1; }
		
		//JNIFunctionInArrayNotation
		public RuleCall getFunctionExprJNIFunctionInArrayNotationParserRuleCall_1_0() { return cFunctionExprJNIFunctionInArrayNotationParserRuleCall_1_0; }
	}
	public class FuzzyIndexExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.FuzzyIndexExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cValKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFuzzyFunctionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFuzzyFunctionFuzzyFunctionParserRuleCall_0_1_0 = (RuleCall)cFuzzyFunctionAssignment_0_1.eContents().get(0);
		private final Assignment cFuzzyFunctionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFuzzyFunctionFuzzyFunctionInArrayNotationParserRuleCall_1_0 = (RuleCall)cFuzzyFunctionAssignment_1.eContents().get(0);
		
		//FuzzyIndexExpression:
		//	'val' fuzzyFunction=FuzzyFunction | fuzzyFunction=FuzzyFunctionInArrayNotation;
		@Override public ParserRule getRule() { return rule; }
		
		//'val' fuzzyFunction=FuzzyFunction | fuzzyFunction=FuzzyFunctionInArrayNotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'val' fuzzyFunction=FuzzyFunction
		public Group getGroup_0() { return cGroup_0; }
		
		//'val'
		public Keyword getValKeyword_0_0() { return cValKeyword_0_0; }
		
		//fuzzyFunction=FuzzyFunction
		public Assignment getFuzzyFunctionAssignment_0_1() { return cFuzzyFunctionAssignment_0_1; }
		
		//FuzzyFunction
		public RuleCall getFuzzyFunctionFuzzyFunctionParserRuleCall_0_1_0() { return cFuzzyFunctionFuzzyFunctionParserRuleCall_0_1_0; }
		
		//fuzzyFunction=FuzzyFunctionInArrayNotation
		public Assignment getFuzzyFunctionAssignment_1() { return cFuzzyFunctionAssignment_1; }
		
		//FuzzyFunctionInArrayNotation
		public RuleCall getFuzzyFunctionFuzzyFunctionInArrayNotationParserRuleCall_1_0() { return cFuzzyFunctionFuzzyFunctionInArrayNotationParserRuleCall_1_0; }
	}
	public class ReduceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.ReduceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorAREDUCTION_OPParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProjectionExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cProjectionExprAlternatives_4_0 = (Alternatives)cProjectionExprAssignment_4.eContents().get(0);
		private final RuleCall cProjectionExprJNIFunctionParserRuleCall_4_0_0 = (RuleCall)cProjectionExprAlternatives_4_0.eContents().get(0);
		private final RuleCall cProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1 = (RuleCall)cProjectionExprAlternatives_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyAlphaExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ReduceExpression:
		//	'reduce' '(' operator=AREDUCTION_OP ','
		//	projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
		//	body=AlphaExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'reduce' '(' operator=AREDUCTION_OP ',' projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
		//body=AlphaExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'reduce'
		public Keyword getReduceKeyword_0() { return cReduceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//operator=AREDUCTION_OP
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//AREDUCTION_OP
		public RuleCall getOperatorAREDUCTION_OPParserRuleCall_2_0() { return cOperatorAREDUCTION_OPParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//projectionExpr=(JNIFunction | JNIFunctionInArrayNotation)
		public Assignment getProjectionExprAssignment_4() { return cProjectionExprAssignment_4; }
		
		//(JNIFunction | JNIFunctionInArrayNotation)
		public Alternatives getProjectionExprAlternatives_4_0() { return cProjectionExprAlternatives_4_0; }
		
		//JNIFunction
		public RuleCall getProjectionExprJNIFunctionParserRuleCall_4_0_0() { return cProjectionExprJNIFunctionParserRuleCall_4_0_0; }
		
		//JNIFunctionInArrayNotation
		public RuleCall getProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1() { return cProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//body=AlphaExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//AlphaExpression
		public RuleCall getBodyAlphaExpressionParserRuleCall_6_0() { return cBodyAlphaExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ExternalReduceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.ExternalReduceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExternalFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cExternalFunctionExternalFunctionCrossReference_2_0 = (CrossReference)cExternalFunctionAssignment_2.eContents().get(0);
		private final RuleCall cExternalFunctionExternalFunctionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cExternalFunctionExternalFunctionCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProjectionExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cProjectionExprAlternatives_4_0 = (Alternatives)cProjectionExprAssignment_4.eContents().get(0);
		private final RuleCall cProjectionExprJNIFunctionParserRuleCall_4_0_0 = (RuleCall)cProjectionExprAlternatives_4_0.eContents().get(0);
		private final RuleCall cProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1 = (RuleCall)cProjectionExprAlternatives_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyAlphaExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ExternalReduceExpression:
		//	'reduce' '(' externalFunction=[ExternalFunction|QualifiedName] ','
		//	projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
		//	body=AlphaExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'reduce' '(' externalFunction=[ExternalFunction|QualifiedName] ',' projectionExpr=(JNIFunction |
		//JNIFunctionInArrayNotation) ',' body=AlphaExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'reduce'
		public Keyword getReduceKeyword_0() { return cReduceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//externalFunction=[ExternalFunction|QualifiedName]
		public Assignment getExternalFunctionAssignment_2() { return cExternalFunctionAssignment_2; }
		
		//[ExternalFunction|QualifiedName]
		public CrossReference getExternalFunctionExternalFunctionCrossReference_2_0() { return cExternalFunctionExternalFunctionCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getExternalFunctionExternalFunctionQualifiedNameParserRuleCall_2_0_1() { return cExternalFunctionExternalFunctionQualifiedNameParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//projectionExpr=(JNIFunction | JNIFunctionInArrayNotation)
		public Assignment getProjectionExprAssignment_4() { return cProjectionExprAssignment_4; }
		
		//(JNIFunction | JNIFunctionInArrayNotation)
		public Alternatives getProjectionExprAlternatives_4_0() { return cProjectionExprAlternatives_4_0; }
		
		//JNIFunction
		public RuleCall getProjectionExprJNIFunctionParserRuleCall_4_0_0() { return cProjectionExprJNIFunctionParserRuleCall_4_0_0; }
		
		//JNIFunctionInArrayNotation
		public RuleCall getProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1() { return cProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//body=AlphaExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//AlphaExpression
		public RuleCall getBodyAlphaExpressionParserRuleCall_6_0() { return cBodyAlphaExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ArgReduceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.ArgReduceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArgreduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorAREDUCTION_OPParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProjectionExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cProjectionExprAlternatives_4_0 = (Alternatives)cProjectionExprAssignment_4.eContents().get(0);
		private final RuleCall cProjectionExprJNIFunctionParserRuleCall_4_0_0 = (RuleCall)cProjectionExprAlternatives_4_0.eContents().get(0);
		private final RuleCall cProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1 = (RuleCall)cProjectionExprAlternatives_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyAlphaExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ArgReduceExpression:
		//	'argreduce' '(' operator=AREDUCTION_OP ','
		//	projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
		//	body=AlphaExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'argreduce' '(' operator=AREDUCTION_OP ',' projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
		//body=AlphaExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'argreduce'
		public Keyword getArgreduceKeyword_0() { return cArgreduceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//operator=AREDUCTION_OP
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//AREDUCTION_OP
		public RuleCall getOperatorAREDUCTION_OPParserRuleCall_2_0() { return cOperatorAREDUCTION_OPParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//projectionExpr=(JNIFunction | JNIFunctionInArrayNotation)
		public Assignment getProjectionExprAssignment_4() { return cProjectionExprAssignment_4; }
		
		//(JNIFunction | JNIFunctionInArrayNotation)
		public Alternatives getProjectionExprAlternatives_4_0() { return cProjectionExprAlternatives_4_0; }
		
		//JNIFunction
		public RuleCall getProjectionExprJNIFunctionParserRuleCall_4_0_0() { return cProjectionExprJNIFunctionParserRuleCall_4_0_0; }
		
		//JNIFunctionInArrayNotation
		public RuleCall getProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1() { return cProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//body=AlphaExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//AlphaExpression
		public RuleCall getBodyAlphaExpressionParserRuleCall_6_0() { return cBodyAlphaExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ExternalArgReduceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.ExternalArgReduceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArgreduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExternalFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cExternalFunctionExternalFunctionCrossReference_2_0 = (CrossReference)cExternalFunctionAssignment_2.eContents().get(0);
		private final RuleCall cExternalFunctionExternalFunctionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cExternalFunctionExternalFunctionCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProjectionExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cProjectionExprAlternatives_4_0 = (Alternatives)cProjectionExprAssignment_4.eContents().get(0);
		private final RuleCall cProjectionExprJNIFunctionParserRuleCall_4_0_0 = (RuleCall)cProjectionExprAlternatives_4_0.eContents().get(0);
		private final RuleCall cProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1 = (RuleCall)cProjectionExprAlternatives_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyAlphaExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ExternalArgReduceExpression:
		//	'argreduce' '(' externalFunction=[ExternalFunction|QualifiedName] ','
		//	projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
		//	body=AlphaExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'argreduce' '(' externalFunction=[ExternalFunction|QualifiedName] ',' projectionExpr=(JNIFunction |
		//JNIFunctionInArrayNotation) ',' body=AlphaExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'argreduce'
		public Keyword getArgreduceKeyword_0() { return cArgreduceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//externalFunction=[ExternalFunction|QualifiedName]
		public Assignment getExternalFunctionAssignment_2() { return cExternalFunctionAssignment_2; }
		
		//[ExternalFunction|QualifiedName]
		public CrossReference getExternalFunctionExternalFunctionCrossReference_2_0() { return cExternalFunctionExternalFunctionCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getExternalFunctionExternalFunctionQualifiedNameParserRuleCall_2_0_1() { return cExternalFunctionExternalFunctionQualifiedNameParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//projectionExpr=(JNIFunction | JNIFunctionInArrayNotation)
		public Assignment getProjectionExprAssignment_4() { return cProjectionExprAssignment_4; }
		
		//(JNIFunction | JNIFunctionInArrayNotation)
		public Alternatives getProjectionExprAlternatives_4_0() { return cProjectionExprAlternatives_4_0; }
		
		//JNIFunction
		public RuleCall getProjectionExprJNIFunctionParserRuleCall_4_0_0() { return cProjectionExprJNIFunctionParserRuleCall_4_0_0; }
		
		//JNIFunctionInArrayNotation
		public RuleCall getProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1() { return cProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//body=AlphaExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//AlphaExpression
		public RuleCall getBodyAlphaExpressionParserRuleCall_6_0() { return cBodyAlphaExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class FuzzyReduceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.FuzzyReduceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorAREDUCTION_OPParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProjectionFunctionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProjectionFunctionFuzzyFunctionParserRuleCall_4_0 = (RuleCall)cProjectionFunctionAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyAlphaExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FuzzyReduceExpression:
		//	'reduce' '(' operator=AREDUCTION_OP ','
		//	projectionFunction=FuzzyFunction ','
		//	body=AlphaExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'reduce' '(' operator=AREDUCTION_OP ',' projectionFunction=FuzzyFunction ',' body=AlphaExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'reduce'
		public Keyword getReduceKeyword_0() { return cReduceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//operator=AREDUCTION_OP
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//AREDUCTION_OP
		public RuleCall getOperatorAREDUCTION_OPParserRuleCall_2_0() { return cOperatorAREDUCTION_OPParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//projectionFunction=FuzzyFunction
		public Assignment getProjectionFunctionAssignment_4() { return cProjectionFunctionAssignment_4; }
		
		//FuzzyFunction
		public RuleCall getProjectionFunctionFuzzyFunctionParserRuleCall_4_0() { return cProjectionFunctionFuzzyFunctionParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//body=AlphaExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//AlphaExpression
		public RuleCall getBodyAlphaExpressionParserRuleCall_6_0() { return cBodyAlphaExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ExternalFuzzyReduceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.ExternalFuzzyReduceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExternalFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cExternalFunctionExternalFunctionCrossReference_2_0 = (CrossReference)cExternalFunctionAssignment_2.eContents().get(0);
		private final RuleCall cExternalFunctionExternalFunctionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cExternalFunctionExternalFunctionCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProjectionFunctionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProjectionFunctionFuzzyFunctionParserRuleCall_4_0 = (RuleCall)cProjectionFunctionAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyAlphaExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ExternalFuzzyReduceExpression:
		//	'reduce' '(' externalFunction=[ExternalFunction|QualifiedName] ','
		//	projectionFunction=FuzzyFunction ','
		//	body=AlphaExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'reduce' '(' externalFunction=[ExternalFunction|QualifiedName] ',' projectionFunction=FuzzyFunction ','
		//body=AlphaExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'reduce'
		public Keyword getReduceKeyword_0() { return cReduceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//externalFunction=[ExternalFunction|QualifiedName]
		public Assignment getExternalFunctionAssignment_2() { return cExternalFunctionAssignment_2; }
		
		//[ExternalFunction|QualifiedName]
		public CrossReference getExternalFunctionExternalFunctionCrossReference_2_0() { return cExternalFunctionExternalFunctionCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getExternalFunctionExternalFunctionQualifiedNameParserRuleCall_2_0_1() { return cExternalFunctionExternalFunctionQualifiedNameParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//projectionFunction=FuzzyFunction
		public Assignment getProjectionFunctionAssignment_4() { return cProjectionFunctionAssignment_4; }
		
		//FuzzyFunction
		public RuleCall getProjectionFunctionFuzzyFunctionParserRuleCall_4_0() { return cProjectionFunctionFuzzyFunctionParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//body=AlphaExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//AlphaExpression
		public RuleCall getBodyAlphaExpressionParserRuleCall_6_0() { return cBodyAlphaExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class FuzzyArgReduceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.FuzzyArgReduceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArgreduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorAREDUCTION_OPParserRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProjectionFunctionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProjectionFunctionFuzzyFunctionParserRuleCall_4_0 = (RuleCall)cProjectionFunctionAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyAlphaExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FuzzyArgReduceExpression:
		//	'argreduce' '(' operator=AREDUCTION_OP ','
		//	projectionFunction=FuzzyFunction ','
		//	body=AlphaExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'argreduce' '(' operator=AREDUCTION_OP ',' projectionFunction=FuzzyFunction ',' body=AlphaExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'argreduce'
		public Keyword getArgreduceKeyword_0() { return cArgreduceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//operator=AREDUCTION_OP
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//AREDUCTION_OP
		public RuleCall getOperatorAREDUCTION_OPParserRuleCall_2_0() { return cOperatorAREDUCTION_OPParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//projectionFunction=FuzzyFunction
		public Assignment getProjectionFunctionAssignment_4() { return cProjectionFunctionAssignment_4; }
		
		//FuzzyFunction
		public RuleCall getProjectionFunctionFuzzyFunctionParserRuleCall_4_0() { return cProjectionFunctionFuzzyFunctionParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//body=AlphaExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//AlphaExpression
		public RuleCall getBodyAlphaExpressionParserRuleCall_6_0() { return cBodyAlphaExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ExternalFuzzyArgReduceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.ExternalFuzzyArgReduceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArgreduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExternalFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cExternalFunctionExternalFunctionCrossReference_2_0 = (CrossReference)cExternalFunctionAssignment_2.eContents().get(0);
		private final RuleCall cExternalFunctionExternalFunctionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cExternalFunctionExternalFunctionCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProjectionFunctionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProjectionFunctionFuzzyFunctionParserRuleCall_4_0 = (RuleCall)cProjectionFunctionAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyAlphaExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ExternalFuzzyArgReduceExpression:
		//	'argreduce' '(' externalFunction=[ExternalFunction|QualifiedName] ','
		//	projectionFunction=FuzzyFunction ','
		//	body=AlphaExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'argreduce' '(' externalFunction=[ExternalFunction|QualifiedName] ',' projectionFunction=FuzzyFunction ','
		//body=AlphaExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'argreduce'
		public Keyword getArgreduceKeyword_0() { return cArgreduceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//externalFunction=[ExternalFunction|QualifiedName]
		public Assignment getExternalFunctionAssignment_2() { return cExternalFunctionAssignment_2; }
		
		//[ExternalFunction|QualifiedName]
		public CrossReference getExternalFunctionExternalFunctionCrossReference_2_0() { return cExternalFunctionExternalFunctionCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getExternalFunctionExternalFunctionQualifiedNameParserRuleCall_2_0_1() { return cExternalFunctionExternalFunctionQualifiedNameParserRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//projectionFunction=FuzzyFunction
		public Assignment getProjectionFunctionAssignment_4() { return cProjectionFunctionAssignment_4; }
		
		//FuzzyFunction
		public RuleCall getProjectionFunctionFuzzyFunctionParserRuleCall_4_0() { return cProjectionFunctionFuzzyFunctionParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//body=AlphaExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//AlphaExpression
		public RuleCall getBodyAlphaExpressionParserRuleCall_6_0() { return cBodyAlphaExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ConvolutionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.ConvolutionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKernelDomainExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKernelDomainExprCalculatorExpressionParserRuleCall_2_0 = (RuleCall)cKernelDomainExprAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKernelExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKernelExpressionAlphaExpressionParserRuleCall_4_0 = (RuleCall)cKernelExpressionAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDataExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDataExpressionAlphaExpressionParserRuleCall_6_0 = (RuleCall)cDataExpressionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ConvolutionExpression:
		//	'conv' '(' kernelDomainExpr=CalculatorExpression ','
		//	kernelExpression=AlphaExpression ','
		//	dataExpression=AlphaExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'conv' '(' kernelDomainExpr=CalculatorExpression ',' kernelExpression=AlphaExpression ',' dataExpression=AlphaExpression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'conv'
		public Keyword getConvKeyword_0() { return cConvKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//kernelDomainExpr=CalculatorExpression
		public Assignment getKernelDomainExprAssignment_2() { return cKernelDomainExprAssignment_2; }
		
		//CalculatorExpression
		public RuleCall getKernelDomainExprCalculatorExpressionParserRuleCall_2_0() { return cKernelDomainExprCalculatorExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//kernelExpression=AlphaExpression
		public Assignment getKernelExpressionAssignment_4() { return cKernelExpressionAssignment_4; }
		
		//AlphaExpression
		public RuleCall getKernelExpressionAlphaExpressionParserRuleCall_4_0() { return cKernelExpressionAlphaExpressionParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//dataExpression=AlphaExpression
		public Assignment getDataExpressionAssignment_6() { return cDataExpressionAssignment_6; }
		
		//AlphaExpression
		public RuleCall getDataExpressionAlphaExpressionParserRuleCall_6_0() { return cDataExpressionAlphaExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class SelectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.SelectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRelationExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationExprCalculatorExpressionParserRuleCall_1_0 = (RuleCall)cRelationExprAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprAlphaTerminalExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		
		//SelectExpression:
		//	'select' relationExpr=CalculatorExpression 'from' expr=AlphaTerminalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'select' relationExpr=CalculatorExpression 'from' expr=AlphaTerminalExpression
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//relationExpr=CalculatorExpression
		public Assignment getRelationExprAssignment_1() { return cRelationExprAssignment_1; }
		
		//CalculatorExpression
		public RuleCall getRelationExprCalculatorExpressionParserRuleCall_1_0() { return cRelationExprCalculatorExpressionParserRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//expr=AlphaTerminalExpression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//AlphaTerminalExpression
		public RuleCall getExprAlphaTerminalExpressionParserRuleCall_3_0() { return cExprAlphaTerminalExpressionParserRuleCall_3_0; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAOrOPParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression AlphaExpression:
		//	AndExpression ({BinaryExpression.left=current} operator=AOrOP right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({BinaryExpression.left=current} operator=AOrOP right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} operator=AOrOP right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//operator=AOrOP
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AOrOP
		public RuleCall getOperatorAOrOPParserRuleCall_1_1_0() { return cOperatorAOrOPParserRuleCall_1_1_0; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAAndOPParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression AlphaExpression:
		//	RelationalExpression ({BinaryExpression.left=current} operator=AAndOP right=RelationalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExpression ({BinaryExpression.left=current} operator=AAndOP right=RelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} operator=AAndOP right=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//operator=AAndOP
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AAndOP
		public RuleCall getOperatorAAndOPParserRuleCall_1_1_0() { return cOperatorAAndOPParserRuleCall_1_1_0; }
		
		//right=RelationalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RelationalExpression
		public RuleCall getRightRelationalExpressionParserRuleCall_1_2_0() { return cRightRelationalExpressionParserRuleCall_1_2_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorARelationalOPParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RelationalExpression AlphaExpression:
		//	AdditiveExpression ({BinaryExpression.left=current} operator=ARelationalOP right=AdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({BinaryExpression.left=current} operator=ARelationalOP right=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} operator=ARelationalOP right=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//operator=ARelationalOP
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ARelationalOP
		public RuleCall getOperatorARelationalOPParserRuleCall_1_1_0() { return cOperatorARelationalOPParserRuleCall_1_1_0; }
		
		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAAdditiveOPParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression AlphaExpression:
		//	MultiplicativeExpression ({BinaryExpression.left=current} operator=AAdditiveOP right=MultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ({BinaryExpression.left=current} operator=AAdditiveOP right=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} operator=AAdditiveOP right=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//operator=AAdditiveOP
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AAdditiveOP
		public RuleCall getOperatorAAdditiveOPParserRuleCall_1_1_0() { return cOperatorAAdditiveOPParserRuleCall_1_1_0; }
		
		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightMultiplicativeExpressionParserRuleCall_1_2_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMinMaxExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAMultiplicativeOPParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMinMaxExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression AlphaExpression:
		//	MinMaxExpression ({BinaryExpression.left=current} operator=AMultiplicativeOP right=MinMaxExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MinMaxExpression ({BinaryExpression.left=current} operator=AMultiplicativeOP right=MinMaxExpression)*
		public Group getGroup() { return cGroup; }
		
		//MinMaxExpression
		public RuleCall getMinMaxExpressionParserRuleCall_0() { return cMinMaxExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} operator=AMultiplicativeOP right=MinMaxExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//operator=AMultiplicativeOP
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AMultiplicativeOP
		public RuleCall getOperatorAMultiplicativeOPParserRuleCall_1_1_0() { return cOperatorAMultiplicativeOPParserRuleCall_1_1_0; }
		
		//right=MinMaxExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MinMaxExpression
		public RuleCall getRightMinMaxExpressionParserRuleCall_1_2_0() { return cRightMinMaxExpressionParserRuleCall_1_2_0; }
	}
	public class MinMaxExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.MinMaxExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOrTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAMINMAX_OPParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryOrTerminalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MinMaxExpression AlphaExpression:
		//	UnaryOrTerminalExpression ({BinaryExpression.left=current} operator=AMINMAX_OP right=UnaryOrTerminalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryOrTerminalExpression ({BinaryExpression.left=current} operator=AMINMAX_OP right=UnaryOrTerminalExpression)*
		public Group getGroup() { return cGroup; }
		
		//UnaryOrTerminalExpression
		public RuleCall getUnaryOrTerminalExpressionParserRuleCall_0() { return cUnaryOrTerminalExpressionParserRuleCall_0; }
		
		//({BinaryExpression.left=current} operator=AMINMAX_OP right=UnaryOrTerminalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }
		
		//operator=AMINMAX_OP
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AMINMAX_OP
		public RuleCall getOperatorAMINMAX_OPParserRuleCall_1_1_0() { return cOperatorAMINMAX_OPParserRuleCall_1_1_0; }
		
		//right=UnaryOrTerminalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnaryOrTerminalExpression
		public RuleCall getRightUnaryOrTerminalExpressionParserRuleCall_1_2_0() { return cRightUnaryOrTerminalExpressionParserRuleCall_1_2_0; }
	}
	public class MultiArgExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.MultiArgExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorAREDUCTION_OPParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprsAlphaExpressionParserRuleCall_2_0 = (RuleCall)cExprsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExprsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExprsAlphaExpressionParserRuleCall_3_1_0 = (RuleCall)cExprsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MultiArgExpression:
		//	operator=AREDUCTION_OP '(' exprs+=AlphaExpression (',' exprs+=AlphaExpression)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//operator=AREDUCTION_OP '(' exprs+=AlphaExpression (',' exprs+=AlphaExpression)* ')'
		public Group getGroup() { return cGroup; }
		
		//operator=AREDUCTION_OP
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//AREDUCTION_OP
		public RuleCall getOperatorAREDUCTION_OPParserRuleCall_0_0() { return cOperatorAREDUCTION_OPParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exprs+=AlphaExpression
		public Assignment getExprsAssignment_2() { return cExprsAssignment_2; }
		
		//AlphaExpression
		public RuleCall getExprsAlphaExpressionParserRuleCall_2_0() { return cExprsAlphaExpressionParserRuleCall_2_0; }
		
		//(',' exprs+=AlphaExpression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//exprs+=AlphaExpression
		public Assignment getExprsAssignment_3_1() { return cExprsAssignment_3_1; }
		
		//AlphaExpression
		public RuleCall getExprsAlphaExpressionParserRuleCall_3_1_0() { return cExprsAlphaExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExternalMultiArgExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.ExternalMultiArgExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExternalFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cExternalFunctionExternalFunctionCrossReference_0_0 = (CrossReference)cExternalFunctionAssignment_0.eContents().get(0);
		private final RuleCall cExternalFunctionExternalFunctionQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cExternalFunctionExternalFunctionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprsAlphaExpressionParserRuleCall_2_0 = (RuleCall)cExprsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExprsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExprsAlphaExpressionParserRuleCall_3_1_0 = (RuleCall)cExprsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExternalMultiArgExpression:
		//	externalFunction=[ExternalFunction|QualifiedName] '(' exprs+=AlphaExpression (',' exprs+=AlphaExpression)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//externalFunction=[ExternalFunction|QualifiedName] '(' exprs+=AlphaExpression (',' exprs+=AlphaExpression)* ')'
		public Group getGroup() { return cGroup; }
		
		//externalFunction=[ExternalFunction|QualifiedName]
		public Assignment getExternalFunctionAssignment_0() { return cExternalFunctionAssignment_0; }
		
		//[ExternalFunction|QualifiedName]
		public CrossReference getExternalFunctionExternalFunctionCrossReference_0_0() { return cExternalFunctionExternalFunctionCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getExternalFunctionExternalFunctionQualifiedNameParserRuleCall_0_0_1() { return cExternalFunctionExternalFunctionQualifiedNameParserRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exprs+=AlphaExpression
		public Assignment getExprsAssignment_2() { return cExprsAssignment_2; }
		
		//AlphaExpression
		public RuleCall getExprsAlphaExpressionParserRuleCall_2_0() { return cExprsAlphaExpressionParserRuleCall_2_0; }
		
		//(',' exprs+=AlphaExpression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//exprs+=AlphaExpression
		public Assignment getExprsAssignment_3_1() { return cExprsAssignment_3_1; }
		
		//AlphaExpression
		public RuleCall getExprsAlphaExpressionParserRuleCall_3_1_0() { return cExprsAlphaExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class UnaryOrTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.UnaryOrTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAlphaTerminalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOrTerminalExpression AlphaExpression:
		//	UnaryExpression | AlphaTerminalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression | AlphaTerminalExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//AlphaTerminalExpression
		public RuleCall getAlphaTerminalExpressionParserRuleCall_1() { return cAlphaTerminalExpressionParserRuleCall_1; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorAUnaryOPParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAlphaTerminalExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//UnaryExpression:
		//	operator=AUnaryOP expr=AlphaTerminalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=AUnaryOP expr=AlphaTerminalExpression
		public Group getGroup() { return cGroup; }
		
		//operator=AUnaryOP
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//AUnaryOP
		public RuleCall getOperatorAUnaryOPParserRuleCall_0_0() { return cOperatorAUnaryOPParserRuleCall_0_0; }
		
		//expr=AlphaTerminalExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//AlphaTerminalExpression
		public RuleCall getExprAlphaTerminalExpressionParserRuleCall_1_0() { return cExprAlphaTerminalExpressionParserRuleCall_1_0; }
	}
	public class VariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.VariableExpression");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//VariableExpression:
		//	variable=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_1() { return cVariableVariableIDTerminalRuleCall_0_1; }
	}
	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.ConstantExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ConstantExpression:
		//	BooleanExpression | RealExpression | IntegerExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanExpression | RealExpression | IntegerExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_0() { return cBooleanExpressionParserRuleCall_0; }
		
		//RealExpression
		public RuleCall getRealExpressionParserRuleCall_1() { return cRealExpressionParserRuleCall_1; }
		
		//IntegerExpression
		public RuleCall getIntegerExpressionParserRuleCall_2() { return cIntegerExpressionParserRuleCall_2; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.BooleanExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanExpression:
		//	value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_0() { return cValueBOOLEANTerminalRuleCall_0; }
	}
	public class IntegerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.IntegerExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerExpression:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class RealExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.RealExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RealExpression:
		//	value=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}
	public class AREDUCTION_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AREDUCTION_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMinKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMaxKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProdKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSumKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAndKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOrKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cXorKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cPlusSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAsteriskKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//AREDUCTION_OP REDUCTION_OP:
		//	"min" | "max" | "prod" | "sum" | "and" | "or" | "xor" | "+" | "*";
		@Override public ParserRule getRule() { return rule; }
		
		//"min" | "max" | "prod" | "sum" | "and" | "or" | "xor" | "+" | "*"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"min"
		public Keyword getMinKeyword_0() { return cMinKeyword_0; }
		
		//"max"
		public Keyword getMaxKeyword_1() { return cMaxKeyword_1; }
		
		//"prod"
		public Keyword getProdKeyword_2() { return cProdKeyword_2; }
		
		//"sum"
		public Keyword getSumKeyword_3() { return cSumKeyword_3; }
		
		//"and"
		public Keyword getAndKeyword_4() { return cAndKeyword_4; }
		
		//"or"
		public Keyword getOrKeyword_5() { return cOrKeyword_5; }
		
		//"xor"
		public Keyword getXorKeyword_6() { return cXorKeyword_6; }
		
		//"+"
		public Keyword getPlusSignKeyword_7() { return cPlusSignKeyword_7; }
		
		//"*"
		public Keyword getAsteriskKeyword_8() { return cAsteriskKeyword_8; }
	}
	public class AOrOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AOrOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cXorKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AOrOP BINARY_OP:
		//	"or" | "xor";
		@Override public ParserRule getRule() { return rule; }
		
		//"or" | "xor"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"or"
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }
		
		//"xor"
		public Keyword getXorKeyword_1() { return cXorKeyword_1; }
	}
	public class AAndOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AAndOP");
		private final Keyword cAndKeyword = (Keyword)rule.eContents().get(1);
		
		//AAndOP BINARY_OP:
		//	"and";
		@Override public ParserRule getRule() { return rule; }
		
		//"and"
		public Keyword getAndKeyword() { return cAndKeyword; }
	}
	public class ARelationalOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.ARelationalOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ARelationalOP BINARY_OP:
		//	"=" | "!=" | ">=" | ">" | "<" | "<=";
		@Override public ParserRule getRule() { return rule; }
		
		//"=" | "!=" | ">=" | ">" | "<" | "<="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//"<"
		public Keyword getLessThanSignKeyword_4() { return cLessThanSignKeyword_4; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_5() { return cLessThanSignEqualsSignKeyword_5; }
	}
	public class AAdditiveOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AAdditiveOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AAdditiveOP BINARY_OP:
		//	"+" | "-";
		@Override public ParserRule getRule() { return rule; }
		
		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class AMultiplicativeOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AMultiplicativeOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AMultiplicativeOP BINARY_OP:
		//	"*" | "/";
		@Override public ParserRule getRule() { return rule; }
		
		//"*" | "/"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class AMINMAX_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AMINMAX_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMinKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMaxKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AMINMAX_OP BINARY_OP:
		//	"min" | "max";
		@Override public ParserRule getRule() { return rule; }
		
		//"min" | "max"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"min"
		public Keyword getMinKeyword_0() { return cMinKeyword_0; }
		
		//"max"
		public Keyword getMaxKeyword_1() { return cMaxKeyword_1; }
	}
	public class AUnaryOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AUnaryOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AUnaryOP UNARY_OP:
		//	"not" | "-";
		@Override public ParserRule getRule() { return rule; }
		
		//"not" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"not"
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class PolyhedralObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.PolyhedralObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprCalculatorExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		///* Calculator Expressions */ PolyhedralObject:
		//	name=ID '=' expr=CalculatorExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' expr=CalculatorExpression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expr=CalculatorExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//CalculatorExpression
		public RuleCall getExprCalculatorExpressionParserRuleCall_2_0() { return cExprCalculatorExpressionParserRuleCall_2_0; }
	}
	public class CalculatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.CalculatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOrTerminalCalculatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryCalculatorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorABinaryCalcOpParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryOrTerminalCalculatorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//CalculatorExpression:
		//	UnaryOrTerminalCalculatorExpression ({BinaryCalculatorExpression.left=current} operator=ABinaryCalcOp
		//	right=UnaryOrTerminalCalculatorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryOrTerminalCalculatorExpression ({BinaryCalculatorExpression.left=current} operator=ABinaryCalcOp
		//right=UnaryOrTerminalCalculatorExpression)*
		public Group getGroup() { return cGroup; }
		
		//UnaryOrTerminalCalculatorExpression
		public RuleCall getUnaryOrTerminalCalculatorExpressionParserRuleCall_0() { return cUnaryOrTerminalCalculatorExpressionParserRuleCall_0; }
		
		//({BinaryCalculatorExpression.left=current} operator=ABinaryCalcOp right=UnaryOrTerminalCalculatorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryCalculatorExpression.left=current}
		public Action getBinaryCalculatorExpressionLeftAction_1_0() { return cBinaryCalculatorExpressionLeftAction_1_0; }
		
		//operator=ABinaryCalcOp
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ABinaryCalcOp
		public RuleCall getOperatorABinaryCalcOpParserRuleCall_1_1_0() { return cOperatorABinaryCalcOpParserRuleCall_1_1_0; }
		
		//right=UnaryOrTerminalCalculatorExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnaryOrTerminalCalculatorExpression
		public RuleCall getRightUnaryOrTerminalCalculatorExpressionParserRuleCall_1_2_0() { return cRightUnaryOrTerminalCalculatorExpressionParserRuleCall_1_2_0; }
	}
	public class UnaryOrTerminalCalculatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.UnaryOrTerminalCalculatorExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryCalculatorExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCalculatorExpressionTerminalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOrTerminalCalculatorExpression CalculatorExpression:
		//	UnaryCalculatorExpression | CalculatorExpressionTerminal;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryCalculatorExpression | CalculatorExpressionTerminal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryCalculatorExpression
		public RuleCall getUnaryCalculatorExpressionParserRuleCall_0() { return cUnaryCalculatorExpressionParserRuleCall_0; }
		
		//CalculatorExpressionTerminal
		public RuleCall getCalculatorExpressionTerminalParserRuleCall_1() { return cCalculatorExpressionTerminalParserRuleCall_1; }
	}
	public class CalculatorExpressionTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.CalculatorExpressionTerminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJNIDomainParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJNIRelationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJNIFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefinedObjectParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRectangularDomainParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVariableDomainParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cCalculatorExpressionParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//CalculatorExpressionTerminal CalculatorExpression:
		//	JNIDomain | JNIRelation | JNIFunction | DefinedObject | RectangularDomain | VariableDomain |
		//	'(' CalculatorExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//JNIDomain | JNIRelation | JNIFunction | DefinedObject | RectangularDomain | VariableDomain | '(' CalculatorExpression
		//')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JNIDomain
		public RuleCall getJNIDomainParserRuleCall_0() { return cJNIDomainParserRuleCall_0; }
		
		//JNIRelation
		public RuleCall getJNIRelationParserRuleCall_1() { return cJNIRelationParserRuleCall_1; }
		
		//JNIFunction
		public RuleCall getJNIFunctionParserRuleCall_2() { return cJNIFunctionParserRuleCall_2; }
		
		//DefinedObject
		public RuleCall getDefinedObjectParserRuleCall_3() { return cDefinedObjectParserRuleCall_3; }
		
		//RectangularDomain
		public RuleCall getRectangularDomainParserRuleCall_4() { return cRectangularDomainParserRuleCall_4; }
		
		//VariableDomain
		public RuleCall getVariableDomainParserRuleCall_5() { return cVariableDomainParserRuleCall_5; }
		
		//'(' CalculatorExpression ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//CalculatorExpression
		public RuleCall getCalculatorExpressionParserRuleCall_6_1() { return cCalculatorExpressionParserRuleCall_6_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}
	public class UnaryCalculatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.UnaryCalculatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorAUnaryCalcOpParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprCalculatorExpressionTerminalParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//UnaryCalculatorExpression:
		//	operator=AUnaryCalcOp expr=CalculatorExpressionTerminal;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=AUnaryCalcOp expr=CalculatorExpressionTerminal
		public Group getGroup() { return cGroup; }
		
		//operator=AUnaryCalcOp
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//AUnaryCalcOp
		public RuleCall getOperatorAUnaryCalcOpParserRuleCall_0_0() { return cOperatorAUnaryCalcOpParserRuleCall_0_0; }
		
		//expr=CalculatorExpressionTerminal
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//CalculatorExpressionTerminal
		public RuleCall getExprCalculatorExpressionTerminalParserRuleCall_1_0() { return cExprCalculatorExpressionTerminalParserRuleCall_1_0; }
	}
	public class VariableDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.VariableDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableVariableCrossReference_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VariableDomain:
		//	'{' variable=[Variable] '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' variable=[Variable] '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_1_0() { return cVariableVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_1_0_1() { return cVariableVariableIDTerminalRuleCall_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class RectangularDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.RectangularDomain");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cUpperBoundsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cUpperBoundsAISLExpressionParserRuleCall_0_1_0 = (RuleCall)cUpperBoundsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cUpperBoundsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cUpperBoundsAISLExpressionParserRuleCall_0_2_1_0 = (RuleCall)cUpperBoundsAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cAsKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cIndexNamesAssignment_0_4_2 = (Assignment)cGroup_0_4.eContents().get(2);
		private final RuleCall cIndexNamesIndexNameParserRuleCall_0_4_2_0 = (RuleCall)cIndexNamesAssignment_0_4_2.eContents().get(0);
		private final Group cGroup_0_4_3 = (Group)cGroup_0_4.eContents().get(3);
		private final Keyword cCommaKeyword_0_4_3_0 = (Keyword)cGroup_0_4_3.eContents().get(0);
		private final Assignment cIndexNamesAssignment_0_4_3_1 = (Assignment)cGroup_0_4_3.eContents().get(1);
		private final RuleCall cIndexNamesIndexNameParserRuleCall_0_4_3_1_0 = (RuleCall)cIndexNamesAssignment_0_4_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4_4 = (Keyword)cGroup_0_4.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLowerBoundsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLowerBoundsAISLExpressionParserRuleCall_1_1_0 = (RuleCall)cLowerBoundsAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cUpperBoundsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cUpperBoundsAISLExpressionParserRuleCall_1_3_0 = (RuleCall)cUpperBoundsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cLowerBoundsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cLowerBoundsAISLExpressionParserRuleCall_1_4_1_0 = (RuleCall)cLowerBoundsAssignment_1_4_1.eContents().get(0);
		private final Keyword cColonKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		private final Assignment cUpperBoundsAssignment_1_4_3 = (Assignment)cGroup_1_4.eContents().get(3);
		private final RuleCall cUpperBoundsAISLExpressionParserRuleCall_1_4_3_0 = (RuleCall)cUpperBoundsAssignment_1_4_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cAsKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final Assignment cIndexNamesAssignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cIndexNamesIndexNameParserRuleCall_1_6_2_0 = (RuleCall)cIndexNamesAssignment_1_6_2.eContents().get(0);
		private final Group cGroup_1_6_3 = (Group)cGroup_1_6.eContents().get(3);
		private final Keyword cCommaKeyword_1_6_3_0 = (Keyword)cGroup_1_6_3.eContents().get(0);
		private final Assignment cIndexNamesAssignment_1_6_3_1 = (Assignment)cGroup_1_6_3.eContents().get(1);
		private final RuleCall cIndexNamesIndexNameParserRuleCall_1_6_3_1_0 = (RuleCall)cIndexNamesAssignment_1_6_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_6_4 = (Keyword)cGroup_1_6.eContents().get(4);
		
		//RectangularDomain:
		//	'[' upperBounds+=AISLExpression (',' upperBounds+=AISLExpression)* ']' ('as' '[' indexNames+=IndexName (','
		//	indexNames+=IndexName)* ']')? |
		//	'[' lowerBounds+=AISLExpression ':' upperBounds+=AISLExpression (',' lowerBounds+=AISLExpression ':'
		//	upperBounds+=AISLExpression)* ']' ('as' '[' indexNames+=IndexName (',' indexNames+=IndexName)* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' upperBounds+=AISLExpression (',' upperBounds+=AISLExpression)* ']' ('as' '[' indexNames+=IndexName (','
		//indexNames+=IndexName)* ']')? | '[' lowerBounds+=AISLExpression ':' upperBounds+=AISLExpression (','
		//lowerBounds+=AISLExpression ':' upperBounds+=AISLExpression)* ']' ('as' '[' indexNames+=IndexName (','
		//indexNames+=IndexName)* ']')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' upperBounds+=AISLExpression (',' upperBounds+=AISLExpression)* ']' ('as' '[' indexNames+=IndexName (','
		//indexNames+=IndexName)* ']')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//upperBounds+=AISLExpression
		public Assignment getUpperBoundsAssignment_0_1() { return cUpperBoundsAssignment_0_1; }
		
		//AISLExpression
		public RuleCall getUpperBoundsAISLExpressionParserRuleCall_0_1_0() { return cUpperBoundsAISLExpressionParserRuleCall_0_1_0; }
		
		//(',' upperBounds+=AISLExpression)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//upperBounds+=AISLExpression
		public Assignment getUpperBoundsAssignment_0_2_1() { return cUpperBoundsAssignment_0_2_1; }
		
		//AISLExpression
		public RuleCall getUpperBoundsAISLExpressionParserRuleCall_0_2_1_0() { return cUpperBoundsAISLExpressionParserRuleCall_0_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }
		
		//('as' '[' indexNames+=IndexName (',' indexNames+=IndexName)* ']')?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'as'
		public Keyword getAsKeyword_0_4_0() { return cAsKeyword_0_4_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_4_1() { return cLeftSquareBracketKeyword_0_4_1; }
		
		//indexNames+=IndexName
		public Assignment getIndexNamesAssignment_0_4_2() { return cIndexNamesAssignment_0_4_2; }
		
		//IndexName
		public RuleCall getIndexNamesIndexNameParserRuleCall_0_4_2_0() { return cIndexNamesIndexNameParserRuleCall_0_4_2_0; }
		
		//(',' indexNames+=IndexName)*
		public Group getGroup_0_4_3() { return cGroup_0_4_3; }
		
		//','
		public Keyword getCommaKeyword_0_4_3_0() { return cCommaKeyword_0_4_3_0; }
		
		//indexNames+=IndexName
		public Assignment getIndexNamesAssignment_0_4_3_1() { return cIndexNamesAssignment_0_4_3_1; }
		
		//IndexName
		public RuleCall getIndexNamesIndexNameParserRuleCall_0_4_3_1_0() { return cIndexNamesIndexNameParserRuleCall_0_4_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_4_4() { return cRightSquareBracketKeyword_0_4_4; }
		
		//'[' lowerBounds+=AISLExpression ':' upperBounds+=AISLExpression (',' lowerBounds+=AISLExpression ':'
		//upperBounds+=AISLExpression)* ']' ('as' '[' indexNames+=IndexName (',' indexNames+=IndexName)* ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//lowerBounds+=AISLExpression
		public Assignment getLowerBoundsAssignment_1_1() { return cLowerBoundsAssignment_1_1; }
		
		//AISLExpression
		public RuleCall getLowerBoundsAISLExpressionParserRuleCall_1_1_0() { return cLowerBoundsAISLExpressionParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//upperBounds+=AISLExpression
		public Assignment getUpperBoundsAssignment_1_3() { return cUpperBoundsAssignment_1_3; }
		
		//AISLExpression
		public RuleCall getUpperBoundsAISLExpressionParserRuleCall_1_3_0() { return cUpperBoundsAISLExpressionParserRuleCall_1_3_0; }
		
		//(',' lowerBounds+=AISLExpression ':' upperBounds+=AISLExpression)*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//','
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }
		
		//lowerBounds+=AISLExpression
		public Assignment getLowerBoundsAssignment_1_4_1() { return cLowerBoundsAssignment_1_4_1; }
		
		//AISLExpression
		public RuleCall getLowerBoundsAISLExpressionParserRuleCall_1_4_1_0() { return cLowerBoundsAISLExpressionParserRuleCall_1_4_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_4_2() { return cColonKeyword_1_4_2; }
		
		//upperBounds+=AISLExpression
		public Assignment getUpperBoundsAssignment_1_4_3() { return cUpperBoundsAssignment_1_4_3; }
		
		//AISLExpression
		public RuleCall getUpperBoundsAISLExpressionParserRuleCall_1_4_3_0() { return cUpperBoundsAISLExpressionParserRuleCall_1_4_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_5() { return cRightSquareBracketKeyword_1_5; }
		
		//('as' '[' indexNames+=IndexName (',' indexNames+=IndexName)* ']')?
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//'as'
		public Keyword getAsKeyword_1_6_0() { return cAsKeyword_1_6_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_6_1() { return cLeftSquareBracketKeyword_1_6_1; }
		
		//indexNames+=IndexName
		public Assignment getIndexNamesAssignment_1_6_2() { return cIndexNamesAssignment_1_6_2; }
		
		//IndexName
		public RuleCall getIndexNamesIndexNameParserRuleCall_1_6_2_0() { return cIndexNamesIndexNameParserRuleCall_1_6_2_0; }
		
		//(',' indexNames+=IndexName)*
		public Group getGroup_1_6_3() { return cGroup_1_6_3; }
		
		//','
		public Keyword getCommaKeyword_1_6_3_0() { return cCommaKeyword_1_6_3_0; }
		
		//indexNames+=IndexName
		public Assignment getIndexNamesAssignment_1_6_3_1() { return cIndexNamesAssignment_1_6_3_1; }
		
		//IndexName
		public RuleCall getIndexNamesIndexNameParserRuleCall_1_6_3_1_0() { return cIndexNamesIndexNameParserRuleCall_1_6_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_6_4() { return cRightSquareBracketKeyword_1_6_4; }
	}
	public class DefinedObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.DefinedObject");
		private final Assignment cObjectAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cObjectPolyhedralObjectCrossReference_0 = (CrossReference)cObjectAssignment.eContents().get(0);
		private final RuleCall cObjectPolyhedralObjectIDTerminalRuleCall_0_1 = (RuleCall)cObjectPolyhedralObjectCrossReference_0.eContents().get(1);
		
		//DefinedObject:
		//	object=[PolyhedralObject];
		@Override public ParserRule getRule() { return rule; }
		
		//object=[PolyhedralObject]
		public Assignment getObjectAssignment() { return cObjectAssignment; }
		
		//[PolyhedralObject]
		public CrossReference getObjectPolyhedralObjectCrossReference_0() { return cObjectPolyhedralObjectCrossReference_0; }
		
		//ID
		public RuleCall getObjectPolyhedralObjectIDTerminalRuleCall_0_1() { return cObjectPolyhedralObjectIDTerminalRuleCall_0_1; }
	}
	public class AUnaryCalcOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.AUnaryCalcOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRangeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cComplementKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAffineHullKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPolyHullKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cReverseKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//AUnaryCalcOp CALCULATOR_UNARY_OP:
		//	'domain' | 'range' | 'complement' | 'affine-hull' | 'poly-hull' | 'reverse';
		@Override public ParserRule getRule() { return rule; }
		
		//'domain' | 'range' | 'complement' | 'affine-hull' | 'poly-hull' | 'reverse'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//'range'
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//'complement'
		public Keyword getComplementKeyword_2() { return cComplementKeyword_2; }
		
		//'affine-hull'
		public Keyword getAffineHullKeyword_3() { return cAffineHullKeyword_3; }
		
		//'poly-hull'
		public Keyword getPolyHullKeyword_4() { return cPolyHullKeyword_4; }
		
		//'reverse'
		public Keyword getReverseKeyword_5() { return cReverseKeyword_5; }
	}
	public class ABinaryCalcOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.ABinaryCalcOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCrossKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCommercialAtKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignHyphenMinusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignAsteriskKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//ABinaryCalcOp CALCULATOR_BINARY_OP:
		//	'cross' | '+' | '-' | '*' | '@' | '->-' | '->*';
		@Override public ParserRule getRule() { return rule; }
		
		//'cross' | '+' | '-' | '*' | '@' | '->-' | '->*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'cross'
		public Keyword getCrossKeyword_0() { return cCrossKeyword_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
		
		//'@'
		public Keyword getCommercialAtKeyword_4() { return cCommercialAtKeyword_4; }
		
		//'->-'
		public Keyword getHyphenMinusGreaterThanSignHyphenMinusKeyword_5() { return cHyphenMinusGreaterThanSignHyphenMinusKeyword_5; }
		
		//'->*'
		public Keyword getHyphenMinusGreaterThanSignAsteriskKeyword_6() { return cHyphenMinusGreaterThanSignAsteriskKeyword_6; }
	}
	
	
	private final AlphaRootElements pAlphaRoot;
	private final AlphaConstantElements pAlphaConstant;
	private final ExternalFunctionElements pExternalFunction;
	private final ImportsElements pImports;
	private final AlphaPackageElements pAlphaPackage;
	private final AlphaSystemElements pAlphaSystem;
	private final InputVariableElements pInputVariable;
	private final OutputVariableElements pOutputVariable;
	private final LocalVariableElements pLocalVariable;
	private final FuzzyInputVariableElements pFuzzyInputVariable;
	private final FuzzyOutputVariableElements pFuzzyOutputVariable;
	private final FuzzyLocalVariableElements pFuzzyLocalVariable;
	private final JNIDomainElements pJNIDomain;
	private final JNIDomainInArrayNotationElements pJNIDomainInArrayNotation;
	private final JNIParamDomainElements pJNIParamDomain;
	private final JNIRelationElements pJNIRelation;
	private final JNIFunctionElements pJNIFunction;
	private final JNIFunctionInArrayNotationElements pJNIFunctionInArrayNotation;
	private final FuzzyFunctionElements pFuzzyFunction;
	private final FuzzyVariableUseElements pFuzzyVariableUse;
	private final NestedFuzzyFunctionElements pNestedFuzzyFunction;
	private final AffineFuzzyVariableUseElements pAffineFuzzyVariableUse;
	private final FuzzyFunctionInArrayNotationElements pFuzzyFunctionInArrayNotation;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final SystemNameElements pSystemName;
	private final IndexNameElements pIndexName;
	private final AIndexListElements pAIndexList;
	private final AParamDomainElements pAParamDomain;
	private final AISLSetElements pAISLSet;
	private final AISLBasicSetElements pAISLBasicSet;
	private final AISLRelationElements pAISLRelation;
	private final AISLStringElements pAISLString;
	private final AISLExpressionElements pAISLExpression;
	private final AISLExpressionListElements pAISLExpressionList;
	private final AAlphaFunctionElements pAAlphaFunction;
	private final AISLBasicRelationElements pAISLBasicRelation;
	private final AISLWrappedBasicRelationElements pAISLWrappedBasicRelation;
	private final AISLFuzzyExpressionElements pAISLFuzzyExpression;
	private final StandardEquationElements pStandardEquation;
	private final UseEquationElements pUseEquation;
	private final UseExpressionElements pUseExpression;
	private final SubSystemCaseExpressionElements pSubSystemCaseExpression;
	private final SubSystemRestrictExpressionElements pSubSystemRestrictExpression;
	private final SubSystemCallExpressionElements pSubSystemCallExpression;
	private final AlphaExpressionElements pAlphaExpression;
	private final AlphaTerminalExpressionElements pAlphaTerminalExpression;
	private final ReductionsElements pReductions;
	private final IfExpressionElements pIfExpression;
	private final RestrictExpressionElements pRestrictExpression;
	private final AutoRestrictExpressionElements pAutoRestrictExpression;
	private final CaseExpressionElements pCaseExpression;
	private final DependenceExpressionElements pDependenceExpression;
	private final FuzzyDependenceExpressionElements pFuzzyDependenceExpression;
	private final IndexExpressionElements pIndexExpression;
	private final FuzzyIndexExpressionElements pFuzzyIndexExpression;
	private final ReduceExpressionElements pReduceExpression;
	private final ExternalReduceExpressionElements pExternalReduceExpression;
	private final ArgReduceExpressionElements pArgReduceExpression;
	private final ExternalArgReduceExpressionElements pExternalArgReduceExpression;
	private final FuzzyReduceExpressionElements pFuzzyReduceExpression;
	private final ExternalFuzzyReduceExpressionElements pExternalFuzzyReduceExpression;
	private final FuzzyArgReduceExpressionElements pFuzzyArgReduceExpression;
	private final ExternalFuzzyArgReduceExpressionElements pExternalFuzzyArgReduceExpression;
	private final ConvolutionExpressionElements pConvolutionExpression;
	private final SelectExpressionElements pSelectExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final MinMaxExpressionElements pMinMaxExpression;
	private final MultiArgExpressionElements pMultiArgExpression;
	private final ExternalMultiArgExpressionElements pExternalMultiArgExpression;
	private final UnaryOrTerminalExpressionElements pUnaryOrTerminalExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final VariableExpressionElements pVariableExpression;
	private final ConstantExpressionElements pConstantExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final IntegerExpressionElements pIntegerExpression;
	private final RealExpressionElements pRealExpression;
	private final AREDUCTION_OPElements pAREDUCTION_OP;
	private final AOrOPElements pAOrOP;
	private final AAndOPElements pAAndOP;
	private final ARelationalOPElements pARelationalOP;
	private final AAdditiveOPElements pAAdditiveOP;
	private final AMultiplicativeOPElements pAMultiplicativeOP;
	private final AMINMAX_OPElements pAMINMAX_OP;
	private final AUnaryOPElements pAUnaryOP;
	private final PolyhedralObjectElements pPolyhedralObject;
	private final CalculatorExpressionElements pCalculatorExpression;
	private final UnaryOrTerminalCalculatorExpressionElements pUnaryOrTerminalCalculatorExpression;
	private final CalculatorExpressionTerminalElements pCalculatorExpressionTerminal;
	private final UnaryCalculatorExpressionElements pUnaryCalculatorExpression;
	private final VariableDomainElements pVariableDomain;
	private final RectangularDomainElements pRectangularDomain;
	private final DefinedObjectElements pDefinedObject;
	private final AUnaryCalcOpElements pAUnaryCalcOp;
	private final ABinaryCalcOpElements pABinaryCalcOp;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tFLOAT;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AlphaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAlphaRoot = new AlphaRootElements();
		this.pAlphaConstant = new AlphaConstantElements();
		this.pExternalFunction = new ExternalFunctionElements();
		this.pImports = new ImportsElements();
		this.pAlphaPackage = new AlphaPackageElements();
		this.pAlphaSystem = new AlphaSystemElements();
		this.pInputVariable = new InputVariableElements();
		this.pOutputVariable = new OutputVariableElements();
		this.pLocalVariable = new LocalVariableElements();
		this.pFuzzyInputVariable = new FuzzyInputVariableElements();
		this.pFuzzyOutputVariable = new FuzzyOutputVariableElements();
		this.pFuzzyLocalVariable = new FuzzyLocalVariableElements();
		this.pJNIDomain = new JNIDomainElements();
		this.pJNIDomainInArrayNotation = new JNIDomainInArrayNotationElements();
		this.pJNIParamDomain = new JNIParamDomainElements();
		this.pJNIRelation = new JNIRelationElements();
		this.pJNIFunction = new JNIFunctionElements();
		this.pJNIFunctionInArrayNotation = new JNIFunctionInArrayNotationElements();
		this.pFuzzyFunction = new FuzzyFunctionElements();
		this.pFuzzyVariableUse = new FuzzyVariableUseElements();
		this.pNestedFuzzyFunction = new NestedFuzzyFunctionElements();
		this.pAffineFuzzyVariableUse = new AffineFuzzyVariableUseElements();
		this.pFuzzyFunctionInArrayNotation = new FuzzyFunctionInArrayNotationElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pSystemName = new SystemNameElements();
		this.pIndexName = new IndexNameElements();
		this.pAIndexList = new AIndexListElements();
		this.pAParamDomain = new AParamDomainElements();
		this.pAISLSet = new AISLSetElements();
		this.pAISLBasicSet = new AISLBasicSetElements();
		this.pAISLRelation = new AISLRelationElements();
		this.pAISLString = new AISLStringElements();
		this.pAISLExpression = new AISLExpressionElements();
		this.pAISLExpressionList = new AISLExpressionListElements();
		this.pAAlphaFunction = new AAlphaFunctionElements();
		this.pAISLBasicRelation = new AISLBasicRelationElements();
		this.pAISLWrappedBasicRelation = new AISLWrappedBasicRelationElements();
		this.pAISLFuzzyExpression = new AISLFuzzyExpressionElements();
		this.pStandardEquation = new StandardEquationElements();
		this.pUseEquation = new UseEquationElements();
		this.pUseExpression = new UseExpressionElements();
		this.pSubSystemCaseExpression = new SubSystemCaseExpressionElements();
		this.pSubSystemRestrictExpression = new SubSystemRestrictExpressionElements();
		this.pSubSystemCallExpression = new SubSystemCallExpressionElements();
		this.pAlphaExpression = new AlphaExpressionElements();
		this.pAlphaTerminalExpression = new AlphaTerminalExpressionElements();
		this.pReductions = new ReductionsElements();
		this.pIfExpression = new IfExpressionElements();
		this.pRestrictExpression = new RestrictExpressionElements();
		this.pAutoRestrictExpression = new AutoRestrictExpressionElements();
		this.pCaseExpression = new CaseExpressionElements();
		this.pDependenceExpression = new DependenceExpressionElements();
		this.pFuzzyDependenceExpression = new FuzzyDependenceExpressionElements();
		this.pIndexExpression = new IndexExpressionElements();
		this.pFuzzyIndexExpression = new FuzzyIndexExpressionElements();
		this.pReduceExpression = new ReduceExpressionElements();
		this.pExternalReduceExpression = new ExternalReduceExpressionElements();
		this.pArgReduceExpression = new ArgReduceExpressionElements();
		this.pExternalArgReduceExpression = new ExternalArgReduceExpressionElements();
		this.pFuzzyReduceExpression = new FuzzyReduceExpressionElements();
		this.pExternalFuzzyReduceExpression = new ExternalFuzzyReduceExpressionElements();
		this.pFuzzyArgReduceExpression = new FuzzyArgReduceExpressionElements();
		this.pExternalFuzzyArgReduceExpression = new ExternalFuzzyArgReduceExpressionElements();
		this.pConvolutionExpression = new ConvolutionExpressionElements();
		this.pSelectExpression = new SelectExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pMinMaxExpression = new MinMaxExpressionElements();
		this.pMultiArgExpression = new MultiArgExpressionElements();
		this.pExternalMultiArgExpression = new ExternalMultiArgExpressionElements();
		this.pUnaryOrTerminalExpression = new UnaryOrTerminalExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pVariableExpression = new VariableExpressionElements();
		this.pConstantExpression = new ConstantExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pIntegerExpression = new IntegerExpressionElements();
		this.pRealExpression = new RealExpressionElements();
		this.pAREDUCTION_OP = new AREDUCTION_OPElements();
		this.pAOrOP = new AOrOPElements();
		this.pAAndOP = new AAndOPElements();
		this.pARelationalOP = new ARelationalOPElements();
		this.pAAdditiveOP = new AAdditiveOPElements();
		this.pAMultiplicativeOP = new AMultiplicativeOPElements();
		this.pAMINMAX_OP = new AMINMAX_OPElements();
		this.pAUnaryOP = new AUnaryOPElements();
		this.pPolyhedralObject = new PolyhedralObjectElements();
		this.pCalculatorExpression = new CalculatorExpressionElements();
		this.pUnaryOrTerminalCalculatorExpression = new UnaryOrTerminalCalculatorExpressionElements();
		this.pCalculatorExpressionTerminal = new CalculatorExpressionTerminalElements();
		this.pUnaryCalculatorExpression = new UnaryCalculatorExpressionElements();
		this.pVariableDomain = new VariableDomainElements();
		this.pRectangularDomain = new RectangularDomainElements();
		this.pDefinedObject = new DefinedObjectElements();
		this.pAUnaryCalcOp = new AUnaryCalcOpElements();
		this.pABinaryCalcOp = new ABinaryCalcOpElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.BOOLEAN");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.FLOAT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.model.Alpha.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("alpha.model.Alpha".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AlphaRoot:
	//	imports+=Imports*
	//	elements+=(AlphaConstant | ExternalFunction | AlphaPackage | AlphaSystem)*;
	public AlphaRootElements getAlphaRootAccess() {
		return pAlphaRoot;
	}
	
	public ParserRule getAlphaRootRule() {
		return getAlphaRootAccess().getRule();
	}
	
	//AlphaConstant:
	//	'constant' name=ID '=' value=INT;
	public AlphaConstantElements getAlphaConstantAccess() {
		return pAlphaConstant;
	}
	
	public ParserRule getAlphaConstantRule() {
		return getAlphaConstantAccess().getRule();
	}
	
	//ExternalFunction:
	//	'external' name=ID '(' cardinality=INT ')';
	public ExternalFunctionElements getExternalFunctionAccess() {
		return pExternalFunction;
	}
	
	public ParserRule getExternalFunctionRule() {
		return getExternalFunctionAccess().getRule();
	}
	
	//Imports:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public ImportsElements getImportsAccess() {
		return pImports;
	}
	
	public ParserRule getImportsRule() {
		return getImportsAccess().getRule();
	}
	
	//AlphaPackage:
	//	'package' name=QualifiedName '{'
	//	elements+=(AlphaConstant | ExternalFunction | AlphaPackage | AlphaSystem)*
	//	'}';
	public AlphaPackageElements getAlphaPackageAccess() {
		return pAlphaPackage;
	}
	
	public ParserRule getAlphaPackageRule() {
		return getAlphaPackageAccess().getRule();
	}
	
	//AlphaSystem:
	//	'affine' name=SystemName parameterDomainExpr=JNIParamDomain ('define' definedObjects+=PolyhedralObject+)? ('inputs'
	//	(inputs+=InputVariable | inputs+=FuzzyInputVariable)+)? ('outputs' (outputs+=OutputVariable |
	//	outputs+=FuzzyOutputVariable)+)? ('locals' (locals+=LocalVariable | locals+=FuzzyLocalVariable)+)? ('over'
	//	whileDomainExpr=CalculatorExpression 'while' '(' testExpression=AlphaExpression ')')? ('let'
	//	useEquations+=UseEquation*
	//	equations+=StandardEquation*)?
	//	'.';
	public AlphaSystemElements getAlphaSystemAccess() {
		return pAlphaSystem;
	}
	
	public ParserRule getAlphaSystemRule() {
		return getAlphaSystemAccess().getRule();
	}
	
	//InputVariable Variable:
	//	name=ID ':' domainExpr=CalculatorExpression? ';'?;
	public InputVariableElements getInputVariableAccess() {
		return pInputVariable;
	}
	
	public ParserRule getInputVariableRule() {
		return getInputVariableAccess().getRule();
	}
	
	//OutputVariable Variable:
	//	name=ID ':' domainExpr=CalculatorExpression? ';'?;
	public OutputVariableElements getOutputVariableAccess() {
		return pOutputVariable;
	}
	
	public ParserRule getOutputVariableRule() {
		return getOutputVariableAccess().getRule();
	}
	
	//LocalVariable Variable:
	//	name=ID ':' domainExpr=CalculatorExpression? ';'?;
	public LocalVariableElements getLocalVariableAccess() {
		return pLocalVariable;
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}
	
	//FuzzyInputVariable FuzzyVariable:
	//	'fuzzy' name=ID ':' domainExpr=CalculatorExpression '->' rangeExpr=CalculatorExpression ';'?;
	public FuzzyInputVariableElements getFuzzyInputVariableAccess() {
		return pFuzzyInputVariable;
	}
	
	public ParserRule getFuzzyInputVariableRule() {
		return getFuzzyInputVariableAccess().getRule();
	}
	
	//FuzzyOutputVariable FuzzyVariable:
	//	'fuzzy' name=ID ':' domainExpr=CalculatorExpression '->' rangeExpr=CalculatorExpression ';'?;
	public FuzzyOutputVariableElements getFuzzyOutputVariableAccess() {
		return pFuzzyOutputVariable;
	}
	
	public ParserRule getFuzzyOutputVariableRule() {
		return getFuzzyOutputVariableAccess().getRule();
	}
	
	//FuzzyLocalVariable FuzzyVariable:
	//	'fuzzy' name=ID ':' domainExpr=CalculatorExpression '->' rangeExpr=CalculatorExpression ';'?;
	public FuzzyLocalVariableElements getFuzzyLocalVariableAccess() {
		return pFuzzyLocalVariable;
	}
	
	public ParserRule getFuzzyLocalVariableRule() {
		return getFuzzyLocalVariableAccess().getRule();
	}
	
	//JNIDomain:
	//	islString=AISLSet;
	public JNIDomainElements getJNIDomainAccess() {
		return pJNIDomain;
	}
	
	public ParserRule getJNIDomainRule() {
		return getJNIDomainAccess().getRule();
	}
	
	//JNIDomainInArrayNotation:
	//	'{' ':' islString=AISLString '}';
	public JNIDomainInArrayNotationElements getJNIDomainInArrayNotationAccess() {
		return pJNIDomainInArrayNotation;
	}
	
	public ParserRule getJNIDomainInArrayNotationRule() {
		return getJNIDomainInArrayNotationAccess().getRule();
	}
	
	//JNIParamDomain JNIDomain:
	//	islString=AParamDomain;
	public JNIParamDomainElements getJNIParamDomainAccess() {
		return pJNIParamDomain;
	}
	
	public ParserRule getJNIParamDomainRule() {
		return getJNIParamDomainAccess().getRule();
	}
	
	//JNIRelation:
	//	islString=AISLRelation;
	public JNIRelationElements getJNIRelationAccess() {
		return pJNIRelation;
	}
	
	public ParserRule getJNIRelationRule() {
		return getJNIRelationAccess().getRule();
	}
	
	//JNIFunction:
	//	alphaString=AAlphaFunction;
	public JNIFunctionElements getJNIFunctionAccess() {
		return pJNIFunction;
	}
	
	public ParserRule getJNIFunctionRule() {
		return getJNIFunctionAccess().getRule();
	}
	
	//JNIFunctionInArrayNotation:
	//	'[' {JNIFunctionInArrayNotation} (arrayNotation+=AISLExpression (',' arrayNotation+=AISLExpression)*)? ']';
	public JNIFunctionInArrayNotationElements getJNIFunctionInArrayNotationAccess() {
		return pJNIFunctionInArrayNotation;
	}
	
	public ParserRule getJNIFunctionInArrayNotationRule() {
		return getJNIFunctionInArrayNotationAccess().getRule();
	}
	
	//FuzzyFunction:
	//	'(' alphaString=AISLWrappedBasicRelation (';' indirections+=FuzzyVariableUse)* ')';
	public FuzzyFunctionElements getFuzzyFunctionAccess() {
		return pFuzzyFunction;
	}
	
	public ParserRule getFuzzyFunctionRule() {
		return getFuzzyFunctionAccess().getRule();
	}
	
	//FuzzyVariableUse:
	//	NestedFuzzyFunction | AffineFuzzyVariableUse;
	public FuzzyVariableUseElements getFuzzyVariableUseAccess() {
		return pFuzzyVariableUse;
	}
	
	public ParserRule getFuzzyVariableUseRule() {
		return getFuzzyVariableUseAccess().getRule();
	}
	
	//NestedFuzzyFunction:
	//	fuzzyIndex=IndexName '=' fuzzyVariable=[FuzzyVariable] '{' alphaString=AISLWrappedBasicRelation (';'
	//	indirections+=FuzzyVariableUse)* '}';
	public NestedFuzzyFunctionElements getNestedFuzzyFunctionAccess() {
		return pNestedFuzzyFunction;
	}
	
	public ParserRule getNestedFuzzyFunctionRule() {
		return getNestedFuzzyFunctionAccess().getRule();
	}
	
	//AffineFuzzyVariableUse:
	//	fuzzyIndex=IndexName '=' fuzzyVariable=[FuzzyVariable] useFunction=JNIFunctionInArrayNotation;
	public AffineFuzzyVariableUseElements getAffineFuzzyVariableUseAccess() {
		return pAffineFuzzyVariableUse;
	}
	
	public ParserRule getAffineFuzzyVariableUseRule() {
		return getAffineFuzzyVariableUseAccess().getRule();
	}
	
	//FuzzyFunctionInArrayNotation:
	//	'[[' {FuzzyFunctionInArrayNotation} (arrayNotation+=AISLFuzzyExpression (',' arrayNotation+=AISLFuzzyExpression)*)?
	//	']]';
	public FuzzyFunctionInArrayNotationElements getFuzzyFunctionInArrayNotationAccess() {
		return pFuzzyFunctionInArrayNotation;
	}
	
	public ParserRule getFuzzyFunctionInArrayNotationRule() {
		return getFuzzyFunctionInArrayNotationAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//SystemName:
	//	ID // ('-' ID)*
	//;
	public SystemNameElements getSystemNameAccess() {
		return pSystemName;
	}
	
	public ParserRule getSystemNameRule() {
		return getSystemNameAccess().getRule();
	}
	
	//IndexName:
	//	ID;
	public IndexNameElements getIndexNameAccess() {
		return pIndexName;
	}
	
	public ParserRule getIndexNameRule() {
		return getIndexNameAccess().getRule();
	}
	
	////IndexDimension:
	////	name=IndexName
	////;
	//AIndexList:
	//	(IndexName (',' IndexName)*)?;
	public AIndexListElements getAIndexListAccess() {
		return pAIndexList;
	}
	
	public ParserRule getAIndexListRule() {
		return getAIndexListAccess().getRule();
	}
	
	////ISL syntax defs
	//AParamDomain:
	//	'[' AIndexList ']' '->' '{' ':' AISLString '}';
	public AParamDomainElements getAParamDomainAccess() {
		return pAParamDomain;
	}
	
	public ParserRule getAParamDomainRule() {
		return getAParamDomainAccess().getRule();
	}
	
	//AISLSet:
	//	'{' AISLBasicSet (';' AISLBasicSet)* '}';
	public AISLSetElements getAISLSetAccess() {
		return pAISLSet;
	}
	
	public ParserRule getAISLSetRule() {
		return getAISLSetAccess().getRule();
	}
	
	//AISLBasicSet:
	//	'[' AISLExpressionList ']' ':' AISLString;
	public AISLBasicSetElements getAISLBasicSetAccess() {
		return pAISLBasicSet;
	}
	
	public ParserRule getAISLBasicSetRule() {
		return getAISLBasicSetAccess().getRule();
	}
	
	//AISLRelation:
	//	'{' AISLBasicRelation (';' AISLBasicRelation)* '}';
	public AISLRelationElements getAISLRelationAccess() {
		return pAISLRelation;
	}
	
	public ParserRule getAISLRelationRule() {
		return getAISLRelationAccess().getRule();
	}
	
	//AISLString:
	//	(IndexName | INT | '+' | '-' | '*' | '/' | '%' | 'and' | 'or' | '[' | ']' | '(' | ')' | ',' | ':' | '&' | '|' | WS |
	//	'>=' | '>' | '=' | '<' | '<=')*;
	public AISLStringElements getAISLStringAccess() {
		return pAISLString;
	}
	
	public ParserRule getAISLStringRule() {
		return getAISLStringAccess().getRule();
	}
	
	//AISLExpression:
	//	(IndexName | INT | '=' | '+' | '-' | '*' | '/' | '%' | WS)+;
	public AISLExpressionElements getAISLExpressionAccess() {
		return pAISLExpression;
	}
	
	public ParserRule getAISLExpressionRule() {
		return getAISLExpressionAccess().getRule();
	}
	
	//AISLExpressionList:
	//	(AISLExpression (',' AISLExpression)*)?;
	public AISLExpressionListElements getAISLExpressionListAccess() {
		return pAISLExpressionList;
	}
	
	public ParserRule getAISLExpressionListRule() {
		return getAISLExpressionListAccess().getRule();
	}
	
	//AAlphaFunction:
	//	'(' AIndexList '->' AISLExpressionList ')';
	public AAlphaFunctionElements getAAlphaFunctionAccess() {
		return pAAlphaFunction;
	}
	
	public ParserRule getAAlphaFunctionRule() {
		return getAAlphaFunctionAccess().getRule();
	}
	
	//AISLBasicRelation:
	//	'[' AISLExpressionList ']' '->' '[' AISLExpressionList ']' ':' AISLString;
	public AISLBasicRelationElements getAISLBasicRelationAccess() {
		return pAISLBasicRelation;
	}
	
	public ParserRule getAISLBasicRelationRule() {
		return getAISLBasicRelationAccess().getRule();
	}
	
	//AISLWrappedBasicRelation:
	//	'[' '[' AIndexList ']' '->' '[' AISLExpressionList ']' ']' '->' '[' AISLExpressionList ']';
	public AISLWrappedBasicRelationElements getAISLWrappedBasicRelationAccess() {
		return pAISLWrappedBasicRelation;
	}
	
	public ParserRule getAISLWrappedBasicRelationRule() {
		return getAISLWrappedBasicRelationAccess().getRule();
	}
	
	//AISLFuzzyExpression:
	//	(IndexName | INT | '[' | ']' | '=' | '+' | '-' | '*' | '/' | '%' | WS)+;
	public AISLFuzzyExpressionElements getAISLFuzzyExpressionAccess() {
		return pAISLFuzzyExpression;
	}
	
	public ParserRule getAISLFuzzyExpressionRule() {
		return getAISLFuzzyExpressionAccess().getRule();
	}
	
	////AIndexAffineExpression:	
	////	 '-'? AIndexAffineExpressionTerminal (('+'|'-') AIndexAffineExpression)*;
	////	
	////AIndexAffineExpressionTerminal:
	////	(INT | INT? IndexName);
	//StandardEquation:
	//	variable=[Variable] ('[' indexNames+=IndexName (',' indexNames+=IndexName)* ']')? '=' expr=AlphaExpression ';';
	public StandardEquationElements getStandardEquationAccess() {
		return pStandardEquation;
	}
	
	public ParserRule getStandardEquationRule() {
		return getStandardEquationAccess().getRule();
	}
	
	//UseEquation:
	//	('over' instantiationDomainExpr=CalculatorExpression ('with' ('[' subsystemDims+=IndexName (','
	//	subsystemDims+=IndexName)* ']')?)? ':')?
	//	expr=UseExpression
	//	';';
	public UseEquationElements getUseEquationAccess() {
		return pUseEquation;
	}
	
	public ParserRule getUseEquationRule() {
		return getUseEquationAccess().getRule();
	}
	
	//UseExpression:
	//	SubSystemCaseExpression | SubSystemRestrictExpression | SubSystemCallExpression;
	public UseExpressionElements getUseExpressionAccess() {
		return pUseExpression;
	}
	
	public ParserRule getUseExpressionRule() {
		return getUseExpressionAccess().getRule();
	}
	
	//SubSystemCaseExpression:
	//	'case' '{' (exprs+=UseExpression ';')+
	//	'}';
	public SubSystemCaseExpressionElements getSubSystemCaseExpressionAccess() {
		return pSubSystemCaseExpression;
	}
	
	public ParserRule getSubSystemCaseExpressionRule() {
		return getSubSystemCaseExpressionAccess().getRule();
	}
	
	//SubSystemRestrictExpression:
	//	domainExpr=(JNIDomain | JNIDomainInArrayNotation) ':' expr=UseExpression |
	//	'{' domainExpr=CalculatorExpression '}' ':' expr=UseExpression ';';
	public SubSystemRestrictExpressionElements getSubSystemRestrictExpressionAccess() {
		return pSubSystemRestrictExpression;
	}
	
	public ParserRule getSubSystemRestrictExpressionRule() {
		return getSubSystemRestrictExpressionAccess().getRule();
	}
	
	//SubSystemCallExpression:
	//	'(' (outputExprs+=AlphaExpression (',' outputExprs+=AlphaExpression)*)? ')'
	//	'='
	//	system=[AlphaSystem|QualifiedName] callParamsExpr=JNIFunctionInArrayNotation
	//	'(' (inputExprs+=AlphaExpression (',' inputExprs+=AlphaExpression)*)? ')';
	public SubSystemCallExpressionElements getSubSystemCallExpressionAccess() {
		return pSubSystemCallExpression;
	}
	
	public ParserRule getSubSystemCallExpressionRule() {
		return getSubSystemCallExpressionAccess().getRule();
	}
	
	///* Alpha Expressions */ AlphaExpression:
	//	IfExpression | RestrictExpression | AutoRestrictExpression | OrExpression;
	public AlphaExpressionElements getAlphaExpressionAccess() {
		return pAlphaExpression;
	}
	
	public ParserRule getAlphaExpressionRule() {
		return getAlphaExpressionAccess().getRule();
	}
	
	//AlphaTerminalExpression AlphaExpression:
	//	'(' AlphaExpression ')' | CaseExpression | ConstantExpression | VariableExpression | DependenceExpression |
	//	FuzzyDependenceExpression | IndexExpression | FuzzyIndexExpression | Reductions | ConvolutionExpression |
	//	MultiArgExpression | ExternalMultiArgExpression | SelectExpression;
	public AlphaTerminalExpressionElements getAlphaTerminalExpressionAccess() {
		return pAlphaTerminalExpression;
	}
	
	public ParserRule getAlphaTerminalExpressionRule() {
		return getAlphaTerminalExpressionAccess().getRule();
	}
	
	//Reductions AlphaExpression:
	//	ReduceExpression | ArgReduceExpression | ExternalReduceExpression | ExternalArgReduceExpression |
	//	FuzzyReduceExpression | FuzzyArgReduceExpression | ExternalFuzzyReduceExpression | ExternalFuzzyArgReduceExpression;
	public ReductionsElements getReductionsAccess() {
		return pReductions;
	}
	
	public ParserRule getReductionsRule() {
		return getReductionsAccess().getRule();
	}
	
	//IfExpression:
	//	'if' condExpr=AlphaExpression
	//	'then' thenExpr=AlphaExpression
	//	'else' elseExpr=AlphaExpression;
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//RestrictExpression:
	//	domainExpr=(JNIDomain | JNIDomainInArrayNotation) ':' expr=AlphaExpression |
	//	'{' domainExpr=CalculatorExpression '}' ':' expr=AlphaExpression;
	public RestrictExpressionElements getRestrictExpressionAccess() {
		return pRestrictExpression;
	}
	
	public ParserRule getRestrictExpressionRule() {
		return getRestrictExpressionAccess().getRule();
	}
	
	//AutoRestrictExpression:
	//	'auto' ':' expr=AlphaExpression;
	public AutoRestrictExpressionElements getAutoRestrictExpressionAccess() {
		return pAutoRestrictExpression;
	}
	
	public ParserRule getAutoRestrictExpressionRule() {
		return getAutoRestrictExpressionAccess().getRule();
	}
	
	//CaseExpression:
	//	'case' name=ID? '{' (exprs+=AlphaExpression ';')+
	//	'}';
	public CaseExpressionElements getCaseExpressionAccess() {
		return pCaseExpression;
	}
	
	public ParserRule getCaseExpressionRule() {
		return getCaseExpressionAccess().getRule();
	}
	
	//DependenceExpression:
	//	functionExpr=JNIFunction '@' expr=AlphaTerminalExpression | expr=VariableExpression
	//	functionExpr=JNIFunctionInArrayNotation | expr=ConstantExpression functionExpr=JNIFunctionInArrayNotation;
	public DependenceExpressionElements getDependenceExpressionAccess() {
		return pDependenceExpression;
	}
	
	public ParserRule getDependenceExpressionRule() {
		return getDependenceExpressionAccess().getRule();
	}
	
	//FuzzyDependenceExpression:
	//	fuzzyFunction=FuzzyFunction '@' expr=AlphaTerminalExpression | expr=VariableExpression
	//	fuzzyFunction=FuzzyFunctionInArrayNotation;
	public FuzzyDependenceExpressionElements getFuzzyDependenceExpressionAccess() {
		return pFuzzyDependenceExpression;
	}
	
	public ParserRule getFuzzyDependenceExpressionRule() {
		return getFuzzyDependenceExpressionAccess().getRule();
	}
	
	//IndexExpression:
	//	'val' functionExpr=JNIFunction | functionExpr=JNIFunctionInArrayNotation;
	public IndexExpressionElements getIndexExpressionAccess() {
		return pIndexExpression;
	}
	
	public ParserRule getIndexExpressionRule() {
		return getIndexExpressionAccess().getRule();
	}
	
	//FuzzyIndexExpression:
	//	'val' fuzzyFunction=FuzzyFunction | fuzzyFunction=FuzzyFunctionInArrayNotation;
	public FuzzyIndexExpressionElements getFuzzyIndexExpressionAccess() {
		return pFuzzyIndexExpression;
	}
	
	public ParserRule getFuzzyIndexExpressionRule() {
		return getFuzzyIndexExpressionAccess().getRule();
	}
	
	//ReduceExpression:
	//	'reduce' '(' operator=AREDUCTION_OP ','
	//	projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
	//	body=AlphaExpression
	//	')';
	public ReduceExpressionElements getReduceExpressionAccess() {
		return pReduceExpression;
	}
	
	public ParserRule getReduceExpressionRule() {
		return getReduceExpressionAccess().getRule();
	}
	
	//ExternalReduceExpression:
	//	'reduce' '(' externalFunction=[ExternalFunction|QualifiedName] ','
	//	projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
	//	body=AlphaExpression
	//	')';
	public ExternalReduceExpressionElements getExternalReduceExpressionAccess() {
		return pExternalReduceExpression;
	}
	
	public ParserRule getExternalReduceExpressionRule() {
		return getExternalReduceExpressionAccess().getRule();
	}
	
	//ArgReduceExpression:
	//	'argreduce' '(' operator=AREDUCTION_OP ','
	//	projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
	//	body=AlphaExpression
	//	')';
	public ArgReduceExpressionElements getArgReduceExpressionAccess() {
		return pArgReduceExpression;
	}
	
	public ParserRule getArgReduceExpressionRule() {
		return getArgReduceExpressionAccess().getRule();
	}
	
	//ExternalArgReduceExpression:
	//	'argreduce' '(' externalFunction=[ExternalFunction|QualifiedName] ','
	//	projectionExpr=(JNIFunction | JNIFunctionInArrayNotation) ','
	//	body=AlphaExpression
	//	')';
	public ExternalArgReduceExpressionElements getExternalArgReduceExpressionAccess() {
		return pExternalArgReduceExpression;
	}
	
	public ParserRule getExternalArgReduceExpressionRule() {
		return getExternalArgReduceExpressionAccess().getRule();
	}
	
	//FuzzyReduceExpression:
	//	'reduce' '(' operator=AREDUCTION_OP ','
	//	projectionFunction=FuzzyFunction ','
	//	body=AlphaExpression
	//	')';
	public FuzzyReduceExpressionElements getFuzzyReduceExpressionAccess() {
		return pFuzzyReduceExpression;
	}
	
	public ParserRule getFuzzyReduceExpressionRule() {
		return getFuzzyReduceExpressionAccess().getRule();
	}
	
	//ExternalFuzzyReduceExpression:
	//	'reduce' '(' externalFunction=[ExternalFunction|QualifiedName] ','
	//	projectionFunction=FuzzyFunction ','
	//	body=AlphaExpression
	//	')';
	public ExternalFuzzyReduceExpressionElements getExternalFuzzyReduceExpressionAccess() {
		return pExternalFuzzyReduceExpression;
	}
	
	public ParserRule getExternalFuzzyReduceExpressionRule() {
		return getExternalFuzzyReduceExpressionAccess().getRule();
	}
	
	//FuzzyArgReduceExpression:
	//	'argreduce' '(' operator=AREDUCTION_OP ','
	//	projectionFunction=FuzzyFunction ','
	//	body=AlphaExpression
	//	')';
	public FuzzyArgReduceExpressionElements getFuzzyArgReduceExpressionAccess() {
		return pFuzzyArgReduceExpression;
	}
	
	public ParserRule getFuzzyArgReduceExpressionRule() {
		return getFuzzyArgReduceExpressionAccess().getRule();
	}
	
	//ExternalFuzzyArgReduceExpression:
	//	'argreduce' '(' externalFunction=[ExternalFunction|QualifiedName] ','
	//	projectionFunction=FuzzyFunction ','
	//	body=AlphaExpression
	//	')';
	public ExternalFuzzyArgReduceExpressionElements getExternalFuzzyArgReduceExpressionAccess() {
		return pExternalFuzzyArgReduceExpression;
	}
	
	public ParserRule getExternalFuzzyArgReduceExpressionRule() {
		return getExternalFuzzyArgReduceExpressionAccess().getRule();
	}
	
	//ConvolutionExpression:
	//	'conv' '(' kernelDomainExpr=CalculatorExpression ','
	//	kernelExpression=AlphaExpression ','
	//	dataExpression=AlphaExpression
	//	')';
	public ConvolutionExpressionElements getConvolutionExpressionAccess() {
		return pConvolutionExpression;
	}
	
	public ParserRule getConvolutionExpressionRule() {
		return getConvolutionExpressionAccess().getRule();
	}
	
	//SelectExpression:
	//	'select' relationExpr=CalculatorExpression 'from' expr=AlphaTerminalExpression;
	public SelectExpressionElements getSelectExpressionAccess() {
		return pSelectExpression;
	}
	
	public ParserRule getSelectExpressionRule() {
		return getSelectExpressionAccess().getRule();
	}
	
	//OrExpression AlphaExpression:
	//	AndExpression ({BinaryExpression.left=current} operator=AOrOP right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression AlphaExpression:
	//	RelationalExpression ({BinaryExpression.left=current} operator=AAndOP right=RelationalExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//RelationalExpression AlphaExpression:
	//	AdditiveExpression ({BinaryExpression.left=current} operator=ARelationalOP right=AdditiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//AdditiveExpression AlphaExpression:
	//	MultiplicativeExpression ({BinaryExpression.left=current} operator=AAdditiveOP right=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression AlphaExpression:
	//	MinMaxExpression ({BinaryExpression.left=current} operator=AMultiplicativeOP right=MinMaxExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//MinMaxExpression AlphaExpression:
	//	UnaryOrTerminalExpression ({BinaryExpression.left=current} operator=AMINMAX_OP right=UnaryOrTerminalExpression)*;
	public MinMaxExpressionElements getMinMaxExpressionAccess() {
		return pMinMaxExpression;
	}
	
	public ParserRule getMinMaxExpressionRule() {
		return getMinMaxExpressionAccess().getRule();
	}
	
	//MultiArgExpression:
	//	operator=AREDUCTION_OP '(' exprs+=AlphaExpression (',' exprs+=AlphaExpression)* ')';
	public MultiArgExpressionElements getMultiArgExpressionAccess() {
		return pMultiArgExpression;
	}
	
	public ParserRule getMultiArgExpressionRule() {
		return getMultiArgExpressionAccess().getRule();
	}
	
	//ExternalMultiArgExpression:
	//	externalFunction=[ExternalFunction|QualifiedName] '(' exprs+=AlphaExpression (',' exprs+=AlphaExpression)* ')';
	public ExternalMultiArgExpressionElements getExternalMultiArgExpressionAccess() {
		return pExternalMultiArgExpression;
	}
	
	public ParserRule getExternalMultiArgExpressionRule() {
		return getExternalMultiArgExpressionAccess().getRule();
	}
	
	//UnaryOrTerminalExpression AlphaExpression:
	//	UnaryExpression | AlphaTerminalExpression;
	public UnaryOrTerminalExpressionElements getUnaryOrTerminalExpressionAccess() {
		return pUnaryOrTerminalExpression;
	}
	
	public ParserRule getUnaryOrTerminalExpressionRule() {
		return getUnaryOrTerminalExpressionAccess().getRule();
	}
	
	//UnaryExpression:
	//	operator=AUnaryOP expr=AlphaTerminalExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//VariableExpression:
	//	variable=[Variable];
	public VariableExpressionElements getVariableExpressionAccess() {
		return pVariableExpression;
	}
	
	public ParserRule getVariableExpressionRule() {
		return getVariableExpressionAccess().getRule();
	}
	
	//ConstantExpression:
	//	BooleanExpression | RealExpression | IntegerExpression;
	public ConstantExpressionElements getConstantExpressionAccess() {
		return pConstantExpression;
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}
	
	//BooleanExpression:
	//	value=BOOLEAN;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//IntegerExpression:
	//	value=INT;
	public IntegerExpressionElements getIntegerExpressionAccess() {
		return pIntegerExpression;
	}
	
	public ParserRule getIntegerExpressionRule() {
		return getIntegerExpressionAccess().getRule();
	}
	
	//RealExpression:
	//	value=FLOAT;
	public RealExpressionElements getRealExpressionAccess() {
		return pRealExpression;
	}
	
	public ParserRule getRealExpressionRule() {
		return getRealExpressionAccess().getRule();
	}
	
	//AREDUCTION_OP REDUCTION_OP:
	//	"min" | "max" | "prod" | "sum" | "and" | "or" | "xor" | "+" | "*";
	public AREDUCTION_OPElements getAREDUCTION_OPAccess() {
		return pAREDUCTION_OP;
	}
	
	public ParserRule getAREDUCTION_OPRule() {
		return getAREDUCTION_OPAccess().getRule();
	}
	
	//AOrOP BINARY_OP:
	//	"or" | "xor";
	public AOrOPElements getAOrOPAccess() {
		return pAOrOP;
	}
	
	public ParserRule getAOrOPRule() {
		return getAOrOPAccess().getRule();
	}
	
	//AAndOP BINARY_OP:
	//	"and";
	public AAndOPElements getAAndOPAccess() {
		return pAAndOP;
	}
	
	public ParserRule getAAndOPRule() {
		return getAAndOPAccess().getRule();
	}
	
	//ARelationalOP BINARY_OP:
	//	"=" | "!=" | ">=" | ">" | "<" | "<=";
	public ARelationalOPElements getARelationalOPAccess() {
		return pARelationalOP;
	}
	
	public ParserRule getARelationalOPRule() {
		return getARelationalOPAccess().getRule();
	}
	
	//AAdditiveOP BINARY_OP:
	//	"+" | "-";
	public AAdditiveOPElements getAAdditiveOPAccess() {
		return pAAdditiveOP;
	}
	
	public ParserRule getAAdditiveOPRule() {
		return getAAdditiveOPAccess().getRule();
	}
	
	//AMultiplicativeOP BINARY_OP:
	//	"*" | "/";
	public AMultiplicativeOPElements getAMultiplicativeOPAccess() {
		return pAMultiplicativeOP;
	}
	
	public ParserRule getAMultiplicativeOPRule() {
		return getAMultiplicativeOPAccess().getRule();
	}
	
	//AMINMAX_OP BINARY_OP:
	//	"min" | "max";
	public AMINMAX_OPElements getAMINMAX_OPAccess() {
		return pAMINMAX_OP;
	}
	
	public ParserRule getAMINMAX_OPRule() {
		return getAMINMAX_OPAccess().getRule();
	}
	
	//AUnaryOP UNARY_OP:
	//	"not" | "-";
	public AUnaryOPElements getAUnaryOPAccess() {
		return pAUnaryOP;
	}
	
	public ParserRule getAUnaryOPRule() {
		return getAUnaryOPAccess().getRule();
	}
	
	///* Calculator Expressions */ PolyhedralObject:
	//	name=ID '=' expr=CalculatorExpression;
	public PolyhedralObjectElements getPolyhedralObjectAccess() {
		return pPolyhedralObject;
	}
	
	public ParserRule getPolyhedralObjectRule() {
		return getPolyhedralObjectAccess().getRule();
	}
	
	//CalculatorExpression:
	//	UnaryOrTerminalCalculatorExpression ({BinaryCalculatorExpression.left=current} operator=ABinaryCalcOp
	//	right=UnaryOrTerminalCalculatorExpression)*;
	public CalculatorExpressionElements getCalculatorExpressionAccess() {
		return pCalculatorExpression;
	}
	
	public ParserRule getCalculatorExpressionRule() {
		return getCalculatorExpressionAccess().getRule();
	}
	
	//UnaryOrTerminalCalculatorExpression CalculatorExpression:
	//	UnaryCalculatorExpression | CalculatorExpressionTerminal;
	public UnaryOrTerminalCalculatorExpressionElements getUnaryOrTerminalCalculatorExpressionAccess() {
		return pUnaryOrTerminalCalculatorExpression;
	}
	
	public ParserRule getUnaryOrTerminalCalculatorExpressionRule() {
		return getUnaryOrTerminalCalculatorExpressionAccess().getRule();
	}
	
	//CalculatorExpressionTerminal CalculatorExpression:
	//	JNIDomain | JNIRelation | JNIFunction | DefinedObject | RectangularDomain | VariableDomain |
	//	'(' CalculatorExpression ')';
	public CalculatorExpressionTerminalElements getCalculatorExpressionTerminalAccess() {
		return pCalculatorExpressionTerminal;
	}
	
	public ParserRule getCalculatorExpressionTerminalRule() {
		return getCalculatorExpressionTerminalAccess().getRule();
	}
	
	//UnaryCalculatorExpression:
	//	operator=AUnaryCalcOp expr=CalculatorExpressionTerminal;
	public UnaryCalculatorExpressionElements getUnaryCalculatorExpressionAccess() {
		return pUnaryCalculatorExpression;
	}
	
	public ParserRule getUnaryCalculatorExpressionRule() {
		return getUnaryCalculatorExpressionAccess().getRule();
	}
	
	//VariableDomain:
	//	'{' variable=[Variable] '}';
	public VariableDomainElements getVariableDomainAccess() {
		return pVariableDomain;
	}
	
	public ParserRule getVariableDomainRule() {
		return getVariableDomainAccess().getRule();
	}
	
	//RectangularDomain:
	//	'[' upperBounds+=AISLExpression (',' upperBounds+=AISLExpression)* ']' ('as' '[' indexNames+=IndexName (','
	//	indexNames+=IndexName)* ']')? |
	//	'[' lowerBounds+=AISLExpression ':' upperBounds+=AISLExpression (',' lowerBounds+=AISLExpression ':'
	//	upperBounds+=AISLExpression)* ']' ('as' '[' indexNames+=IndexName (',' indexNames+=IndexName)* ']')?;
	public RectangularDomainElements getRectangularDomainAccess() {
		return pRectangularDomain;
	}
	
	public ParserRule getRectangularDomainRule() {
		return getRectangularDomainAccess().getRule();
	}
	
	//DefinedObject:
	//	object=[PolyhedralObject];
	public DefinedObjectElements getDefinedObjectAccess() {
		return pDefinedObject;
	}
	
	public ParserRule getDefinedObjectRule() {
		return getDefinedObjectAccess().getRule();
	}
	
	//AUnaryCalcOp CALCULATOR_UNARY_OP:
	//	'domain' | 'range' | 'complement' | 'affine-hull' | 'poly-hull' | 'reverse';
	public AUnaryCalcOpElements getAUnaryCalcOpAccess() {
		return pAUnaryCalcOp;
	}
	
	public ParserRule getAUnaryCalcOpRule() {
		return getAUnaryCalcOpAccess().getRule();
	}
	
	//ABinaryCalcOp CALCULATOR_BINARY_OP:
	//	'cross' | '+' | '-' | '*' | '@' | '->-' | '->*';
	public ABinaryCalcOpElements getABinaryCalcOpAccess() {
		return pABinaryCalcOp;
	}
	
	public ParserRule getABinaryCalcOpRule() {
		return getABinaryCalcOpAccess().getRule();
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	'0'..'9'+ '.' '0'..'9'+;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* |
	//	"'" ('a'..'z' | 'A'..'Z' | '~' | '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '-' | '_' | '+' | '=' |
	//	'|' | '/' | '?' | '0'..'9')+ "'";
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
