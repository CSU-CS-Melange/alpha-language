/*
 * generated by Xtext 2.14.0
 */
grammar InternalAlpha;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package alpha.model.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package alpha.model.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import alpha.model.services.AlphaGrammarAccess;

}

@parser::members {

 	private AlphaGrammarAccess grammarAccess;

    public InternalAlphaParser(TokenStream input, AlphaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "AlphaRoot";
   	}

   	@Override
   	protected AlphaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAlphaRoot
entryRuleAlphaRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlphaRootRule()); }
	iv_ruleAlphaRoot=ruleAlphaRoot
	{ $current=$iv_ruleAlphaRoot.current; }
	EOF;

// Rule AlphaRoot
ruleAlphaRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAlphaRootAccess().getElementsAlphaConstantParserRuleCall_0_0());
				}
				lv_elements_0_1=ruleAlphaConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlphaRootRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_1,
						"alpha.model.Alpha.AlphaConstant");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getAlphaRootAccess().getElementsExternalFunctionParserRuleCall_0_1());
				}
				lv_elements_0_2=ruleExternalFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlphaRootRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_2,
						"alpha.model.Alpha.ExternalFunction");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getAlphaRootAccess().getElementsImportsParserRuleCall_0_2());
				}
				lv_elements_0_3=ruleImports
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlphaRootRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_3,
						"alpha.model.Alpha.Imports");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getAlphaRootAccess().getElementsAlphaPackageParserRuleCall_0_3());
				}
				lv_elements_0_4=ruleAlphaPackage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlphaRootRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_4,
						"alpha.model.Alpha.AlphaPackage");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getAlphaRootAccess().getElementsAlphaSystemParserRuleCall_0_4());
				}
				lv_elements_0_5=ruleAlphaSystem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlphaRootRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_5,
						"alpha.model.Alpha.AlphaSystem");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleAlphaConstant
entryRuleAlphaConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlphaConstantRule()); }
	iv_ruleAlphaConstant=ruleAlphaConstant
	{ $current=$iv_ruleAlphaConstant.current; }
	EOF;

// Rule AlphaConstant
ruleAlphaConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constant'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlphaConstantAccess().getConstantKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAlphaConstantAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlphaConstantRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"alpha.model.Alpha.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getAlphaConstantAccess().getEqualsSignKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_INT
				{
					newLeafNode(lv_value_3_0, grammarAccess.getAlphaConstantAccess().getValueINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlphaConstantRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleExternalFunction
entryRuleExternalFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalFunctionRule()); }
	iv_ruleExternalFunction=ruleExternalFunction
	{ $current=$iv_ruleExternalFunction.current; }
	EOF;

// Rule ExternalFunction
ruleExternalFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='external'
		{
			newLeafNode(otherlv_0, grammarAccess.getExternalFunctionAccess().getExternalKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExternalFunctionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"alpha.model.Alpha.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getExternalFunctionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_cardinality_3_0=RULE_INT
				{
					newLeafNode(lv_cardinality_3_0, grammarAccess.getExternalFunctionAccess().getCardinalityINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"cardinality",
						lv_cardinality_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getExternalFunctionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleImports
entryRuleImports returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportsRule()); }
	iv_ruleImports=ruleImports
	{ $current=$iv_ruleImports.current; }
	EOF;

// Rule Imports
ruleImports returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportsAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportsAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportsRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"alpha.model.Alpha.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAlphaPackage
entryRuleAlphaPackage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlphaPackageRule()); }
	iv_ruleAlphaPackage=ruleAlphaPackage
	{ $current=$iv_ruleAlphaPackage.current; }
	EOF;

// Rule AlphaPackage
ruleAlphaPackage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlphaPackageAccess().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlphaPackageAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlphaPackageRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"alpha.model.Alpha.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAlphaPackageAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAlphaPackageAccess().getElementsAlphaConstantParserRuleCall_3_0_0());
					}
					lv_elements_3_1=ruleAlphaConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlphaPackageRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_1,
							"alpha.model.Alpha.AlphaConstant");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAlphaPackageAccess().getElementsExternalFunctionParserRuleCall_3_0_1());
					}
					lv_elements_3_2=ruleExternalFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlphaPackageRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_2,
							"alpha.model.Alpha.ExternalFunction");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAlphaPackageAccess().getElementsAlphaPackageParserRuleCall_3_0_2());
					}
					lv_elements_3_3=ruleAlphaPackage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlphaPackageRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_3,
							"alpha.model.Alpha.AlphaPackage");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAlphaPackageAccess().getElementsAlphaSystemParserRuleCall_3_0_3());
					}
					lv_elements_3_4=ruleAlphaSystem
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlphaPackageRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_4,
							"alpha.model.Alpha.AlphaSystem");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getAlphaPackageAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAlphaSystem
entryRuleAlphaSystem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlphaSystemRule()); }
	iv_ruleAlphaSystem=ruleAlphaSystem
	{ $current=$iv_ruleAlphaSystem.current; }
	EOF;

// Rule AlphaSystem
ruleAlphaSystem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='affine'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlphaSystemAccess().getAffineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlphaSystemAccess().getNameSystemNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleSystemName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlphaSystemRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"alpha.model.Alpha.SystemName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAlphaSystemAccess().getParameterDomainExprJNIParamDomainParserRuleCall_2_0());
				}
				lv_parameterDomainExpr_2_0=ruleJNIParamDomain
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlphaSystemRule());
					}
					set(
						$current,
						"parameterDomainExpr",
						lv_parameterDomainExpr_2_0,
						"alpha.model.Alpha.JNIParamDomain");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='define'
			{
				newLeafNode(otherlv_3, grammarAccess.getAlphaSystemAccess().getDefineKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAlphaSystemAccess().getDefinedObjectsPolyhedralObjectParserRuleCall_3_1_0());
					}
					lv_definedObjects_4_0=rulePolyhedralObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlphaSystemRule());
						}
						add(
							$current,
							"definedObjects",
							lv_definedObjects_4_0,
							"alpha.model.Alpha.PolyhedralObject");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		(
			otherlv_5='inputs'
			{
				newLeafNode(otherlv_5, grammarAccess.getAlphaSystemAccess().getInputsKeyword_4_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAlphaSystemAccess().getInputsInputVariableParserRuleCall_4_1_0_0());
						}
						lv_inputs_6_0=ruleInputVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAlphaSystemRule());
							}
							add(
								$current,
								"inputs",
								lv_inputs_6_0,
								"alpha.model.Alpha.InputVariable");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getAlphaSystemAccess().getInputsFuzzyInputVariableParserRuleCall_4_1_1_0());
						}
						lv_inputs_7_0=ruleFuzzyInputVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAlphaSystemRule());
							}
							add(
								$current,
								"inputs",
								lv_inputs_7_0,
								"alpha.model.Alpha.FuzzyInputVariable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
		(
			otherlv_8='outputs'
			{
				newLeafNode(otherlv_8, grammarAccess.getAlphaSystemAccess().getOutputsKeyword_5_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAlphaSystemAccess().getOutputsOutputVariableParserRuleCall_5_1_0_0());
						}
						lv_outputs_9_0=ruleOutputVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAlphaSystemRule());
							}
							add(
								$current,
								"outputs",
								lv_outputs_9_0,
								"alpha.model.Alpha.OutputVariable");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getAlphaSystemAccess().getOutputsFuzzyOutputVariableParserRuleCall_5_1_1_0());
						}
						lv_outputs_10_0=ruleFuzzyOutputVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAlphaSystemRule());
							}
							add(
								$current,
								"outputs",
								lv_outputs_10_0,
								"alpha.model.Alpha.FuzzyOutputVariable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
		(
			otherlv_11='locals'
			{
				newLeafNode(otherlv_11, grammarAccess.getAlphaSystemAccess().getLocalsKeyword_6_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAlphaSystemAccess().getLocalsLocalVariableParserRuleCall_6_1_0_0());
						}
						lv_locals_12_0=ruleLocalVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAlphaSystemRule());
							}
							add(
								$current,
								"locals",
								lv_locals_12_0,
								"alpha.model.Alpha.LocalVariable");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getAlphaSystemAccess().getLocalsFuzzyLocalVariableParserRuleCall_6_1_1_0());
						}
						lv_locals_13_0=ruleFuzzyLocalVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAlphaSystemRule());
							}
							add(
								$current,
								"locals",
								lv_locals_13_0,
								"alpha.model.Alpha.FuzzyLocalVariable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
		(
			otherlv_14='over'
			{
				newLeafNode(otherlv_14, grammarAccess.getAlphaSystemAccess().getOverKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAlphaSystemAccess().getWhileDomainExprCalculatorExpressionParserRuleCall_7_1_0());
					}
					lv_whileDomainExpr_15_0=ruleCalculatorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlphaSystemRule());
						}
						set(
							$current,
							"whileDomainExpr",
							lv_whileDomainExpr_15_0,
							"alpha.model.Alpha.CalculatorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_16='while'
			{
				newLeafNode(otherlv_16, grammarAccess.getAlphaSystemAccess().getWhileKeyword_7_2());
			}
			otherlv_17='('
			{
				newLeafNode(otherlv_17, grammarAccess.getAlphaSystemAccess().getLeftParenthesisKeyword_7_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAlphaSystemAccess().getTestExpressionAlphaExpressionParserRuleCall_7_4_0());
					}
					lv_testExpression_18_0=ruleAlphaExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlphaSystemRule());
						}
						set(
							$current,
							"testExpression",
							lv_testExpression_18_0,
							"alpha.model.Alpha.AlphaExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_19=')'
			{
				newLeafNode(otherlv_19, grammarAccess.getAlphaSystemAccess().getRightParenthesisKeyword_7_5());
			}
		)?
		(
			otherlv_20='let'
			{
				newLeafNode(otherlv_20, grammarAccess.getAlphaSystemAccess().getLetKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAlphaSystemAccess().getUseEquationsUseEquationParserRuleCall_8_1_0());
					}
					lv_useEquations_21_0=ruleUseEquation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlphaSystemRule());
						}
						add(
							$current,
							"useEquations",
							lv_useEquations_21_0,
							"alpha.model.Alpha.UseEquation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getAlphaSystemAccess().getEquationsStandardEquationParserRuleCall_8_2_0());
					}
					lv_equations_22_0=ruleStandardEquation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlphaSystemRule());
						}
						add(
							$current,
							"equations",
							lv_equations_22_0,
							"alpha.model.Alpha.StandardEquation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_23='.'
		{
			newLeafNode(otherlv_23, grammarAccess.getAlphaSystemAccess().getFullStopKeyword_9());
		}
	)
;

// Entry rule entryRuleInputVariable
entryRuleInputVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputVariableRule()); }
	iv_ruleInputVariable=ruleInputVariable
	{ $current=$iv_ruleInputVariable.current; }
	EOF;

// Rule InputVariable
ruleInputVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getInputVariableAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"alpha.model.Alpha.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getInputVariableAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInputVariableAccess().getDomainExprCalculatorExpressionParserRuleCall_2_0());
				}
				lv_domainExpr_2_0=ruleCalculatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputVariableRule());
					}
					set(
						$current,
						"domainExpr",
						lv_domainExpr_2_0,
						"alpha.model.Alpha.CalculatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getInputVariableAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleOutputVariable
entryRuleOutputVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputVariableRule()); }
	iv_ruleOutputVariable=ruleOutputVariable
	{ $current=$iv_ruleOutputVariable.current; }
	EOF;

// Rule OutputVariable
ruleOutputVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getOutputVariableAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"alpha.model.Alpha.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputVariableAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputVariableAccess().getDomainExprCalculatorExpressionParserRuleCall_2_0());
				}
				lv_domainExpr_2_0=ruleCalculatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputVariableRule());
					}
					set(
						$current,
						"domainExpr",
						lv_domainExpr_2_0,
						"alpha.model.Alpha.CalculatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getOutputVariableAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleLocalVariable
entryRuleLocalVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocalVariableRule()); }
	iv_ruleLocalVariable=ruleLocalVariable
	{ $current=$iv_ruleLocalVariable.current; }
	EOF;

// Rule LocalVariable
ruleLocalVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLocalVariableAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLocalVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"alpha.model.Alpha.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getLocalVariableAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLocalVariableAccess().getDomainExprCalculatorExpressionParserRuleCall_2_0());
				}
				lv_domainExpr_2_0=ruleCalculatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocalVariableRule());
					}
					set(
						$current,
						"domainExpr",
						lv_domainExpr_2_0,
						"alpha.model.Alpha.CalculatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getLocalVariableAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleFuzzyInputVariable
entryRuleFuzzyInputVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuzzyInputVariableRule()); }
	iv_ruleFuzzyInputVariable=ruleFuzzyInputVariable
	{ $current=$iv_ruleFuzzyInputVariable.current; }
	EOF;

// Rule FuzzyInputVariable
ruleFuzzyInputVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fuzzy'
		{
			newLeafNode(otherlv_0, grammarAccess.getFuzzyInputVariableAccess().getFuzzyKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFuzzyInputVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFuzzyInputVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"alpha.model.Alpha.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFuzzyInputVariableAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyInputVariableAccess().getDomainExprCalculatorExpressionParserRuleCall_3_0());
				}
				lv_domainExpr_3_0=ruleCalculatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyInputVariableRule());
					}
					set(
						$current,
						"domainExpr",
						lv_domainExpr_3_0,
						"alpha.model.Alpha.CalculatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='->'
		{
			newLeafNode(otherlv_4, grammarAccess.getFuzzyInputVariableAccess().getHyphenMinusGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyInputVariableAccess().getRangeExprCalculatorExpressionParserRuleCall_5_0());
				}
				lv_rangeExpr_5_0=ruleCalculatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyInputVariableRule());
					}
					set(
						$current,
						"rangeExpr",
						lv_rangeExpr_5_0,
						"alpha.model.Alpha.CalculatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getFuzzyInputVariableAccess().getSemicolonKeyword_6());
			}
		)?
	)
;

// Entry rule entryRuleFuzzyOutputVariable
entryRuleFuzzyOutputVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuzzyOutputVariableRule()); }
	iv_ruleFuzzyOutputVariable=ruleFuzzyOutputVariable
	{ $current=$iv_ruleFuzzyOutputVariable.current; }
	EOF;

// Rule FuzzyOutputVariable
ruleFuzzyOutputVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fuzzy'
		{
			newLeafNode(otherlv_0, grammarAccess.getFuzzyOutputVariableAccess().getFuzzyKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFuzzyOutputVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFuzzyOutputVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"alpha.model.Alpha.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFuzzyOutputVariableAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyOutputVariableAccess().getDomainExprCalculatorExpressionParserRuleCall_3_0());
				}
				lv_domainExpr_3_0=ruleCalculatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyOutputVariableRule());
					}
					set(
						$current,
						"domainExpr",
						lv_domainExpr_3_0,
						"alpha.model.Alpha.CalculatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='->'
		{
			newLeafNode(otherlv_4, grammarAccess.getFuzzyOutputVariableAccess().getHyphenMinusGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyOutputVariableAccess().getRangeExprCalculatorExpressionParserRuleCall_5_0());
				}
				lv_rangeExpr_5_0=ruleCalculatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyOutputVariableRule());
					}
					set(
						$current,
						"rangeExpr",
						lv_rangeExpr_5_0,
						"alpha.model.Alpha.CalculatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getFuzzyOutputVariableAccess().getSemicolonKeyword_6());
			}
		)?
	)
;

// Entry rule entryRuleFuzzyLocalVariable
entryRuleFuzzyLocalVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuzzyLocalVariableRule()); }
	iv_ruleFuzzyLocalVariable=ruleFuzzyLocalVariable
	{ $current=$iv_ruleFuzzyLocalVariable.current; }
	EOF;

// Rule FuzzyLocalVariable
ruleFuzzyLocalVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fuzzy'
		{
			newLeafNode(otherlv_0, grammarAccess.getFuzzyLocalVariableAccess().getFuzzyKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFuzzyLocalVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFuzzyLocalVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"alpha.model.Alpha.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFuzzyLocalVariableAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyLocalVariableAccess().getDomainExprCalculatorExpressionParserRuleCall_3_0());
				}
				lv_domainExpr_3_0=ruleCalculatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyLocalVariableRule());
					}
					set(
						$current,
						"domainExpr",
						lv_domainExpr_3_0,
						"alpha.model.Alpha.CalculatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='->'
		{
			newLeafNode(otherlv_4, grammarAccess.getFuzzyLocalVariableAccess().getHyphenMinusGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyLocalVariableAccess().getRangeExprCalculatorExpressionParserRuleCall_5_0());
				}
				lv_rangeExpr_5_0=ruleCalculatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyLocalVariableRule());
					}
					set(
						$current,
						"rangeExpr",
						lv_rangeExpr_5_0,
						"alpha.model.Alpha.CalculatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getFuzzyLocalVariableAccess().getSemicolonKeyword_6());
			}
		)?
	)
;

// Entry rule entryRuleJNIDomain
entryRuleJNIDomain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJNIDomainRule()); }
	iv_ruleJNIDomain=ruleJNIDomain
	{ $current=$iv_ruleJNIDomain.current; }
	EOF;

// Rule JNIDomain
ruleJNIDomain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getJNIDomainAccess().getIslStringAISLSetParserRuleCall_0());
			}
			lv_islString_0_0=ruleAISLSet
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getJNIDomainRule());
				}
				set(
					$current,
					"islString",
					lv_islString_0_0,
					"alpha.model.Alpha.AISLSet");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleJNIDomainInArrayNotation
entryRuleJNIDomainInArrayNotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJNIDomainInArrayNotationRule()); }
	iv_ruleJNIDomainInArrayNotation=ruleJNIDomainInArrayNotation
	{ $current=$iv_ruleJNIDomainInArrayNotation.current; }
	EOF;

// Rule JNIDomainInArrayNotation
ruleJNIDomainInArrayNotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getJNIDomainInArrayNotationAccess().getLeftCurlyBracketKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getJNIDomainInArrayNotationAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJNIDomainInArrayNotationAccess().getIslStringAISLStringParserRuleCall_2_0());
				}
				lv_islString_2_0=ruleAISLString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJNIDomainInArrayNotationRule());
					}
					set(
						$current,
						"islString",
						lv_islString_2_0,
						"alpha.model.Alpha.AISLString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getJNIDomainInArrayNotationAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleJNIParamDomain
entryRuleJNIParamDomain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJNIParamDomainRule()); }
	iv_ruleJNIParamDomain=ruleJNIParamDomain
	{ $current=$iv_ruleJNIParamDomain.current; }
	EOF;

// Rule JNIParamDomain
ruleJNIParamDomain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getJNIParamDomainAccess().getIslStringAParamDomainParserRuleCall_0());
			}
			lv_islString_0_0=ruleAParamDomain
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getJNIParamDomainRule());
				}
				set(
					$current,
					"islString",
					lv_islString_0_0,
					"alpha.model.Alpha.AParamDomain");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleJNIRelation
entryRuleJNIRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJNIRelationRule()); }
	iv_ruleJNIRelation=ruleJNIRelation
	{ $current=$iv_ruleJNIRelation.current; }
	EOF;

// Rule JNIRelation
ruleJNIRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getJNIRelationAccess().getIslStringAISLRelationParserRuleCall_0());
			}
			lv_islString_0_0=ruleAISLRelation
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getJNIRelationRule());
				}
				set(
					$current,
					"islString",
					lv_islString_0_0,
					"alpha.model.Alpha.AISLRelation");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleJNIFunction
entryRuleJNIFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJNIFunctionRule()); }
	iv_ruleJNIFunction=ruleJNIFunction
	{ $current=$iv_ruleJNIFunction.current; }
	EOF;

// Rule JNIFunction
ruleJNIFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getJNIFunctionAccess().getAlphaStringAAlphaFunctionParserRuleCall_0());
			}
			lv_alphaString_0_0=ruleAAlphaFunction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getJNIFunctionRule());
				}
				set(
					$current,
					"alphaString",
					lv_alphaString_0_0,
					"alpha.model.Alpha.AAlphaFunction");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleJNIFunctionInArrayNotation
entryRuleJNIFunctionInArrayNotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJNIFunctionInArrayNotationRule()); }
	iv_ruleJNIFunctionInArrayNotation=ruleJNIFunctionInArrayNotation
	{ $current=$iv_ruleJNIFunctionInArrayNotation.current; }
	EOF;

// Rule JNIFunctionInArrayNotation
ruleJNIFunctionInArrayNotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getJNIFunctionInArrayNotationAccess().getLeftSquareBracketKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getJNIFunctionInArrayNotationAccess().getJNIFunctionInArrayNotationAction_1(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getJNIFunctionInArrayNotationAccess().getArrayNotationAISLExpressionParserRuleCall_2_0_0());
					}
					lv_arrayNotation_2_0=ruleAISLExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJNIFunctionInArrayNotationRule());
						}
						add(
							$current,
							"arrayNotation",
							lv_arrayNotation_2_0,
							"alpha.model.Alpha.AISLExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getJNIFunctionInArrayNotationAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getJNIFunctionInArrayNotationAccess().getArrayNotationAISLExpressionParserRuleCall_2_1_1_0());
						}
						lv_arrayNotation_4_0=ruleAISLExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getJNIFunctionInArrayNotationRule());
							}
							add(
								$current,
								"arrayNotation",
								lv_arrayNotation_4_0,
								"alpha.model.Alpha.AISLExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getJNIFunctionInArrayNotationAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleFuzzyFunction
entryRuleFuzzyFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuzzyFunctionRule()); }
	iv_ruleFuzzyFunction=ruleFuzzyFunction
	{ $current=$iv_ruleFuzzyFunction.current; }
	EOF;

// Rule FuzzyFunction
ruleFuzzyFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFuzzyFunctionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyFunctionAccess().getAlphaStringAISLWrappedBasicRelationParserRuleCall_1_0());
				}
				lv_alphaString_1_0=ruleAISLWrappedBasicRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyFunctionRule());
					}
					set(
						$current,
						"alphaString",
						lv_alphaString_1_0,
						"alpha.model.Alpha.AISLWrappedBasicRelation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getFuzzyFunctionAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFuzzyFunctionAccess().getIndirectionsFuzzyVariableUseParserRuleCall_2_1_0());
					}
					lv_indirections_3_0=ruleFuzzyVariableUse
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFuzzyFunctionRule());
						}
						add(
							$current,
							"indirections",
							lv_indirections_3_0,
							"alpha.model.Alpha.FuzzyVariableUse");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFuzzyFunctionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFuzzyVariableUse
entryRuleFuzzyVariableUse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuzzyVariableUseRule()); }
	iv_ruleFuzzyVariableUse=ruleFuzzyVariableUse
	{ $current=$iv_ruleFuzzyVariableUse.current; }
	EOF;

// Rule FuzzyVariableUse
ruleFuzzyVariableUse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFuzzyVariableUseAccess().getNestedFuzzyFunctionParserRuleCall_0());
		}
		this_NestedFuzzyFunction_0=ruleNestedFuzzyFunction
		{
			$current = $this_NestedFuzzyFunction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFuzzyVariableUseAccess().getAffineFuzzyVariableUseParserRuleCall_1());
		}
		this_AffineFuzzyVariableUse_1=ruleAffineFuzzyVariableUse
		{
			$current = $this_AffineFuzzyVariableUse_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNestedFuzzyFunction
entryRuleNestedFuzzyFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNestedFuzzyFunctionRule()); }
	iv_ruleNestedFuzzyFunction=ruleNestedFuzzyFunction
	{ $current=$iv_ruleNestedFuzzyFunction.current; }
	EOF;

// Rule NestedFuzzyFunction
ruleNestedFuzzyFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNestedFuzzyFunctionAccess().getFuzzyIndexIndexNameParserRuleCall_0_0());
				}
				lv_fuzzyIndex_0_0=ruleIndexName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNestedFuzzyFunctionRule());
					}
					set(
						$current,
						"fuzzyIndex",
						lv_fuzzyIndex_0_0,
						"alpha.model.Alpha.IndexName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getNestedFuzzyFunctionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNestedFuzzyFunctionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getNestedFuzzyFunctionAccess().getFuzzyVariableFuzzyVariableCrossReference_2_0());
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getNestedFuzzyFunctionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNestedFuzzyFunctionAccess().getAlphaStringAISLWrappedBasicRelationParserRuleCall_4_0());
				}
				lv_alphaString_4_0=ruleAISLWrappedBasicRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNestedFuzzyFunctionRule());
					}
					set(
						$current,
						"alphaString",
						lv_alphaString_4_0,
						"alpha.model.Alpha.AISLWrappedBasicRelation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getNestedFuzzyFunctionAccess().getSemicolonKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNestedFuzzyFunctionAccess().getIndirectionsFuzzyVariableUseParserRuleCall_5_1_0());
					}
					lv_indirections_6_0=ruleFuzzyVariableUse
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNestedFuzzyFunctionRule());
						}
						add(
							$current,
							"indirections",
							lv_indirections_6_0,
							"alpha.model.Alpha.FuzzyVariableUse");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getNestedFuzzyFunctionAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleAffineFuzzyVariableUse
entryRuleAffineFuzzyVariableUse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAffineFuzzyVariableUseRule()); }
	iv_ruleAffineFuzzyVariableUse=ruleAffineFuzzyVariableUse
	{ $current=$iv_ruleAffineFuzzyVariableUse.current; }
	EOF;

// Rule AffineFuzzyVariableUse
ruleAffineFuzzyVariableUse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAffineFuzzyVariableUseAccess().getFuzzyIndexIndexNameParserRuleCall_0_0());
				}
				lv_fuzzyIndex_0_0=ruleIndexName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAffineFuzzyVariableUseRule());
					}
					set(
						$current,
						"fuzzyIndex",
						lv_fuzzyIndex_0_0,
						"alpha.model.Alpha.IndexName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAffineFuzzyVariableUseAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAffineFuzzyVariableUseRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAffineFuzzyVariableUseAccess().getFuzzyVariableFuzzyVariableCrossReference_2_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAffineFuzzyVariableUseAccess().getUseFunctionJNIFunctionInArrayNotationParserRuleCall_3_0());
				}
				lv_useFunction_3_0=ruleJNIFunctionInArrayNotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAffineFuzzyVariableUseRule());
					}
					set(
						$current,
						"useFunction",
						lv_useFunction_3_0,
						"alpha.model.Alpha.JNIFunctionInArrayNotation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFuzzyFunctionInArrayNotation
entryRuleFuzzyFunctionInArrayNotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuzzyFunctionInArrayNotationRule()); }
	iv_ruleFuzzyFunctionInArrayNotation=ruleFuzzyFunctionInArrayNotation
	{ $current=$iv_ruleFuzzyFunctionInArrayNotation.current; }
	EOF;

// Rule FuzzyFunctionInArrayNotation
ruleFuzzyFunctionInArrayNotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='[['
		{
			newLeafNode(otherlv_0, grammarAccess.getFuzzyFunctionInArrayNotationAccess().getLeftSquareBracketLeftSquareBracketKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFuzzyFunctionInArrayNotationAccess().getFuzzyFunctionInArrayNotationAction_1(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFuzzyFunctionInArrayNotationAccess().getArrayNotationAISLFuzzyExpressionParserRuleCall_2_0_0());
					}
					lv_arrayNotation_2_0=ruleAISLFuzzyExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFuzzyFunctionInArrayNotationRule());
						}
						add(
							$current,
							"arrayNotation",
							lv_arrayNotation_2_0,
							"alpha.model.Alpha.AISLFuzzyExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getFuzzyFunctionInArrayNotationAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFuzzyFunctionInArrayNotationAccess().getArrayNotationAISLFuzzyExpressionParserRuleCall_2_1_1_0());
						}
						lv_arrayNotation_4_0=ruleAISLFuzzyExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFuzzyFunctionInArrayNotationRule());
							}
							add(
								$current,
								"arrayNotation",
								lv_arrayNotation_4_0,
								"alpha.model.Alpha.AISLFuzzyExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=']]'
		{
			newLeafNode(otherlv_5, grammarAccess.getFuzzyFunctionInArrayNotationAccess().getRightSquareBracketRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleSystemName
entryRuleSystemName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSystemNameRule()); }
	iv_ruleSystemName=ruleSystemName
	{ $current=$iv_ruleSystemName.current.getText(); }
	EOF;

// Rule SystemName
ruleSystemName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getSystemNameAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleIndexName
entryRuleIndexName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIndexNameRule()); }
	iv_ruleIndexName=ruleIndexName
	{ $current=$iv_ruleIndexName.current.getText(); }
	EOF;

// Rule IndexName
ruleIndexName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getIndexNameAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleAIndexList
entryRuleAIndexList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAIndexListRule()); }
	iv_ruleAIndexList=ruleAIndexList
	{ $current=$iv_ruleAIndexList.current.getText(); }
	EOF;

// Rule AIndexList
ruleAIndexList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAIndexListAccess().getIndexNameParserRuleCall_0());
		}
		this_IndexName_0=ruleIndexName
		{
			$current.merge(this_IndexName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAIndexListAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getAIndexListAccess().getIndexNameParserRuleCall_1_1());
			}
			this_IndexName_2=ruleIndexName
			{
				$current.merge(this_IndexName_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)?
;

// Entry rule entryRuleAParamDomain
entryRuleAParamDomain returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAParamDomainRule()); }
	iv_ruleAParamDomain=ruleAParamDomain
	{ $current=$iv_ruleAParamDomain.current.getText(); }
	EOF;

// Rule AParamDomain
ruleAParamDomain returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAParamDomainAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getAParamDomainAccess().getAIndexListParserRuleCall_1());
		}
		this_AIndexList_1=ruleAIndexList
		{
			$current.merge(this_AIndexList_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAParamDomainAccess().getRightSquareBracketKeyword_2());
		}
		kw='->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAParamDomainAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAParamDomainAccess().getLeftCurlyBracketKeyword_4());
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAParamDomainAccess().getColonKeyword_5());
		}
		{
			newCompositeNode(grammarAccess.getAParamDomainAccess().getAISLStringParserRuleCall_6());
		}
		this_AISLString_6=ruleAISLString
		{
			$current.merge(this_AISLString_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAParamDomainAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleAISLSet
entryRuleAISLSet returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAISLSetRule()); }
	iv_ruleAISLSet=ruleAISLSet
	{ $current=$iv_ruleAISLSet.current.getText(); }
	EOF;

// Rule AISLSet
ruleAISLSet returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLSetAccess().getLeftCurlyBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getAISLSetAccess().getAISLBasicSetParserRuleCall_1());
		}
		this_AISLBasicSet_1=ruleAISLBasicSet
		{
			$current.merge(this_AISLBasicSet_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAISLSetAccess().getSemicolonKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getAISLSetAccess().getAISLBasicSetParserRuleCall_2_1());
			}
			this_AISLBasicSet_3=ruleAISLBasicSet
			{
				$current.merge(this_AISLBasicSet_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLSetAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAISLBasicSet
entryRuleAISLBasicSet returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAISLBasicSetRule()); }
	iv_ruleAISLBasicSet=ruleAISLBasicSet
	{ $current=$iv_ruleAISLBasicSet.current.getText(); }
	EOF;

// Rule AISLBasicSet
ruleAISLBasicSet returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLBasicSetAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getAISLBasicSetAccess().getAISLExpressionListParserRuleCall_1());
		}
		this_AISLExpressionList_1=ruleAISLExpressionList
		{
			$current.merge(this_AISLExpressionList_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLBasicSetAccess().getRightSquareBracketKeyword_2());
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLBasicSetAccess().getColonKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getAISLBasicSetAccess().getAISLStringParserRuleCall_4());
		}
		this_AISLString_4=ruleAISLString
		{
			$current.merge(this_AISLString_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAISLRelation
entryRuleAISLRelation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAISLRelationRule()); }
	iv_ruleAISLRelation=ruleAISLRelation
	{ $current=$iv_ruleAISLRelation.current.getText(); }
	EOF;

// Rule AISLRelation
ruleAISLRelation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLRelationAccess().getLeftCurlyBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getAISLRelationAccess().getAISLBasicRelationParserRuleCall_1());
		}
		this_AISLBasicRelation_1=ruleAISLBasicRelation
		{
			$current.merge(this_AISLBasicRelation_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAISLRelationAccess().getSemicolonKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getAISLRelationAccess().getAISLBasicRelationParserRuleCall_2_1());
			}
			this_AISLBasicRelation_3=ruleAISLBasicRelation
			{
				$current.merge(this_AISLBasicRelation_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLRelationAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAISLString
entryRuleAISLString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAISLStringRule()); }
	iv_ruleAISLString=ruleAISLString
	{ $current=$iv_ruleAISLString.current.getText(); }
	EOF;

// Rule AISLString
ruleAISLString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAISLStringAccess().getIndexNameParserRuleCall_0());
		}
		this_IndexName_0=ruleIndexName
		{
			$current.merge(this_IndexName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getAISLStringAccess().getINTTerminalRuleCall_1());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getPlusSignKeyword_2());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getHyphenMinusKeyword_3());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getAsteriskKeyword_4());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getSolidusKeyword_5());
		}
		    |
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getPercentSignKeyword_6());
		}
		    |
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getAndKeyword_7());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getOrKeyword_8());
		}
		    |
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getLeftSquareBracketKeyword_9());
		}
		    |
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getRightSquareBracketKeyword_10());
		}
		    |
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getLeftParenthesisKeyword_11());
		}
		    |
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getRightParenthesisKeyword_12());
		}
		    |
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getCommaKeyword_13());
		}
		    |
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getColonKeyword_14());
		}
		    |
		kw='&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getAmpersandKeyword_15());
		}
		    |
		kw='|'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getVerticalLineKeyword_16());
		}
		    |
		this_WS_17=RULE_WS
		{
			$current.merge(this_WS_17);
		}
		{
			newLeafNode(this_WS_17, grammarAccess.getAISLStringAccess().getWSTerminalRuleCall_17());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getGreaterThanSignEqualsSignKeyword_18());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getGreaterThanSignKeyword_19());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getEqualsSignKeyword_20());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getLessThanSignKeyword_21());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLStringAccess().getLessThanSignEqualsSignKeyword_22());
		}
	)*
;

// Entry rule entryRuleAISLExpression
entryRuleAISLExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAISLExpressionRule()); }
	iv_ruleAISLExpression=ruleAISLExpression
	{ $current=$iv_ruleAISLExpression.current.getText(); }
	EOF;

// Rule AISLExpression
ruleAISLExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAISLExpressionAccess().getIndexNameParserRuleCall_0());
		}
		this_IndexName_0=ruleIndexName
		{
			$current.merge(this_IndexName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getAISLExpressionAccess().getINTTerminalRuleCall_1());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLExpressionAccess().getEqualsSignKeyword_2());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLExpressionAccess().getPlusSignKeyword_3());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLExpressionAccess().getHyphenMinusKeyword_4());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLExpressionAccess().getAsteriskKeyword_5());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLExpressionAccess().getSolidusKeyword_6());
		}
		    |
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLExpressionAccess().getPercentSignKeyword_7());
		}
		    |
		this_WS_8=RULE_WS
		{
			$current.merge(this_WS_8);
		}
		{
			newLeafNode(this_WS_8, grammarAccess.getAISLExpressionAccess().getWSTerminalRuleCall_8());
		}
	)+
;

// Entry rule entryRuleAISLExpressionList
entryRuleAISLExpressionList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAISLExpressionListRule()); }
	iv_ruleAISLExpressionList=ruleAISLExpressionList
	{ $current=$iv_ruleAISLExpressionList.current.getText(); }
	EOF;

// Rule AISLExpressionList
ruleAISLExpressionList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAISLExpressionListAccess().getAISLExpressionParserRuleCall_0());
		}
		this_AISLExpression_0=ruleAISLExpression
		{
			$current.merge(this_AISLExpression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAISLExpressionListAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getAISLExpressionListAccess().getAISLExpressionParserRuleCall_1_1());
			}
			this_AISLExpression_2=ruleAISLExpression
			{
				$current.merge(this_AISLExpression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)?
;

// Entry rule entryRuleAAlphaFunction
entryRuleAAlphaFunction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAAlphaFunctionRule()); }
	iv_ruleAAlphaFunction=ruleAAlphaFunction
	{ $current=$iv_ruleAAlphaFunction.current.getText(); }
	EOF;

// Rule AAlphaFunction
ruleAAlphaFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAAlphaFunctionAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getAAlphaFunctionAccess().getAIndexListParserRuleCall_1());
		}
		this_AIndexList_1=ruleAIndexList
		{
			$current.merge(this_AIndexList_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAAlphaFunctionAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getAAlphaFunctionAccess().getAISLExpressionListParserRuleCall_3());
		}
		this_AISLExpressionList_3=ruleAISLExpressionList
		{
			$current.merge(this_AISLExpressionList_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAAlphaFunctionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAISLBasicRelation
entryRuleAISLBasicRelation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAISLBasicRelationRule()); }
	iv_ruleAISLBasicRelation=ruleAISLBasicRelation
	{ $current=$iv_ruleAISLBasicRelation.current.getText(); }
	EOF;

// Rule AISLBasicRelation
ruleAISLBasicRelation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLBasicRelationAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getAISLBasicRelationAccess().getAISLExpressionListParserRuleCall_1());
		}
		this_AISLExpressionList_1=ruleAISLExpressionList
		{
			$current.merge(this_AISLExpressionList_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLBasicRelationAccess().getRightSquareBracketKeyword_2());
		}
		kw='->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLBasicRelationAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLBasicRelationAccess().getLeftSquareBracketKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getAISLBasicRelationAccess().getAISLExpressionListParserRuleCall_5());
		}
		this_AISLExpressionList_5=ruleAISLExpressionList
		{
			$current.merge(this_AISLExpressionList_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLBasicRelationAccess().getRightSquareBracketKeyword_6());
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLBasicRelationAccess().getColonKeyword_7());
		}
		{
			newCompositeNode(grammarAccess.getAISLBasicRelationAccess().getAISLStringParserRuleCall_8());
		}
		this_AISLString_8=ruleAISLString
		{
			$current.merge(this_AISLString_8);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAISLWrappedBasicRelation
entryRuleAISLWrappedBasicRelation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAISLWrappedBasicRelationRule()); }
	iv_ruleAISLWrappedBasicRelation=ruleAISLWrappedBasicRelation
	{ $current=$iv_ruleAISLWrappedBasicRelation.current.getText(); }
	EOF;

// Rule AISLWrappedBasicRelation
ruleAISLWrappedBasicRelation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLWrappedBasicRelationAccess().getLeftSquareBracketKeyword_0());
		}
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLWrappedBasicRelationAccess().getLeftSquareBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getAISLWrappedBasicRelationAccess().getAIndexListParserRuleCall_2());
		}
		this_AIndexList_2=ruleAIndexList
		{
			$current.merge(this_AIndexList_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLWrappedBasicRelationAccess().getRightSquareBracketKeyword_3());
		}
		kw='->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLWrappedBasicRelationAccess().getHyphenMinusGreaterThanSignKeyword_4());
		}
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLWrappedBasicRelationAccess().getLeftSquareBracketKeyword_5());
		}
		{
			newCompositeNode(grammarAccess.getAISLWrappedBasicRelationAccess().getAISLExpressionListParserRuleCall_6());
		}
		this_AISLExpressionList_6=ruleAISLExpressionList
		{
			$current.merge(this_AISLExpressionList_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLWrappedBasicRelationAccess().getRightSquareBracketKeyword_7());
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLWrappedBasicRelationAccess().getRightSquareBracketKeyword_8());
		}
		kw='->'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLWrappedBasicRelationAccess().getHyphenMinusGreaterThanSignKeyword_9());
		}
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLWrappedBasicRelationAccess().getLeftSquareBracketKeyword_10());
		}
		{
			newCompositeNode(grammarAccess.getAISLWrappedBasicRelationAccess().getAISLExpressionListParserRuleCall_11());
		}
		this_AISLExpressionList_11=ruleAISLExpressionList
		{
			$current.merge(this_AISLExpressionList_11);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLWrappedBasicRelationAccess().getRightSquareBracketKeyword_12());
		}
	)
;

// Entry rule entryRuleAISLFuzzyExpression
entryRuleAISLFuzzyExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAISLFuzzyExpressionRule()); }
	iv_ruleAISLFuzzyExpression=ruleAISLFuzzyExpression
	{ $current=$iv_ruleAISLFuzzyExpression.current.getText(); }
	EOF;

// Rule AISLFuzzyExpression
ruleAISLFuzzyExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAISLFuzzyExpressionAccess().getIndexNameParserRuleCall_0());
		}
		this_IndexName_0=ruleIndexName
		{
			$current.merge(this_IndexName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getAISLFuzzyExpressionAccess().getINTTerminalRuleCall_1());
		}
		    |
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLFuzzyExpressionAccess().getLeftSquareBracketKeyword_2());
		}
		    |
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLFuzzyExpressionAccess().getRightSquareBracketKeyword_3());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLFuzzyExpressionAccess().getEqualsSignKeyword_4());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLFuzzyExpressionAccess().getPlusSignKeyword_5());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLFuzzyExpressionAccess().getHyphenMinusKeyword_6());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLFuzzyExpressionAccess().getAsteriskKeyword_7());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLFuzzyExpressionAccess().getSolidusKeyword_8());
		}
		    |
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAISLFuzzyExpressionAccess().getPercentSignKeyword_9());
		}
		    |
		this_WS_10=RULE_WS
		{
			$current.merge(this_WS_10);
		}
		{
			newLeafNode(this_WS_10, grammarAccess.getAISLFuzzyExpressionAccess().getWSTerminalRuleCall_10());
		}
	)+
;

// Entry rule entryRuleStandardEquation
entryRuleStandardEquation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStandardEquationRule()); }
	iv_ruleStandardEquation=ruleStandardEquation
	{ $current=$iv_ruleStandardEquation.current; }
	EOF;

// Rule StandardEquation
ruleStandardEquation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStandardEquationRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getStandardEquationAccess().getVariableVariableCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getStandardEquationAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStandardEquationAccess().getIndexNamesIndexNameParserRuleCall_1_1_0());
					}
					lv_indexNames_2_0=ruleIndexName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStandardEquationRule());
						}
						add(
							$current,
							"indexNames",
							lv_indexNames_2_0,
							"alpha.model.Alpha.IndexName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getStandardEquationAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStandardEquationAccess().getIndexNamesIndexNameParserRuleCall_1_2_1_0());
						}
						lv_indexNames_4_0=ruleIndexName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStandardEquationRule());
							}
							add(
								$current,
								"indexNames",
								lv_indexNames_4_0,
								"alpha.model.Alpha.IndexName");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getStandardEquationAccess().getRightSquareBracketKeyword_1_3());
			}
		)?
		otherlv_6='='
		{
			newLeafNode(otherlv_6, grammarAccess.getStandardEquationAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStandardEquationAccess().getExprAlphaExpressionParserRuleCall_3_0());
				}
				lv_expr_7_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStandardEquationRule());
					}
					set(
						$current,
						"expr",
						lv_expr_7_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getStandardEquationAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleUseEquation
entryRuleUseEquation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUseEquationRule()); }
	iv_ruleUseEquation=ruleUseEquation
	{ $current=$iv_ruleUseEquation.current; }
	EOF;

// Rule UseEquation
ruleUseEquation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='over'
			{
				newLeafNode(otherlv_0, grammarAccess.getUseEquationAccess().getOverKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUseEquationAccess().getInstantiationDomainExprCalculatorExpressionParserRuleCall_0_1_0());
					}
					lv_instantiationDomainExpr_1_0=ruleCalculatorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUseEquationRule());
						}
						set(
							$current,
							"instantiationDomainExpr",
							lv_instantiationDomainExpr_1_0,
							"alpha.model.Alpha.CalculatorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2='with'
				{
					newLeafNode(otherlv_2, grammarAccess.getUseEquationAccess().getWithKeyword_0_2_0());
				}
				(
					otherlv_3='['
					{
						newLeafNode(otherlv_3, grammarAccess.getUseEquationAccess().getLeftSquareBracketKeyword_0_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getUseEquationAccess().getSubsystemDimsIndexNameParserRuleCall_0_2_1_1_0());
							}
							lv_subsystemDims_4_0=ruleIndexName
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getUseEquationRule());
								}
								add(
									$current,
									"subsystemDims",
									lv_subsystemDims_4_0,
									"alpha.model.Alpha.IndexName");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_5=','
						{
							newLeafNode(otherlv_5, grammarAccess.getUseEquationAccess().getCommaKeyword_0_2_1_2_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getUseEquationAccess().getSubsystemDimsIndexNameParserRuleCall_0_2_1_2_1_0());
								}
								lv_subsystemDims_6_0=ruleIndexName
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getUseEquationRule());
									}
									add(
										$current,
										"subsystemDims",
										lv_subsystemDims_6_0,
										"alpha.model.Alpha.IndexName");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
					otherlv_7=']'
					{
						newLeafNode(otherlv_7, grammarAccess.getUseEquationAccess().getRightSquareBracketKeyword_0_2_1_3());
					}
				)?
			)?
			otherlv_8=':'
			{
				newLeafNode(otherlv_8, grammarAccess.getUseEquationAccess().getColonKeyword_0_3());
			}
		)?
		otherlv_9='('
		{
			newLeafNode(otherlv_9, grammarAccess.getUseEquationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getUseEquationAccess().getOutputExprsAlphaExpressionParserRuleCall_2_0_0());
					}
					lv_outputExprs_10_0=ruleAlphaExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUseEquationRule());
						}
						add(
							$current,
							"outputExprs",
							lv_outputExprs_10_0,
							"alpha.model.Alpha.AlphaExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_11=','
				{
					newLeafNode(otherlv_11, grammarAccess.getUseEquationAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getUseEquationAccess().getOutputExprsAlphaExpressionParserRuleCall_2_1_1_0());
						}
						lv_outputExprs_12_0=ruleAlphaExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getUseEquationRule());
							}
							add(
								$current,
								"outputExprs",
								lv_outputExprs_12_0,
								"alpha.model.Alpha.AlphaExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_13=')'
		{
			newLeafNode(otherlv_13, grammarAccess.getUseEquationAccess().getRightParenthesisKeyword_3());
		}
		otherlv_14='='
		{
			newLeafNode(otherlv_14, grammarAccess.getUseEquationAccess().getEqualsSignKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUseEquationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getUseEquationAccess().getSystemAlphaSystemCrossReference_5_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUseEquationAccess().getCallParamsExprJNIFunctionInArrayNotationParserRuleCall_6_0());
				}
				lv_callParamsExpr_16_0=ruleJNIFunctionInArrayNotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseEquationRule());
					}
					set(
						$current,
						"callParamsExpr",
						lv_callParamsExpr_16_0,
						"alpha.model.Alpha.JNIFunctionInArrayNotation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_17='('
		{
			newLeafNode(otherlv_17, grammarAccess.getUseEquationAccess().getLeftParenthesisKeyword_7());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getUseEquationAccess().getInputExprsAlphaExpressionParserRuleCall_8_0_0());
					}
					lv_inputExprs_18_0=ruleAlphaExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUseEquationRule());
						}
						add(
							$current,
							"inputExprs",
							lv_inputExprs_18_0,
							"alpha.model.Alpha.AlphaExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_19=','
				{
					newLeafNode(otherlv_19, grammarAccess.getUseEquationAccess().getCommaKeyword_8_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getUseEquationAccess().getInputExprsAlphaExpressionParserRuleCall_8_1_1_0());
						}
						lv_inputExprs_20_0=ruleAlphaExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getUseEquationRule());
							}
							add(
								$current,
								"inputExprs",
								lv_inputExprs_20_0,
								"alpha.model.Alpha.AlphaExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_21=')'
		{
			newLeafNode(otherlv_21, grammarAccess.getUseEquationAccess().getRightParenthesisKeyword_9());
		}
		otherlv_22=';'
		{
			newLeafNode(otherlv_22, grammarAccess.getUseEquationAccess().getSemicolonKeyword_10());
		}
	)
;

// Entry rule entryRuleAlphaExpression
entryRuleAlphaExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlphaExpressionRule()); }
	iv_ruleAlphaExpression=ruleAlphaExpression
	{ $current=$iv_ruleAlphaExpression.current; }
	EOF;

// Rule AlphaExpression
ruleAlphaExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAlphaExpressionAccess().getIfExpressionParserRuleCall_0());
		}
		this_IfExpression_0=ruleIfExpression
		{
			$current = $this_IfExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaExpressionAccess().getRestrictExpressionParserRuleCall_1());
		}
		this_RestrictExpression_1=ruleRestrictExpression
		{
			$current = $this_RestrictExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaExpressionAccess().getAutoRestrictExpressionParserRuleCall_2());
		}
		this_AutoRestrictExpression_2=ruleAutoRestrictExpression
		{
			$current = $this_AutoRestrictExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaExpressionAccess().getOrExpressionParserRuleCall_3());
		}
		this_OrExpression_3=ruleOrExpression
		{
			$current = $this_OrExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAlphaTerminalExpression
entryRuleAlphaTerminalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlphaTerminalExpressionRule()); }
	iv_ruleAlphaTerminalExpression=ruleAlphaTerminalExpression
	{ $current=$iv_ruleAlphaTerminalExpression.current; }
	EOF;

// Rule AlphaTerminalExpression
ruleAlphaTerminalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getAlphaTerminalExpressionAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getAlphaTerminalExpressionAccess().getAlphaExpressionParserRuleCall_0_1());
			}
			this_AlphaExpression_1=ruleAlphaExpression
			{
				$current = $this_AlphaExpression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getAlphaTerminalExpressionAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getAlphaTerminalExpressionAccess().getCaseExpressionParserRuleCall_1());
		}
		this_CaseExpression_3=ruleCaseExpression
		{
			$current = $this_CaseExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaTerminalExpressionAccess().getConstantExpressionParserRuleCall_2());
		}
		this_ConstantExpression_4=ruleConstantExpression
		{
			$current = $this_ConstantExpression_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaTerminalExpressionAccess().getVariableExpressionParserRuleCall_3());
		}
		this_VariableExpression_5=ruleVariableExpression
		{
			$current = $this_VariableExpression_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaTerminalExpressionAccess().getDependenceExpressionParserRuleCall_4());
		}
		this_DependenceExpression_6=ruleDependenceExpression
		{
			$current = $this_DependenceExpression_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaTerminalExpressionAccess().getFuzzyDependenceExpressionParserRuleCall_5());
		}
		this_FuzzyDependenceExpression_7=ruleFuzzyDependenceExpression
		{
			$current = $this_FuzzyDependenceExpression_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaTerminalExpressionAccess().getIndexExpressionParserRuleCall_6());
		}
		this_IndexExpression_8=ruleIndexExpression
		{
			$current = $this_IndexExpression_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaTerminalExpressionAccess().getFuzzyIndexExpressionParserRuleCall_7());
		}
		this_FuzzyIndexExpression_9=ruleFuzzyIndexExpression
		{
			$current = $this_FuzzyIndexExpression_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaTerminalExpressionAccess().getReductionsParserRuleCall_8());
		}
		this_Reductions_10=ruleReductions
		{
			$current = $this_Reductions_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaTerminalExpressionAccess().getConvolutionExpressionParserRuleCall_9());
		}
		this_ConvolutionExpression_11=ruleConvolutionExpression
		{
			$current = $this_ConvolutionExpression_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaTerminalExpressionAccess().getMultiArgExpressionParserRuleCall_10());
		}
		this_MultiArgExpression_12=ruleMultiArgExpression
		{
			$current = $this_MultiArgExpression_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaTerminalExpressionAccess().getExternalMultiArgExpressionParserRuleCall_11());
		}
		this_ExternalMultiArgExpression_13=ruleExternalMultiArgExpression
		{
			$current = $this_ExternalMultiArgExpression_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAlphaTerminalExpressionAccess().getSelectExpressionParserRuleCall_12());
		}
		this_SelectExpression_14=ruleSelectExpression
		{
			$current = $this_SelectExpression_14.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleReductions
entryRuleReductions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReductionsRule()); }
	iv_ruleReductions=ruleReductions
	{ $current=$iv_ruleReductions.current; }
	EOF;

// Rule Reductions
ruleReductions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getReductionsAccess().getReduceExpressionParserRuleCall_0());
		}
		this_ReduceExpression_0=ruleReduceExpression
		{
			$current = $this_ReduceExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReductionsAccess().getArgReduceExpressionParserRuleCall_1());
		}
		this_ArgReduceExpression_1=ruleArgReduceExpression
		{
			$current = $this_ArgReduceExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReductionsAccess().getExternalReduceExpressionParserRuleCall_2());
		}
		this_ExternalReduceExpression_2=ruleExternalReduceExpression
		{
			$current = $this_ExternalReduceExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReductionsAccess().getExternalArgReduceExpressionParserRuleCall_3());
		}
		this_ExternalArgReduceExpression_3=ruleExternalArgReduceExpression
		{
			$current = $this_ExternalArgReduceExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReductionsAccess().getFuzzyReduceExpressionParserRuleCall_4());
		}
		this_FuzzyReduceExpression_4=ruleFuzzyReduceExpression
		{
			$current = $this_FuzzyReduceExpression_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReductionsAccess().getFuzzyArgReduceExpressionParserRuleCall_5());
		}
		this_FuzzyArgReduceExpression_5=ruleFuzzyArgReduceExpression
		{
			$current = $this_FuzzyArgReduceExpression_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReductionsAccess().getExternalFuzzyReduceExpressionParserRuleCall_6());
		}
		this_ExternalFuzzyReduceExpression_6=ruleExternalFuzzyReduceExpression
		{
			$current = $this_ExternalFuzzyReduceExpression_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getReductionsAccess().getExternalFuzzyArgReduceExpressionParserRuleCall_7());
		}
		this_ExternalFuzzyArgReduceExpression_7=ruleExternalFuzzyArgReduceExpression
		{
			$current = $this_ExternalFuzzyArgReduceExpression_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfExpressionRule()); }
	iv_ruleIfExpression=ruleIfExpression
	{ $current=$iv_ruleIfExpression.current; }
	EOF;

// Rule IfExpression
ruleIfExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfExpressionAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getCondExprAlphaExpressionParserRuleCall_1_0());
				}
				lv_condExpr_1_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"condExpr",
						lv_condExpr_1_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfExpressionAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getThenExprAlphaExpressionParserRuleCall_3_0());
				}
				lv_thenExpr_3_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"thenExpr",
						lv_thenExpr_3_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='else'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfExpressionAccess().getElseKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getElseExprAlphaExpressionParserRuleCall_5_0());
				}
				lv_elseExpr_5_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"elseExpr",
						lv_elseExpr_5_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRestrictExpression
entryRuleRestrictExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRestrictExpressionRule()); }
	iv_ruleRestrictExpression=ruleRestrictExpression
	{ $current=$iv_ruleRestrictExpression.current; }
	EOF;

// Rule RestrictExpression
ruleRestrictExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRestrictExpressionAccess().getDomainExprJNIDomainParserRuleCall_0_0_0_0());
						}
						lv_domainExpr_0_1=ruleJNIDomain
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRestrictExpressionRule());
							}
							set(
								$current,
								"domainExpr",
								lv_domainExpr_0_1,
								"alpha.model.Alpha.JNIDomain");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getRestrictExpressionAccess().getDomainExprJNIDomainInArrayNotationParserRuleCall_0_0_0_1());
						}
						lv_domainExpr_0_2=ruleJNIDomainInArrayNotation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRestrictExpressionRule());
							}
							set(
								$current,
								"domainExpr",
								lv_domainExpr_0_2,
								"alpha.model.Alpha.JNIDomainInArrayNotation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getRestrictExpressionAccess().getColonKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRestrictExpressionAccess().getExprAlphaExpressionParserRuleCall_0_2_0());
					}
					lv_expr_2_0=ruleAlphaExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRestrictExpressionRule());
						}
						set(
							$current,
							"expr",
							lv_expr_2_0,
							"alpha.model.Alpha.AlphaExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getRestrictExpressionAccess().getLeftCurlyBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRestrictExpressionAccess().getDomainExprCalculatorExpressionParserRuleCall_1_1_0());
					}
					lv_domainExpr_4_0=ruleCalculatorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRestrictExpressionRule());
						}
						set(
							$current,
							"domainExpr",
							lv_domainExpr_4_0,
							"alpha.model.Alpha.CalculatorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='}'
			{
				newLeafNode(otherlv_5, grammarAccess.getRestrictExpressionAccess().getRightCurlyBracketKeyword_1_2());
			}
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getRestrictExpressionAccess().getColonKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRestrictExpressionAccess().getExprAlphaExpressionParserRuleCall_1_4_0());
					}
					lv_expr_7_0=ruleAlphaExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRestrictExpressionRule());
						}
						set(
							$current,
							"expr",
							lv_expr_7_0,
							"alpha.model.Alpha.AlphaExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAutoRestrictExpression
entryRuleAutoRestrictExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAutoRestrictExpressionRule()); }
	iv_ruleAutoRestrictExpression=ruleAutoRestrictExpression
	{ $current=$iv_ruleAutoRestrictExpression.current; }
	EOF;

// Rule AutoRestrictExpression
ruleAutoRestrictExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='auto'
		{
			newLeafNode(otherlv_0, grammarAccess.getAutoRestrictExpressionAccess().getAutoKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getAutoRestrictExpressionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAutoRestrictExpressionAccess().getExprAlphaExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAutoRestrictExpressionRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCaseExpression
entryRuleCaseExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseExpressionRule()); }
	iv_ruleCaseExpression=ruleCaseExpression
	{ $current=$iv_ruleCaseExpression.current; }
	EOF;

// Rule CaseExpression
ruleCaseExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseExpressionAccess().getCaseKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCaseExpressionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCaseExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"alpha.model.Alpha.ID");
				}
			)
		)?
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getCaseExpressionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseExpressionAccess().getExprsAlphaExpressionParserRuleCall_3_0_0());
					}
					lv_exprs_3_0=ruleAlphaExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
						}
						add(
							$current,
							"exprs",
							lv_exprs_3_0,
							"alpha.model.Alpha.AlphaExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getCaseExpressionAccess().getSemicolonKeyword_3_1());
			}
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getCaseExpressionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleDependenceExpression
entryRuleDependenceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDependenceExpressionRule()); }
	iv_ruleDependenceExpression=ruleDependenceExpression
	{ $current=$iv_ruleDependenceExpression.current; }
	EOF;

// Rule DependenceExpression
ruleDependenceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDependenceExpressionAccess().getFunctionExprJNIFunctionParserRuleCall_0_0_0());
					}
					lv_functionExpr_0_0=ruleJNIFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenceExpressionRule());
						}
						set(
							$current,
							"functionExpr",
							lv_functionExpr_0_0,
							"alpha.model.Alpha.JNIFunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='@'
			{
				newLeafNode(otherlv_1, grammarAccess.getDependenceExpressionAccess().getCommercialAtKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDependenceExpressionAccess().getExprAlphaTerminalExpressionParserRuleCall_0_2_0());
					}
					lv_expr_2_0=ruleAlphaTerminalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenceExpressionRule());
						}
						set(
							$current,
							"expr",
							lv_expr_2_0,
							"alpha.model.Alpha.AlphaTerminalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDependenceExpressionAccess().getExprVariableExpressionParserRuleCall_1_0_0());
					}
					lv_expr_3_0=ruleVariableExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenceExpressionRule());
						}
						set(
							$current,
							"expr",
							lv_expr_3_0,
							"alpha.model.Alpha.VariableExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDependenceExpressionAccess().getFunctionExprJNIFunctionInArrayNotationParserRuleCall_1_1_0());
					}
					lv_functionExpr_4_0=ruleJNIFunctionInArrayNotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenceExpressionRule());
						}
						set(
							$current,
							"functionExpr",
							lv_functionExpr_4_0,
							"alpha.model.Alpha.JNIFunctionInArrayNotation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDependenceExpressionAccess().getExprConstantExpressionParserRuleCall_2_0_0());
					}
					lv_expr_5_0=ruleConstantExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenceExpressionRule());
						}
						set(
							$current,
							"expr",
							lv_expr_5_0,
							"alpha.model.Alpha.ConstantExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDependenceExpressionAccess().getFunctionExprJNIFunctionInArrayNotationParserRuleCall_2_1_0());
					}
					lv_functionExpr_6_0=ruleJNIFunctionInArrayNotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDependenceExpressionRule());
						}
						set(
							$current,
							"functionExpr",
							lv_functionExpr_6_0,
							"alpha.model.Alpha.JNIFunctionInArrayNotation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFuzzyDependenceExpression
entryRuleFuzzyDependenceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuzzyDependenceExpressionRule()); }
	iv_ruleFuzzyDependenceExpression=ruleFuzzyDependenceExpression
	{ $current=$iv_ruleFuzzyDependenceExpression.current; }
	EOF;

// Rule FuzzyDependenceExpression
ruleFuzzyDependenceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFuzzyDependenceExpressionAccess().getFuzzyFunctionFuzzyFunctionParserRuleCall_0_0_0());
					}
					lv_fuzzyFunction_0_0=ruleFuzzyFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFuzzyDependenceExpressionRule());
						}
						set(
							$current,
							"fuzzyFunction",
							lv_fuzzyFunction_0_0,
							"alpha.model.Alpha.FuzzyFunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='@'
			{
				newLeafNode(otherlv_1, grammarAccess.getFuzzyDependenceExpressionAccess().getCommercialAtKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFuzzyDependenceExpressionAccess().getExprAlphaTerminalExpressionParserRuleCall_0_2_0());
					}
					lv_expr_2_0=ruleAlphaTerminalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFuzzyDependenceExpressionRule());
						}
						set(
							$current,
							"expr",
							lv_expr_2_0,
							"alpha.model.Alpha.AlphaTerminalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFuzzyDependenceExpressionAccess().getExprVariableExpressionParserRuleCall_1_0_0());
					}
					lv_expr_3_0=ruleVariableExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFuzzyDependenceExpressionRule());
						}
						set(
							$current,
							"expr",
							lv_expr_3_0,
							"alpha.model.Alpha.VariableExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFuzzyDependenceExpressionAccess().getFuzzyFunctionFuzzyFunctionInArrayNotationParserRuleCall_1_1_0());
					}
					lv_fuzzyFunction_4_0=ruleFuzzyFunctionInArrayNotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFuzzyDependenceExpressionRule());
						}
						set(
							$current,
							"fuzzyFunction",
							lv_fuzzyFunction_4_0,
							"alpha.model.Alpha.FuzzyFunctionInArrayNotation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleIndexExpression
entryRuleIndexExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexExpressionRule()); }
	iv_ruleIndexExpression=ruleIndexExpression
	{ $current=$iv_ruleIndexExpression.current; }
	EOF;

// Rule IndexExpression
ruleIndexExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='val'
			{
				newLeafNode(otherlv_0, grammarAccess.getIndexExpressionAccess().getValKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIndexExpressionAccess().getFunctionExprJNIFunctionParserRuleCall_0_1_0());
					}
					lv_functionExpr_1_0=ruleJNIFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIndexExpressionRule());
						}
						set(
							$current,
							"functionExpr",
							lv_functionExpr_1_0,
							"alpha.model.Alpha.JNIFunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexExpressionAccess().getFunctionExprJNIFunctionInArrayNotationParserRuleCall_1_0());
				}
				lv_functionExpr_2_0=ruleJNIFunctionInArrayNotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexExpressionRule());
					}
					set(
						$current,
						"functionExpr",
						lv_functionExpr_2_0,
						"alpha.model.Alpha.JNIFunctionInArrayNotation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFuzzyIndexExpression
entryRuleFuzzyIndexExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuzzyIndexExpressionRule()); }
	iv_ruleFuzzyIndexExpression=ruleFuzzyIndexExpression
	{ $current=$iv_ruleFuzzyIndexExpression.current; }
	EOF;

// Rule FuzzyIndexExpression
ruleFuzzyIndexExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='val'
			{
				newLeafNode(otherlv_0, grammarAccess.getFuzzyIndexExpressionAccess().getValKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFuzzyIndexExpressionAccess().getFuzzyFunctionFuzzyFunctionParserRuleCall_0_1_0());
					}
					lv_fuzzyFunction_1_0=ruleFuzzyFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFuzzyIndexExpressionRule());
						}
						set(
							$current,
							"fuzzyFunction",
							lv_fuzzyFunction_1_0,
							"alpha.model.Alpha.FuzzyFunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyIndexExpressionAccess().getFuzzyFunctionFuzzyFunctionInArrayNotationParserRuleCall_1_0());
				}
				lv_fuzzyFunction_2_0=ruleFuzzyFunctionInArrayNotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyIndexExpressionRule());
					}
					set(
						$current,
						"fuzzyFunction",
						lv_fuzzyFunction_2_0,
						"alpha.model.Alpha.FuzzyFunctionInArrayNotation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReduceExpression
entryRuleReduceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReduceExpressionRule()); }
	iv_ruleReduceExpression=ruleReduceExpression
	{ $current=$iv_ruleReduceExpression.current; }
	EOF;

// Rule ReduceExpression
ruleReduceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='reduce'
		{
			newLeafNode(otherlv_0, grammarAccess.getReduceExpressionAccess().getReduceKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getReduceExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReduceExpressionAccess().getOperatorAREDUCTION_OPParserRuleCall_2_0());
				}
				lv_operator_2_0=ruleAREDUCTION_OP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReduceExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_2_0,
						"alpha.model.Alpha.AREDUCTION_OP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getReduceExpressionAccess().getCommaKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getReduceExpressionAccess().getProjectionExprJNIFunctionParserRuleCall_4_0_0());
					}
					lv_projectionExpr_4_1=ruleJNIFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReduceExpressionRule());
						}
						set(
							$current,
							"projectionExpr",
							lv_projectionExpr_4_1,
							"alpha.model.Alpha.JNIFunction");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getReduceExpressionAccess().getProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1());
					}
					lv_projectionExpr_4_2=ruleJNIFunctionInArrayNotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReduceExpressionRule());
						}
						set(
							$current,
							"projectionExpr",
							lv_projectionExpr_4_2,
							"alpha.model.Alpha.JNIFunctionInArrayNotation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getReduceExpressionAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReduceExpressionAccess().getBodyAlphaExpressionParserRuleCall_6_0());
				}
				lv_body_6_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReduceExpressionRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getReduceExpressionAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleExternalReduceExpression
entryRuleExternalReduceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalReduceExpressionRule()); }
	iv_ruleExternalReduceExpression=ruleExternalReduceExpression
	{ $current=$iv_ruleExternalReduceExpression.current; }
	EOF;

// Rule ExternalReduceExpression
ruleExternalReduceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='reduce'
		{
			newLeafNode(otherlv_0, grammarAccess.getExternalReduceExpressionAccess().getReduceKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getExternalReduceExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalReduceExpressionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getExternalReduceExpressionAccess().getExternalFunctionExternalFunctionCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getExternalReduceExpressionAccess().getCommaKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExternalReduceExpressionAccess().getProjectionExprJNIFunctionParserRuleCall_4_0_0());
					}
					lv_projectionExpr_4_1=ruleJNIFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExternalReduceExpressionRule());
						}
						set(
							$current,
							"projectionExpr",
							lv_projectionExpr_4_1,
							"alpha.model.Alpha.JNIFunction");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getExternalReduceExpressionAccess().getProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1());
					}
					lv_projectionExpr_4_2=ruleJNIFunctionInArrayNotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExternalReduceExpressionRule());
						}
						set(
							$current,
							"projectionExpr",
							lv_projectionExpr_4_2,
							"alpha.model.Alpha.JNIFunctionInArrayNotation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getExternalReduceExpressionAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalReduceExpressionAccess().getBodyAlphaExpressionParserRuleCall_6_0());
				}
				lv_body_6_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalReduceExpressionRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getExternalReduceExpressionAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleArgReduceExpression
entryRuleArgReduceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgReduceExpressionRule()); }
	iv_ruleArgReduceExpression=ruleArgReduceExpression
	{ $current=$iv_ruleArgReduceExpression.current; }
	EOF;

// Rule ArgReduceExpression
ruleArgReduceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='argreduce'
		{
			newLeafNode(otherlv_0, grammarAccess.getArgReduceExpressionAccess().getArgreduceKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getArgReduceExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArgReduceExpressionAccess().getOperatorAREDUCTION_OPParserRuleCall_2_0());
				}
				lv_operator_2_0=ruleAREDUCTION_OP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArgReduceExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_2_0,
						"alpha.model.Alpha.AREDUCTION_OP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getArgReduceExpressionAccess().getCommaKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getArgReduceExpressionAccess().getProjectionExprJNIFunctionParserRuleCall_4_0_0());
					}
					lv_projectionExpr_4_1=ruleJNIFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArgReduceExpressionRule());
						}
						set(
							$current,
							"projectionExpr",
							lv_projectionExpr_4_1,
							"alpha.model.Alpha.JNIFunction");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getArgReduceExpressionAccess().getProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1());
					}
					lv_projectionExpr_4_2=ruleJNIFunctionInArrayNotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArgReduceExpressionRule());
						}
						set(
							$current,
							"projectionExpr",
							lv_projectionExpr_4_2,
							"alpha.model.Alpha.JNIFunctionInArrayNotation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getArgReduceExpressionAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArgReduceExpressionAccess().getBodyAlphaExpressionParserRuleCall_6_0());
				}
				lv_body_6_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArgReduceExpressionRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getArgReduceExpressionAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleExternalArgReduceExpression
entryRuleExternalArgReduceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalArgReduceExpressionRule()); }
	iv_ruleExternalArgReduceExpression=ruleExternalArgReduceExpression
	{ $current=$iv_ruleExternalArgReduceExpression.current; }
	EOF;

// Rule ExternalArgReduceExpression
ruleExternalArgReduceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='argreduce'
		{
			newLeafNode(otherlv_0, grammarAccess.getExternalArgReduceExpressionAccess().getArgreduceKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getExternalArgReduceExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalArgReduceExpressionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getExternalArgReduceExpressionAccess().getExternalFunctionExternalFunctionCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getExternalArgReduceExpressionAccess().getCommaKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExternalArgReduceExpressionAccess().getProjectionExprJNIFunctionParserRuleCall_4_0_0());
					}
					lv_projectionExpr_4_1=ruleJNIFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExternalArgReduceExpressionRule());
						}
						set(
							$current,
							"projectionExpr",
							lv_projectionExpr_4_1,
							"alpha.model.Alpha.JNIFunction");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getExternalArgReduceExpressionAccess().getProjectionExprJNIFunctionInArrayNotationParserRuleCall_4_0_1());
					}
					lv_projectionExpr_4_2=ruleJNIFunctionInArrayNotation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExternalArgReduceExpressionRule());
						}
						set(
							$current,
							"projectionExpr",
							lv_projectionExpr_4_2,
							"alpha.model.Alpha.JNIFunctionInArrayNotation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getExternalArgReduceExpressionAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalArgReduceExpressionAccess().getBodyAlphaExpressionParserRuleCall_6_0());
				}
				lv_body_6_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalArgReduceExpressionRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getExternalArgReduceExpressionAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleFuzzyReduceExpression
entryRuleFuzzyReduceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuzzyReduceExpressionRule()); }
	iv_ruleFuzzyReduceExpression=ruleFuzzyReduceExpression
	{ $current=$iv_ruleFuzzyReduceExpression.current; }
	EOF;

// Rule FuzzyReduceExpression
ruleFuzzyReduceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='reduce'
		{
			newLeafNode(otherlv_0, grammarAccess.getFuzzyReduceExpressionAccess().getReduceKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFuzzyReduceExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyReduceExpressionAccess().getOperatorAREDUCTION_OPParserRuleCall_2_0());
				}
				lv_operator_2_0=ruleAREDUCTION_OP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyReduceExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_2_0,
						"alpha.model.Alpha.AREDUCTION_OP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getFuzzyReduceExpressionAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyReduceExpressionAccess().getProjectionFunctionFuzzyFunctionParserRuleCall_4_0());
				}
				lv_projectionFunction_4_0=ruleFuzzyFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyReduceExpressionRule());
					}
					set(
						$current,
						"projectionFunction",
						lv_projectionFunction_4_0,
						"alpha.model.Alpha.FuzzyFunction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getFuzzyReduceExpressionAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyReduceExpressionAccess().getBodyAlphaExpressionParserRuleCall_6_0());
				}
				lv_body_6_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyReduceExpressionRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getFuzzyReduceExpressionAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleExternalFuzzyReduceExpression
entryRuleExternalFuzzyReduceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalFuzzyReduceExpressionRule()); }
	iv_ruleExternalFuzzyReduceExpression=ruleExternalFuzzyReduceExpression
	{ $current=$iv_ruleExternalFuzzyReduceExpression.current; }
	EOF;

// Rule ExternalFuzzyReduceExpression
ruleExternalFuzzyReduceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='reduce'
		{
			newLeafNode(otherlv_0, grammarAccess.getExternalFuzzyReduceExpressionAccess().getReduceKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getExternalFuzzyReduceExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalFuzzyReduceExpressionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getExternalFuzzyReduceExpressionAccess().getExternalFunctionExternalFunctionCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getExternalFuzzyReduceExpressionAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalFuzzyReduceExpressionAccess().getProjectionFunctionFuzzyFunctionParserRuleCall_4_0());
				}
				lv_projectionFunction_4_0=ruleFuzzyFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalFuzzyReduceExpressionRule());
					}
					set(
						$current,
						"projectionFunction",
						lv_projectionFunction_4_0,
						"alpha.model.Alpha.FuzzyFunction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getExternalFuzzyReduceExpressionAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalFuzzyReduceExpressionAccess().getBodyAlphaExpressionParserRuleCall_6_0());
				}
				lv_body_6_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalFuzzyReduceExpressionRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getExternalFuzzyReduceExpressionAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleFuzzyArgReduceExpression
entryRuleFuzzyArgReduceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuzzyArgReduceExpressionRule()); }
	iv_ruleFuzzyArgReduceExpression=ruleFuzzyArgReduceExpression
	{ $current=$iv_ruleFuzzyArgReduceExpression.current; }
	EOF;

// Rule FuzzyArgReduceExpression
ruleFuzzyArgReduceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='argreduce'
		{
			newLeafNode(otherlv_0, grammarAccess.getFuzzyArgReduceExpressionAccess().getArgreduceKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFuzzyArgReduceExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyArgReduceExpressionAccess().getOperatorAREDUCTION_OPParserRuleCall_2_0());
				}
				lv_operator_2_0=ruleAREDUCTION_OP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyArgReduceExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_2_0,
						"alpha.model.Alpha.AREDUCTION_OP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getFuzzyArgReduceExpressionAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyArgReduceExpressionAccess().getProjectionFunctionFuzzyFunctionParserRuleCall_4_0());
				}
				lv_projectionFunction_4_0=ruleFuzzyFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyArgReduceExpressionRule());
					}
					set(
						$current,
						"projectionFunction",
						lv_projectionFunction_4_0,
						"alpha.model.Alpha.FuzzyFunction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getFuzzyArgReduceExpressionAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuzzyArgReduceExpressionAccess().getBodyAlphaExpressionParserRuleCall_6_0());
				}
				lv_body_6_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuzzyArgReduceExpressionRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getFuzzyArgReduceExpressionAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleExternalFuzzyArgReduceExpression
entryRuleExternalFuzzyArgReduceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalFuzzyArgReduceExpressionRule()); }
	iv_ruleExternalFuzzyArgReduceExpression=ruleExternalFuzzyArgReduceExpression
	{ $current=$iv_ruleExternalFuzzyArgReduceExpression.current; }
	EOF;

// Rule ExternalFuzzyArgReduceExpression
ruleExternalFuzzyArgReduceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='argreduce'
		{
			newLeafNode(otherlv_0, grammarAccess.getExternalFuzzyArgReduceExpressionAccess().getArgreduceKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getExternalFuzzyArgReduceExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalFuzzyArgReduceExpressionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getExternalFuzzyArgReduceExpressionAccess().getExternalFunctionExternalFunctionCrossReference_2_0());
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getExternalFuzzyArgReduceExpressionAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalFuzzyArgReduceExpressionAccess().getProjectionFunctionFuzzyFunctionParserRuleCall_4_0());
				}
				lv_projectionFunction_4_0=ruleFuzzyFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalFuzzyArgReduceExpressionRule());
					}
					set(
						$current,
						"projectionFunction",
						lv_projectionFunction_4_0,
						"alpha.model.Alpha.FuzzyFunction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getExternalFuzzyArgReduceExpressionAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalFuzzyArgReduceExpressionAccess().getBodyAlphaExpressionParserRuleCall_6_0());
				}
				lv_body_6_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalFuzzyArgReduceExpressionRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getExternalFuzzyArgReduceExpressionAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleConvolutionExpression
entryRuleConvolutionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConvolutionExpressionRule()); }
	iv_ruleConvolutionExpression=ruleConvolutionExpression
	{ $current=$iv_ruleConvolutionExpression.current; }
	EOF;

// Rule ConvolutionExpression
ruleConvolutionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='conv'
		{
			newLeafNode(otherlv_0, grammarAccess.getConvolutionExpressionAccess().getConvKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConvolutionExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConvolutionExpressionAccess().getKernelDomainExprCalculatorExpressionParserRuleCall_2_0());
				}
				lv_kernelDomainExpr_2_0=ruleCalculatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConvolutionExpressionRule());
					}
					set(
						$current,
						"kernelDomainExpr",
						lv_kernelDomainExpr_2_0,
						"alpha.model.Alpha.CalculatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getConvolutionExpressionAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConvolutionExpressionAccess().getKernelExpressionAlphaExpressionParserRuleCall_4_0());
				}
				lv_kernelExpression_4_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConvolutionExpressionRule());
					}
					set(
						$current,
						"kernelExpression",
						lv_kernelExpression_4_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getConvolutionExpressionAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConvolutionExpressionAccess().getDataExpressionAlphaExpressionParserRuleCall_6_0());
				}
				lv_dataExpression_6_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConvolutionExpressionRule());
					}
					set(
						$current,
						"dataExpression",
						lv_dataExpression_6_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getConvolutionExpressionAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleSelectExpression
entryRuleSelectExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectExpressionRule()); }
	iv_ruleSelectExpression=ruleSelectExpression
	{ $current=$iv_ruleSelectExpression.current; }
	EOF;

// Rule SelectExpression
ruleSelectExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='select'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectExpressionAccess().getSelectKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectExpressionAccess().getRelationExprCalculatorExpressionParserRuleCall_1_0());
				}
				lv_relationExpr_1_0=ruleCalculatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectExpressionRule());
					}
					set(
						$current,
						"relationExpr",
						lv_relationExpr_1_0,
						"alpha.model.Alpha.CalculatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='from'
		{
			newLeafNode(otherlv_2, grammarAccess.getSelectExpressionAccess().getFromKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectExpressionAccess().getExprAlphaTerminalExpressionParserRuleCall_3_0());
				}
				lv_expr_3_0=ruleAlphaTerminalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectExpressionRule());
					}
					set(
						$current,
						"expr",
						lv_expr_3_0,
						"alpha.model.Alpha.AlphaTerminalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getOperatorAOrOPParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleAOrOP
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"alpha.model.Alpha.AOrOP");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"alpha.model.Alpha.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0());
		}
		this_RelationalExpression_0=ruleRelationalExpression
		{
			$current = $this_RelationalExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getOperatorAAndOPParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleAAndOP
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"alpha.model.Alpha.AAndOP");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRelationalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"alpha.model.Alpha.RelationalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	iv_ruleRelationalExpression=ruleRelationalExpression
	{ $current=$iv_ruleRelationalExpression.current; }
	EOF;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0());
		}
		this_AdditiveExpression_0=ruleAdditiveExpression
		{
			$current = $this_AdditiveExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRelationalExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOperatorARelationalOPParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleARelationalOP
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"alpha.model.Alpha.ARelationalOP");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAdditiveExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"alpha.model.Alpha.AdditiveExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	iv_ruleAdditiveExpression=ruleAdditiveExpression
	{ $current=$iv_ruleAdditiveExpression.current; }
	EOF;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
		}
		this_MultiplicativeExpression_0=ruleMultiplicativeExpression
		{
			$current = $this_MultiplicativeExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditiveExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperatorAAdditiveOPParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleAAdditiveOP
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"alpha.model.Alpha.AAdditiveOP");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplicativeExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"alpha.model.Alpha.MultiplicativeExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression
	{ $current=$iv_ruleMultiplicativeExpression.current; }
	EOF;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getMinMaxExpressionParserRuleCall_0());
		}
		this_MinMaxExpression_0=ruleMinMaxExpression
		{
			$current = $this_MinMaxExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicativeExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperatorAMultiplicativeOPParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleAMultiplicativeOP
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"alpha.model.Alpha.AMultiplicativeOP");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightMinMaxExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMinMaxExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"alpha.model.Alpha.MinMaxExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMinMaxExpression
entryRuleMinMaxExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMinMaxExpressionRule()); }
	iv_ruleMinMaxExpression=ruleMinMaxExpression
	{ $current=$iv_ruleMinMaxExpression.current; }
	EOF;

// Rule MinMaxExpression
ruleMinMaxExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMinMaxExpressionAccess().getUnaryOrTerminalExpressionParserRuleCall_0());
		}
		this_UnaryOrTerminalExpression_0=ruleUnaryOrTerminalExpression
		{
			$current = $this_UnaryOrTerminalExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMinMaxExpressionAccess().getBinaryExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMinMaxExpressionAccess().getOperatorAMINMAX_OPParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleAMINMAX_OP
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMinMaxExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"alpha.model.Alpha.AMINMAX_OP");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMinMaxExpressionAccess().getRightUnaryOrTerminalExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleUnaryOrTerminalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMinMaxExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"alpha.model.Alpha.UnaryOrTerminalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiArgExpression
entryRuleMultiArgExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiArgExpressionRule()); }
	iv_ruleMultiArgExpression=ruleMultiArgExpression
	{ $current=$iv_ruleMultiArgExpression.current; }
	EOF;

// Rule MultiArgExpression
ruleMultiArgExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiArgExpressionAccess().getOperatorAREDUCTION_OPParserRuleCall_0_0());
				}
				lv_operator_0_0=ruleAREDUCTION_OP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiArgExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"alpha.model.Alpha.AREDUCTION_OP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMultiArgExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiArgExpressionAccess().getExprsAlphaExpressionParserRuleCall_2_0());
				}
				lv_exprs_2_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiArgExpressionRule());
					}
					add(
						$current,
						"exprs",
						lv_exprs_2_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getMultiArgExpressionAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiArgExpressionAccess().getExprsAlphaExpressionParserRuleCall_3_1_0());
					}
					lv_exprs_4_0=ruleAlphaExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiArgExpressionRule());
						}
						add(
							$current,
							"exprs",
							lv_exprs_4_0,
							"alpha.model.Alpha.AlphaExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getMultiArgExpressionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleExternalMultiArgExpression
entryRuleExternalMultiArgExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalMultiArgExpressionRule()); }
	iv_ruleExternalMultiArgExpression=ruleExternalMultiArgExpression
	{ $current=$iv_ruleExternalMultiArgExpression.current; }
	EOF;

// Rule ExternalMultiArgExpression
ruleExternalMultiArgExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalMultiArgExpressionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getExternalMultiArgExpressionAccess().getExternalFunctionExternalFunctionCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getExternalMultiArgExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalMultiArgExpressionAccess().getExprsAlphaExpressionParserRuleCall_2_0());
				}
				lv_exprs_2_0=ruleAlphaExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalMultiArgExpressionRule());
					}
					add(
						$current,
						"exprs",
						lv_exprs_2_0,
						"alpha.model.Alpha.AlphaExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getExternalMultiArgExpressionAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExternalMultiArgExpressionAccess().getExprsAlphaExpressionParserRuleCall_3_1_0());
					}
					lv_exprs_4_0=ruleAlphaExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExternalMultiArgExpressionRule());
						}
						add(
							$current,
							"exprs",
							lv_exprs_4_0,
							"alpha.model.Alpha.AlphaExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getExternalMultiArgExpressionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleUnaryOrTerminalExpression
entryRuleUnaryOrTerminalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOrTerminalExpressionRule()); }
	iv_ruleUnaryOrTerminalExpression=ruleUnaryOrTerminalExpression
	{ $current=$iv_ruleUnaryOrTerminalExpression.current; }
	EOF;

// Rule UnaryOrTerminalExpression
ruleUnaryOrTerminalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryOrTerminalExpressionAccess().getUnaryExpressionParserRuleCall_0());
		}
		this_UnaryExpression_0=ruleUnaryExpression
		{
			$current = $this_UnaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryOrTerminalExpressionAccess().getAlphaTerminalExpressionParserRuleCall_1());
		}
		this_AlphaTerminalExpression_1=ruleAlphaTerminalExpression
		{
			$current = $this_AlphaTerminalExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOperatorAUnaryOPParserRuleCall_0_0());
				}
				lv_operator_0_0=ruleAUnaryOP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"alpha.model.Alpha.AUnaryOP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExprAlphaTerminalExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleAlphaTerminalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"alpha.model.Alpha.AlphaTerminalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariableExpression
entryRuleVariableExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableExpressionRule()); }
	iv_ruleVariableExpression=ruleVariableExpression
	{ $current=$iv_ruleVariableExpression.current; }
	EOF;

// Rule VariableExpression
ruleVariableExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableExpressionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getVariableExpressionAccess().getVariableVariableCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleConstantExpression
entryRuleConstantExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantExpressionRule()); }
	iv_ruleConstantExpression=ruleConstantExpression
	{ $current=$iv_ruleConstantExpression.current; }
	EOF;

// Rule ConstantExpression
ruleConstantExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstantExpressionAccess().getBooleanExpressionParserRuleCall_0());
		}
		this_BooleanExpression_0=ruleBooleanExpression
		{
			$current = $this_BooleanExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantExpressionAccess().getRealExpressionParserRuleCall_1());
		}
		this_RealExpression_1=ruleRealExpression
		{
			$current = $this_RealExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantExpressionAccess().getIntegerExpressionParserRuleCall_2());
		}
		this_IntegerExpression_2=ruleIntegerExpression
		{
			$current = $this_IntegerExpression_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	iv_ruleBooleanExpression=ruleBooleanExpression
	{ $current=$iv_ruleBooleanExpression.current; }
	EOF;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_BOOLEAN
			{
				newLeafNode(lv_value_0_0, grammarAccess.getBooleanExpressionAccess().getValueBOOLEANTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBooleanExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"alpha.model.Alpha.BOOLEAN");
			}
		)
	)
;

// Entry rule entryRuleIntegerExpression
entryRuleIntegerExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerExpressionRule()); }
	iv_ruleIntegerExpression=ruleIntegerExpression
	{ $current=$iv_ruleIntegerExpression.current; }
	EOF;

// Rule IntegerExpression
ruleIntegerExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntegerExpressionAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntegerExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleRealExpression
entryRuleRealExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealExpressionRule()); }
	iv_ruleRealExpression=ruleRealExpression
	{ $current=$iv_ruleRealExpression.current; }
	EOF;

// Rule RealExpression
ruleRealExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_FLOAT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getRealExpressionAccess().getValueFLOATTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRealExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"alpha.model.Alpha.FLOAT");
			}
		)
	)
;

// Entry rule entryRuleAREDUCTION_OP
entryRuleAREDUCTION_OP returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAREDUCTION_OPRule()); }
	iv_ruleAREDUCTION_OP=ruleAREDUCTION_OP
	{ $current=$iv_ruleAREDUCTION_OP.current.getText(); }
	EOF;

// Rule AREDUCTION_OP
ruleAREDUCTION_OP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='min'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAREDUCTION_OPAccess().getMinKeyword_0());
		}
		    |
		kw='max'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAREDUCTION_OPAccess().getMaxKeyword_1());
		}
		    |
		kw='prod'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAREDUCTION_OPAccess().getProdKeyword_2());
		}
		    |
		kw='sum'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAREDUCTION_OPAccess().getSumKeyword_3());
		}
		    |
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAREDUCTION_OPAccess().getAndKeyword_4());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAREDUCTION_OPAccess().getOrKeyword_5());
		}
		    |
		kw='xor'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAREDUCTION_OPAccess().getXorKeyword_6());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAREDUCTION_OPAccess().getPlusSignKeyword_7());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAREDUCTION_OPAccess().getAsteriskKeyword_8());
		}
	)
;

// Entry rule entryRuleAOrOP
entryRuleAOrOP returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAOrOPRule()); }
	iv_ruleAOrOP=ruleAOrOP
	{ $current=$iv_ruleAOrOP.current.getText(); }
	EOF;

// Rule AOrOP
ruleAOrOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAOrOPAccess().getOrKeyword_0());
		}
		    |
		kw='xor'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAOrOPAccess().getXorKeyword_1());
		}
	)
;

// Entry rule entryRuleAAndOP
entryRuleAAndOP returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAAndOPRule()); }
	iv_ruleAAndOP=ruleAAndOP
	{ $current=$iv_ruleAAndOP.current.getText(); }
	EOF;

// Rule AAndOP
ruleAAndOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='and'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getAAndOPAccess().getAndKeyword());
	}
;

// Entry rule entryRuleARelationalOP
entryRuleARelationalOP returns [String current=null]:
	{ newCompositeNode(grammarAccess.getARelationalOPRule()); }
	iv_ruleARelationalOP=ruleARelationalOP
	{ $current=$iv_ruleARelationalOP.current.getText(); }
	EOF;

// Rule ARelationalOP
ruleARelationalOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getARelationalOPAccess().getEqualsSignKeyword_0());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getARelationalOPAccess().getExclamationMarkEqualsSignKeyword_1());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getARelationalOPAccess().getGreaterThanSignEqualsSignKeyword_2());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getARelationalOPAccess().getGreaterThanSignKeyword_3());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getARelationalOPAccess().getLessThanSignKeyword_4());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getARelationalOPAccess().getLessThanSignEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleAAdditiveOP
entryRuleAAdditiveOP returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAAdditiveOPRule()); }
	iv_ruleAAdditiveOP=ruleAAdditiveOP
	{ $current=$iv_ruleAAdditiveOP.current.getText(); }
	EOF;

// Rule AAdditiveOP
ruleAAdditiveOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAAdditiveOPAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAAdditiveOPAccess().getHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRuleAMultiplicativeOP
entryRuleAMultiplicativeOP returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAMultiplicativeOPRule()); }
	iv_ruleAMultiplicativeOP=ruleAMultiplicativeOP
	{ $current=$iv_ruleAMultiplicativeOP.current.getText(); }
	EOF;

// Rule AMultiplicativeOP
ruleAMultiplicativeOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAMultiplicativeOPAccess().getAsteriskKeyword_0());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAMultiplicativeOPAccess().getSolidusKeyword_1());
		}
	)
;

// Entry rule entryRuleAMINMAX_OP
entryRuleAMINMAX_OP returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAMINMAX_OPRule()); }
	iv_ruleAMINMAX_OP=ruleAMINMAX_OP
	{ $current=$iv_ruleAMINMAX_OP.current.getText(); }
	EOF;

// Rule AMINMAX_OP
ruleAMINMAX_OP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='min'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAMINMAX_OPAccess().getMinKeyword_0());
		}
		    |
		kw='max'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAMINMAX_OPAccess().getMaxKeyword_1());
		}
	)
;

// Entry rule entryRuleAUnaryOP
entryRuleAUnaryOP returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAUnaryOPRule()); }
	iv_ruleAUnaryOP=ruleAUnaryOP
	{ $current=$iv_ruleAUnaryOP.current.getText(); }
	EOF;

// Rule AUnaryOP
ruleAUnaryOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='not'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAUnaryOPAccess().getNotKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAUnaryOPAccess().getHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRulePolyhedralObject
entryRulePolyhedralObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolyhedralObjectRule()); }
	iv_rulePolyhedralObject=rulePolyhedralObject
	{ $current=$iv_rulePolyhedralObject.current; }
	EOF;

// Rule PolyhedralObject
rulePolyhedralObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getPolyhedralObjectAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPolyhedralObjectRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"alpha.model.Alpha.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getPolyhedralObjectAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolyhedralObjectAccess().getExprCalculatorExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleCalculatorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolyhedralObjectRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"alpha.model.Alpha.CalculatorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCalculatorExpression
entryRuleCalculatorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalculatorExpressionRule()); }
	iv_ruleCalculatorExpression=ruleCalculatorExpression
	{ $current=$iv_ruleCalculatorExpression.current; }
	EOF;

// Rule CalculatorExpression
ruleCalculatorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCalculatorExpressionAccess().getUnaryOrTerminalCalculatorExpressionParserRuleCall_0());
		}
		this_UnaryOrTerminalCalculatorExpression_0=ruleUnaryOrTerminalCalculatorExpression
		{
			$current = $this_UnaryOrTerminalCalculatorExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getCalculatorExpressionAccess().getBinaryCalculatorExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCalculatorExpressionAccess().getOperatorABinaryCalcOpParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleABinaryCalcOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCalculatorExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"alpha.model.Alpha.ABinaryCalcOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCalculatorExpressionAccess().getRightUnaryOrTerminalCalculatorExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleUnaryOrTerminalCalculatorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCalculatorExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"alpha.model.Alpha.UnaryOrTerminalCalculatorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryOrTerminalCalculatorExpression
entryRuleUnaryOrTerminalCalculatorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOrTerminalCalculatorExpressionRule()); }
	iv_ruleUnaryOrTerminalCalculatorExpression=ruleUnaryOrTerminalCalculatorExpression
	{ $current=$iv_ruleUnaryOrTerminalCalculatorExpression.current; }
	EOF;

// Rule UnaryOrTerminalCalculatorExpression
ruleUnaryOrTerminalCalculatorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryOrTerminalCalculatorExpressionAccess().getUnaryCalculatorExpressionParserRuleCall_0());
		}
		this_UnaryCalculatorExpression_0=ruleUnaryCalculatorExpression
		{
			$current = $this_UnaryCalculatorExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryOrTerminalCalculatorExpressionAccess().getCalculatorExpressionTerminalParserRuleCall_1());
		}
		this_CalculatorExpressionTerminal_1=ruleCalculatorExpressionTerminal
		{
			$current = $this_CalculatorExpressionTerminal_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCalculatorExpressionTerminal
entryRuleCalculatorExpressionTerminal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalculatorExpressionTerminalRule()); }
	iv_ruleCalculatorExpressionTerminal=ruleCalculatorExpressionTerminal
	{ $current=$iv_ruleCalculatorExpressionTerminal.current; }
	EOF;

// Rule CalculatorExpressionTerminal
ruleCalculatorExpressionTerminal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCalculatorExpressionTerminalAccess().getJNIDomainParserRuleCall_0());
		}
		this_JNIDomain_0=ruleJNIDomain
		{
			$current = $this_JNIDomain_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCalculatorExpressionTerminalAccess().getJNIRelationParserRuleCall_1());
		}
		this_JNIRelation_1=ruleJNIRelation
		{
			$current = $this_JNIRelation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCalculatorExpressionTerminalAccess().getJNIFunctionParserRuleCall_2());
		}
		this_JNIFunction_2=ruleJNIFunction
		{
			$current = $this_JNIFunction_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCalculatorExpressionTerminalAccess().getDefinedObjectParserRuleCall_3());
		}
		this_DefinedObject_3=ruleDefinedObject
		{
			$current = $this_DefinedObject_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCalculatorExpressionTerminalAccess().getRectangularDomainParserRuleCall_4());
		}
		this_RectangularDomain_4=ruleRectangularDomain
		{
			$current = $this_RectangularDomain_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCalculatorExpressionTerminalAccess().getVariableDomainParserRuleCall_5());
		}
		this_VariableDomain_5=ruleVariableDomain
		{
			$current = $this_VariableDomain_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getCalculatorExpressionTerminalAccess().getLeftParenthesisKeyword_6_0());
			}
			{
				newCompositeNode(grammarAccess.getCalculatorExpressionTerminalAccess().getCalculatorExpressionParserRuleCall_6_1());
			}
			this_CalculatorExpression_7=ruleCalculatorExpression
			{
				$current = $this_CalculatorExpression_7.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getCalculatorExpressionTerminalAccess().getRightParenthesisKeyword_6_2());
			}
		)
	)
;

// Entry rule entryRuleUnaryCalculatorExpression
entryRuleUnaryCalculatorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryCalculatorExpressionRule()); }
	iv_ruleUnaryCalculatorExpression=ruleUnaryCalculatorExpression
	{ $current=$iv_ruleUnaryCalculatorExpression.current; }
	EOF;

// Rule UnaryCalculatorExpression
ruleUnaryCalculatorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryCalculatorExpressionAccess().getOperatorAUnaryCalcOpParserRuleCall_0_0());
				}
				lv_operator_0_0=ruleAUnaryCalcOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryCalculatorExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"alpha.model.Alpha.AUnaryCalcOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryCalculatorExpressionAccess().getExprCalculatorExpressionTerminalParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleCalculatorExpressionTerminal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryCalculatorExpressionRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"alpha.model.Alpha.CalculatorExpressionTerminal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariableDomain
entryRuleVariableDomain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDomainRule()); }
	iv_ruleVariableDomain=ruleVariableDomain
	{ $current=$iv_ruleVariableDomain.current; }
	EOF;

// Rule VariableDomain
ruleVariableDomain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDomainAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDomainRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getVariableDomainAccess().getVariableVariableCrossReference_1_0());
				}
			)
		)
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableDomainAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleRectangularDomain
entryRuleRectangularDomain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRectangularDomainRule()); }
	iv_ruleRectangularDomain=ruleRectangularDomain
	{ $current=$iv_ruleRectangularDomain.current; }
	EOF;

// Rule RectangularDomain
ruleRectangularDomain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getRectangularDomainAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRectangularDomainAccess().getUpperBoundsIndexNameParserRuleCall_1_0());
				}
				lv_upperBounds_1_0=ruleIndexName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRectangularDomainRule());
					}
					add(
						$current,
						"upperBounds",
						lv_upperBounds_1_0,
						"alpha.model.Alpha.IndexName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getRectangularDomainAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRectangularDomainAccess().getUpperBoundsIndexNameParserRuleCall_2_1_0());
					}
					lv_upperBounds_3_0=ruleIndexName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRectangularDomainRule());
						}
						add(
							$current,
							"upperBounds",
							lv_upperBounds_3_0,
							"alpha.model.Alpha.IndexName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getRectangularDomainAccess().getRightSquareBracketKeyword_3());
		}
		(
			otherlv_5='as'
			{
				newLeafNode(otherlv_5, grammarAccess.getRectangularDomainAccess().getAsKeyword_4_0());
			}
			otherlv_6='['
			{
				newLeafNode(otherlv_6, grammarAccess.getRectangularDomainAccess().getLeftSquareBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRectangularDomainAccess().getIndexNamesIndexNameParserRuleCall_4_2_0());
					}
					lv_indexNames_7_0=ruleIndexName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRectangularDomainRule());
						}
						add(
							$current,
							"indexNames",
							lv_indexNames_7_0,
							"alpha.model.Alpha.IndexName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getRectangularDomainAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRectangularDomainAccess().getIndexNamesIndexNameParserRuleCall_4_3_1_0());
						}
						lv_indexNames_9_0=ruleIndexName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRectangularDomainRule());
							}
							add(
								$current,
								"indexNames",
								lv_indexNames_9_0,
								"alpha.model.Alpha.IndexName");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10=']'
			{
				newLeafNode(otherlv_10, grammarAccess.getRectangularDomainAccess().getRightSquareBracketKeyword_4_4());
			}
		)?
	)
;

// Entry rule entryRuleDefinedObject
entryRuleDefinedObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinedObjectRule()); }
	iv_ruleDefinedObject=ruleDefinedObject
	{ $current=$iv_ruleDefinedObject.current; }
	EOF;

// Rule DefinedObject
ruleDefinedObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDefinedObjectRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getDefinedObjectAccess().getObjectPolyhedralObjectCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleAUnaryCalcOp
entryRuleAUnaryCalcOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAUnaryCalcOpRule()); }
	iv_ruleAUnaryCalcOp=ruleAUnaryCalcOp
	{ $current=$iv_ruleAUnaryCalcOp.current.getText(); }
	EOF;

// Rule AUnaryCalcOp
ruleAUnaryCalcOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='domain'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAUnaryCalcOpAccess().getDomainKeyword_0());
		}
		    |
		kw='range'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAUnaryCalcOpAccess().getRangeKeyword_1());
		}
		    |
		kw='complement'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAUnaryCalcOpAccess().getComplementKeyword_2());
		}
		    |
		kw='affine-hull'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAUnaryCalcOpAccess().getAffineHullKeyword_3());
		}
		    |
		kw='poly-hull'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAUnaryCalcOpAccess().getPolyHullKeyword_4());
		}
		    |
		kw='reverse'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAUnaryCalcOpAccess().getReverseKeyword_5());
		}
	)
;

// Entry rule entryRuleABinaryCalcOp
entryRuleABinaryCalcOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getABinaryCalcOpRule()); }
	iv_ruleABinaryCalcOp=ruleABinaryCalcOp
	{ $current=$iv_ruleABinaryCalcOp.current.getText(); }
	EOF;

// Rule ABinaryCalcOp
ruleABinaryCalcOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='cross'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getABinaryCalcOpAccess().getCrossKeyword_0());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getABinaryCalcOpAccess().getPlusSignKeyword_1());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getABinaryCalcOpAccess().getHyphenMinusKeyword_2());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getABinaryCalcOpAccess().getAsteriskKeyword_3());
		}
		    |
		kw='@'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getABinaryCalcOpAccess().getCommercialAtKeyword_4());
		}
		    |
		kw='->-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getABinaryCalcOpAccess().getHyphenMinusGreaterThanSignHyphenMinusKeyword_5());
		}
		    |
		kw='->*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getABinaryCalcOpAccess().getHyphenMinusGreaterThanSignAsteriskKeyword_6());
		}
	)
;

RULE_BOOLEAN : ('true'|'false');

RULE_FLOAT : ('0'..'9')+ '.' ('0'..'9')+;

RULE_ID : ('^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|'\'' ('a'..'z'|'A'..'Z'|'~'|'!'|'@'|'#'|'$'|'%'|'^'|'&'|'*'|'('|')'|'-'|'_'|'+'|'='|'|'|'/'|'?'|'0'..'9')+ '\'');

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
