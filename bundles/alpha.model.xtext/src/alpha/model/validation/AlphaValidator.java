/*
 * generated by Xtext 2.22.0
 */
package alpha.model.validation;

import java.util.LinkedList;
import java.util.List;
import java.util.stream.Stream;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.resource.IContainer;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.resource.IResourceDescriptions;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.eclipse.xtext.validation.ValidationMessageAcceptor;

import com.google.inject.Inject;
import com.google.inject.Provider;

import alpha.model.AlphaInternalStateConstructor;
import alpha.model.AlphaNameUniquenessChecker;
import alpha.model.AlphaRoot;
import alpha.model.issue.AlphaIssue;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class AlphaValidator extends AbstractAlphaValidator {
	@Inject
	private IContainer.Manager containerManager;
	  
	@Inject
	private IResourceDescriptions resourceDescriptions;
	  
	@Inject
	private Provider<XtextResourceSet> resourceSetProvider;
	
	
	private void flagEditor(final AlphaIssue.TYPE type, final String message, final EObject source, final EStructuralFeature feature, final int index) {
		if (type == AlphaIssue.TYPE.ERROR) {
			this.error(message, source, feature, index);
		}
		if (type == AlphaIssue.TYPE.WARNING) {
			this.warning(message, source, feature, index);
		}
	}

	@Check(CheckType.NORMAL)
	public void checkRoot(AlphaRoot root) {
		IResourceDescription alpha_description = this.resourceDescriptions.getResourceDescription(root.eResource().getURI());
		List<IContainer> visibleContainers = this.containerManager.getVisibleContainers(alpha_description, this.resourceDescriptions);
		final LinkedList<AlphaRoot> rootList = new LinkedList<AlphaRoot>();
		rootList.add(root);
		
        for (final IContainer visibleContainer : visibleContainers) {
			for (final IResourceDescription res : visibleContainer.getResourceDescriptions()) {
				if (res.getURI() != root.eResource().getURI() && res.getURI().fileExtension().contentEquals("alpha")) {
					final Resource r = this.resourceSetProvider.get().getResource(res.getURI(), true);
					try {
						final AlphaRoot ar = ((AlphaRoot) r.getContents().get(0));
						rootList.add(ar);
					} catch (ClassCastException cce) {}
				}
            }
        }

        List<AlphaIssue> issues = AlphaInternalStateConstructor.compute(root);
        List<AlphaIssue> uniqueness = AlphaNameUniquenessChecker.check(rootList);
        
        Stream.concat(issues.stream(), uniqueness.stream()).
        		filter(i->EcoreUtil.isAncestor(root, i.getSource())).
        			forEach(i->flagEditor(i.getType(), i.getMessage(), i.getSource(), i.getFeature(), ValidationMessageAcceptor.INSIGNIFICANT_INDEX));;
	}
	
}
