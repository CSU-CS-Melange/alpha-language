/*
 * generated by Xtext 2.15.0
 */
grammar InternalCommands;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package alpha.commands.model.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package alpha.commands.model.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import alpha.commands.model.services.CommandsGrammarAccess;

}

@parser::members {

 	private CommandsGrammarAccess grammarAccess;

    public InternalCommandsParser(TokenStream input, CommandsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "AlphaCommandsRoot";
   	}

   	@Override
   	protected CommandsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAlphaCommandsRoot
entryRuleAlphaCommandsRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlphaCommandsRootRule()); }
	iv_ruleAlphaCommandsRoot=ruleAlphaCommandsRoot
	{ $current=$iv_ruleAlphaCommandsRoot.current; }
	EOF;

// Rule AlphaCommandsRoot
ruleAlphaCommandsRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAlphaCommandsRootAccess().getCategoriesAlphaCommandCategoryParserRuleCall_0());
			}
			lv_categories_0_0=ruleAlphaCommandCategory
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAlphaCommandsRootRule());
				}
				add(
					$current,
					"categories",
					lv_categories_0_0,
					"alpha.commands.model.Commands.AlphaCommandCategory");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAlphaCommandCategory
entryRuleAlphaCommandCategory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlphaCommandCategoryRule()); }
	iv_ruleAlphaCommandCategory=ruleAlphaCommandCategory
	{ $current=$iv_ruleAlphaCommandCategory.current; }
	EOF;

// Rule AlphaCommandCategory
ruleAlphaCommandCategory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAlphaCommandCategoryAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlphaCommandCategoryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAlphaCommandCategoryAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlphaCommandCategoryAccess().getCommandsAlphaCommandParserRuleCall_2_0());
				}
				lv_commands_2_0=ruleAlphaCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlphaCommandCategoryRule());
					}
					add(
						$current,
						"commands",
						lv_commands_2_0,
						"alpha.commands.model.Commands.AlphaCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getAlphaCommandCategoryAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAlphaCommand
entryRuleAlphaCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlphaCommandRule()); }
	iv_ruleAlphaCommand=ruleAlphaCommand
	{ $current=$iv_ruleAlphaCommand.current; }
	EOF;

// Rule AlphaCommand
ruleAlphaCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAlphaCommandAccess().getBindingCommandBindingParserRuleCall_0_0());
				}
				lv_binding_0_0=ruleCommandBinding
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlphaCommandRule());
					}
					set(
						$current,
						"binding",
						lv_binding_0_0,
						"alpha.commands.model.Commands.CommandBinding");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					lv_label_1_0=RULE_ID
					{
						newLeafNode(lv_label_1_0, grammarAccess.getAlphaCommandAccess().getLabelIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAlphaCommandRule());
						}
						setWithLastConsumed(
							$current,
							"label",
							lv_label_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getAlphaCommandAccess().getColonKeyword_1_1());
			}
		)?
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getAlphaCommandAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlphaCommandRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAlphaCommandAccess().getSignatureAlphaCommandSignatureParserRuleCall_3_0());
				}
				lv_signature_4_0=ruleAlphaCommandSignature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlphaCommandRule());
					}
					set(
						$current,
						"signature",
						lv_signature_4_0,
						"alpha.commands.model.Commands.AlphaCommandSignature");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAlphaCommandAccess().getSpecializationsAlphaCommandSpecializationParserRuleCall_4_0());
				}
				lv_specializations_5_0=ruleAlphaCommandSpecialization
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlphaCommandRule());
					}
					add(
						$current,
						"specializations",
						lv_specializations_5_0,
						"alpha.commands.model.Commands.AlphaCommandSpecialization");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCommandBinding
entryRuleCommandBinding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandBindingRule()); }
	iv_ruleCommandBinding=ruleCommandBinding
	{ $current=$iv_ruleCommandBinding.current; }
	EOF;

// Rule CommandBinding
ruleCommandBinding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@Bind'
		{
			newLeafNode(otherlv_0, grammarAccess.getCommandBindingAccess().getBindKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCommandBindingAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommandBindingRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getCommandBindingAccess().getBindTargetCommandAlphaCommandCrossReference_2_0());
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getCommandBindingAccess().getSemicolonKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandBindingAccess().getArgumentBindingsArgumentBindingParserRuleCall_4_0_0());
					}
					lv_argumentBindings_4_0=ruleArgumentBinding
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandBindingRule());
						}
						add(
							$current,
							"argumentBindings",
							lv_argumentBindings_4_0,
							"alpha.commands.model.Commands.ArgumentBinding");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandBindingAccess().getArgumentRenamingsArgumentRenamingParserRuleCall_4_1_0());
					}
					lv_argumentRenamings_5_0=ruleArgumentRenaming
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandBindingRule());
						}
						add(
							$current,
							"argumentRenamings",
							lv_argumentRenamings_5_0,
							"alpha.commands.model.Commands.ArgumentRenaming");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getCommandBindingAccess().getCommaKeyword_5_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getCommandBindingAccess().getArgumentBindingsArgumentBindingParserRuleCall_5_1_0_0());
						}
						lv_argumentBindings_7_0=ruleArgumentBinding
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommandBindingRule());
							}
							add(
								$current,
								"argumentBindings",
								lv_argumentBindings_7_0,
								"alpha.commands.model.Commands.ArgumentBinding");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getCommandBindingAccess().getArgumentRenamingsArgumentRenamingParserRuleCall_5_1_1_0());
						}
						lv_argumentRenamings_8_0=ruleArgumentRenaming
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommandBindingRule());
							}
							add(
								$current,
								"argumentRenamings",
								lv_argumentRenamings_8_0,
								"alpha.commands.model.Commands.ArgumentRenaming");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getCommandBindingAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleArgumentBinding
entryRuleArgumentBinding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentBindingRule()); }
	iv_ruleArgumentBinding=ruleArgumentBinding
	{ $current=$iv_ruleArgumentBinding.current; }
	EOF;

// Rule ArgumentBinding
ruleArgumentBinding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgumentBindingRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getArgumentBindingAccess().getBindTargetAlphaCommandArgumentCrossReference_0_0());
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getArgumentBindingAccess().getEqualsSignKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getArgumentBindingAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgumentBindingRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getArgumentBindingAccess().getBindSourceAlphaCommandArgumentCrossReference_3_0());
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getArgumentBindingAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArgumentBindingRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getArgumentBindingAccess().getBindSourceAlphaCommandArgumentCrossReference_4_1_0());
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getArgumentBindingAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleArgumentRenaming
entryRuleArgumentRenaming returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRenamingRule()); }
	iv_ruleArgumentRenaming=ruleArgumentRenaming
	{ $current=$iv_ruleArgumentRenaming.current; }
	EOF;

// Rule ArgumentRenaming
ruleArgumentRenaming returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgumentRenamingRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getArgumentRenamingAccess().getBindTargetAlphaCommandArgumentCrossReference_0_0());
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getArgumentRenamingAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgumentRenamingRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getArgumentRenamingAccess().getBindSourceAlphaCommandArgumentCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleAlphaCommandSignature
entryRuleAlphaCommandSignature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlphaCommandSignatureRule()); }
	iv_ruleAlphaCommandSignature=ruleAlphaCommandSignature
	{ $current=$iv_ruleAlphaCommandSignature.current; }
	EOF;

// Rule AlphaCommandSignature
ruleAlphaCommandSignature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAlphaCommandSignatureAccess().getAlphaCommandSignatureAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAlphaCommandSignatureAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAlphaCommandSignatureAccess().getArgumentsAlphaCommandArgumentParserRuleCall_2_0_0());
					}
					lv_arguments_2_0=ruleAlphaCommandArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlphaCommandSignatureRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_2_0,
							"alpha.commands.model.Commands.AlphaCommandArgument");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getAlphaCommandSignatureAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAlphaCommandSignatureAccess().getArgumentsAlphaCommandArgumentParserRuleCall_2_1_1_0());
						}
						lv_arguments_4_0=ruleAlphaCommandArgument
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAlphaCommandSignatureRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_4_0,
								"alpha.commands.model.Commands.AlphaCommandArgument");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getAlphaCommandSignatureAccess().getRightParenthesisKeyword_3());
		}
		(
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getAlphaCommandSignatureAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAlphaCommandSignatureAccess().getReturnTypeArgumentTypeParserRuleCall_4_1_0());
					}
					lv_returnType_7_0=ruleArgumentType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlphaCommandSignatureRule());
						}
						set(
							$current,
							"returnType",
							lv_returnType_7_0,
							"alpha.commands.model.Commands.ArgumentType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAlphaCommandSpecialization
entryRuleAlphaCommandSpecialization returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlphaCommandSpecializationRule()); }
	iv_ruleAlphaCommandSpecialization=ruleAlphaCommandSpecialization
	{ $current=$iv_ruleAlphaCommandSpecialization.current; }
	EOF;

// Rule AlphaCommandSpecialization
ruleAlphaCommandSpecialization returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAlphaCommandSpecializationAccess().getAlphaCommandSpecializationAction_0(),
					$current);
			}
		)
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getAlphaCommandSpecializationAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAlphaCommandSpecializationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAlphaCommandSpecializationAccess().getArgumentsCommandArgumentSpecializationParserRuleCall_3_0_0());
					}
					lv_arguments_3_0=ruleCommandArgumentSpecialization
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlphaCommandSpecializationRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_3_0,
							"alpha.commands.model.Commands.CommandArgumentSpecialization");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getAlphaCommandSpecializationAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAlphaCommandSpecializationAccess().getArgumentsCommandArgumentSpecializationParserRuleCall_3_1_1_0());
						}
						lv_arguments_5_0=ruleCommandArgumentSpecialization
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAlphaCommandSpecializationRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_5_0,
								"alpha.commands.model.Commands.CommandArgumentSpecialization");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getAlphaCommandSpecializationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAlphaCommandArgument
entryRuleAlphaCommandArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlphaCommandArgumentRule()); }
	iv_ruleAlphaCommandArgument=ruleAlphaCommandArgument
	{ $current=$iv_ruleAlphaCommandArgument.current; }
	EOF;

// Rule AlphaCommandArgument
ruleAlphaCommandArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAlphaCommandArgumentAccess().getArgumentTypeArgumentTypeParserRuleCall_0_0());
				}
				lv_argumentType_0_0=ruleArgumentType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlphaCommandArgumentRule());
					}
					set(
						$current,
						"argumentType",
						lv_argumentType_0_0,
						"alpha.commands.model.Commands.ArgumentType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAlphaCommandArgumentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlphaCommandArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleCommandArgumentSpecialization
entryRuleCommandArgumentSpecialization returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandArgumentSpecializationRule()); }
	iv_ruleCommandArgumentSpecialization=ruleCommandArgumentSpecialization
	{ $current=$iv_ruleCommandArgumentSpecialization.current; }
	EOF;

// Rule CommandArgumentSpecialization
ruleCommandArgumentSpecialization returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandArgumentSpecializationAccess().getOverrideArgumentParserRuleCall_0());
		}
		this_OverrideArgument_0=ruleOverrideArgument
		{
			$current = $this_OverrideArgument_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandArgumentSpecializationAccess().getDefaultValueArgumentParserRuleCall_1());
		}
		this_DefaultValueArgument_1=ruleDefaultValueArgument
		{
			$current = $this_DefaultValueArgument_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandArgumentSpecializationAccess().getSameAsParentArgumentParserRuleCall_2());
		}
		this_SameAsParentArgument_2=ruleSameAsParentArgument
		{
			$current = $this_SameAsParentArgument_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOverrideArgument
entryRuleOverrideArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOverrideArgumentRule()); }
	iv_ruleOverrideArgument=ruleOverrideArgument
	{ $current=$iv_ruleOverrideArgument.current; }
	EOF;

// Rule OverrideArgument
ruleOverrideArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOverrideArgumentAccess().getArgumentTypeArgumentTypeParserRuleCall_0_0());
				}
				lv_argumentType_0_0=ruleArgumentType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOverrideArgumentRule());
					}
					set(
						$current,
						"argumentType",
						lv_argumentType_0_0,
						"alpha.commands.model.Commands.ArgumentType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOverrideArgumentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOverrideArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
	)
;

// Entry rule entryRuleDefaultValueArgument
entryRuleDefaultValueArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefaultValueArgumentRule()); }
	iv_ruleDefaultValueArgument=ruleDefaultValueArgument
	{ $current=$iv_ruleDefaultValueArgument.current; }
	EOF;

// Rule DefaultValueArgument
ruleDefaultValueArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getDefaultValueArgumentAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDefaultValueArgumentRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleSameAsParentArgument
entryRuleSameAsParentArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSameAsParentArgumentRule()); }
	iv_ruleSameAsParentArgument=ruleSameAsParentArgument
	{ $current=$iv_ruleSameAsParentArgument.current; }
	EOF;

// Rule SameAsParentArgument
ruleSameAsParentArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSameAsParentArgumentAccess().getSameAsParentArgumentAction_0(),
					$current);
			}
		)
		otherlv_1='_'
		{
			newLeafNode(otherlv_1, grammarAccess.getSameAsParentArgumentAccess().get_Keyword_1());
		}
	)
;

// Entry rule entryRuleArgumentType
entryRuleArgumentType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArgumentTypeRule()); }
	iv_ruleArgumentType=ruleArgumentType
	{ $current=$iv_ruleArgumentType.current.getText(); }
	EOF;

// Rule ArgumentType
ruleArgumentType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Void'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getVoidKeyword_0());
		}
		    |
		kw='AlphaNode'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getAlphaNodeKeyword_1());
		}
		    |
		kw='AlphaVisitable'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getAlphaVisitableKeyword_2());
		}
		    |
		kw='AlphaRoot'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getAlphaRootKeyword_3());
		}
		    |
		kw='AlphaSystem'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getAlphaSystemKeyword_4());
		}
		    |
		kw='SystemBody'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getSystemBodyKeyword_5());
		}
		    |
		kw='Variable'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getVariableKeyword_6());
		}
		    |
		kw='Equation'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getEquationKeyword_7());
		}
		    |
		kw='StandardEquation'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getStandardEquationKeyword_8());
		}
		    |
		kw='UseEquation'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getUseEquationKeyword_9());
		}
		    |
		kw='AlphaExpression'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getAlphaExpressionKeyword_10());
		}
		    |
		kw='AbstractReduceExpression'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getAbstractReduceExpressionKeyword_11());
		}
		    |
		kw='BinaryExpression'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getBinaryExpressionKeyword_12());
		}
		    |
		kw='DependenceExpression'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getDependenceExpressionKeyword_13());
		}
		    |
		kw='ReduceExpression'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getReduceExpressionKeyword_14());
		}
		    |
		kw='AffineFunction'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getAffineFunctionKeyword_15());
		}
		    |
		kw='Domain'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getDomainKeyword_16());
		}
		    |
		kw='ParameterDomain'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getParameterDomainKeyword_17());
		}
		    |
		kw='List<AlphaRoot>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getListAlphaRootKeyword_18());
		}
		    |
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getStringKeyword_19());
		}
		    |
		kw='List<String>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getListStringKeyword_20());
		}
		    |
		kw='String[]'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getStringKeyword_21());
		}
		    |
		kw='int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getIntKeyword_22());
		}
		    |
		kw='List<Integer>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getListIntegerKeyword_23());
		}
		    |
		kw='int[]'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentTypeAccess().getIntKeyword_24());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
