/*
 * generated by Xtext 2.18.0.M3
 */
package alpha.commands.model.serializer;

import alpha.commands.model.AlphaCommand;
import alpha.commands.model.AlphaCommandArgument;
import alpha.commands.model.AlphaCommandCategory;
import alpha.commands.model.AlphaCommandSignature;
import alpha.commands.model.AlphaCommandSpecialization;
import alpha.commands.model.AlphaCommandsRoot;
import alpha.commands.model.ArgumentBinding;
import alpha.commands.model.ArgumentRenaming;
import alpha.commands.model.CommandBinding;
import alpha.commands.model.DefaultValueArgument;
import alpha.commands.model.ModelPackage;
import alpha.commands.model.OverrideArgument;
import alpha.commands.model.SameAsParentArgument;
import alpha.commands.model.services.CommandsGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CommandsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CommandsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModelPackage.ALPHA_COMMAND:
				sequence_AlphaCommand(context, (AlphaCommand) semanticObject); 
				return; 
			case ModelPackage.ALPHA_COMMAND_ARGUMENT:
				sequence_AlphaCommandArgument(context, (AlphaCommandArgument) semanticObject); 
				return; 
			case ModelPackage.ALPHA_COMMAND_CATEGORY:
				sequence_AlphaCommandCategory(context, (AlphaCommandCategory) semanticObject); 
				return; 
			case ModelPackage.ALPHA_COMMAND_SIGNATURE:
				sequence_AlphaCommandSignature(context, (AlphaCommandSignature) semanticObject); 
				return; 
			case ModelPackage.ALPHA_COMMAND_SPECIALIZATION:
				sequence_AlphaCommandSpecialization(context, (AlphaCommandSpecialization) semanticObject); 
				return; 
			case ModelPackage.ALPHA_COMMANDS_ROOT:
				sequence_AlphaCommandsRoot(context, (AlphaCommandsRoot) semanticObject); 
				return; 
			case ModelPackage.ARGUMENT_BINDING:
				sequence_ArgumentBinding(context, (ArgumentBinding) semanticObject); 
				return; 
			case ModelPackage.ARGUMENT_RENAMING:
				sequence_ArgumentRenaming(context, (ArgumentRenaming) semanticObject); 
				return; 
			case ModelPackage.COMMAND_BINDING:
				sequence_CommandBinding(context, (CommandBinding) semanticObject); 
				return; 
			case ModelPackage.DEFAULT_VALUE_ARGUMENT:
				sequence_DefaultValueArgument(context, (DefaultValueArgument) semanticObject); 
				return; 
			case ModelPackage.OVERRIDE_ARGUMENT:
				sequence_OverrideArgument(context, (OverrideArgument) semanticObject); 
				return; 
			case ModelPackage.SAME_AS_PARENT_ARGUMENT:
				sequence_SameAsParentArgument(context, (SameAsParentArgument) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AlphaCommandArgument returns AlphaCommandArgument
	 *
	 * Constraint:
	 *     (argumentType=ArgumentType name=ID)
	 */
	protected void sequence_AlphaCommandArgument(ISerializationContext context, AlphaCommandArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ALPHA_COMMAND_ARGUMENT__ARGUMENT_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ALPHA_COMMAND_ARGUMENT__ARGUMENT_TYPE));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ALPHA_COMMAND_ARGUMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ALPHA_COMMAND_ARGUMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAlphaCommandArgumentAccess().getArgumentTypeArgumentTypeParserRuleCall_0_0(), semanticObject.getArgumentType());
		feeder.accept(grammarAccess.getAlphaCommandArgumentAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AlphaCommandCategory returns AlphaCommandCategory
	 *
	 * Constraint:
	 *     (name=ID commands+=AlphaCommand*)
	 */
	protected void sequence_AlphaCommandCategory(ISerializationContext context, AlphaCommandCategory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlphaCommandSignature returns AlphaCommandSignature
	 *
	 * Constraint:
	 *     ((arguments+=AlphaCommandArgument arguments+=AlphaCommandArgument*)? returnType=ArgumentType?)
	 */
	protected void sequence_AlphaCommandSignature(ISerializationContext context, AlphaCommandSignature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlphaCommandSpecialization returns AlphaCommandSpecialization
	 *
	 * Constraint:
	 *     (arguments+=CommandArgumentSpecialization arguments+=CommandArgumentSpecialization*)?
	 */
	protected void sequence_AlphaCommandSpecialization(ISerializationContext context, AlphaCommandSpecialization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlphaCommand returns AlphaCommand
	 *
	 * Constraint:
	 *     (binding=CommandBinding? label=ID? name=ID signature=AlphaCommandSignature specializations+=AlphaCommandSpecialization*)
	 */
	protected void sequence_AlphaCommand(ISerializationContext context, AlphaCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlphaCommandsRoot returns AlphaCommandsRoot
	 *
	 * Constraint:
	 *     categories+=AlphaCommandCategory+
	 */
	protected void sequence_AlphaCommandsRoot(ISerializationContext context, AlphaCommandsRoot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArgumentBinding returns ArgumentBinding
	 *
	 * Constraint:
	 *     (bindTarget=[AlphaCommandArgument|ID] bindSource+=[AlphaCommandArgument|ID] bindSource+=[AlphaCommandArgument|ID]*)
	 */
	protected void sequence_ArgumentBinding(ISerializationContext context, ArgumentBinding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArgumentRenaming returns ArgumentRenaming
	 *
	 * Constraint:
	 *     (bindTarget=[AlphaCommandArgument|ID] bindSource=[AlphaCommandArgument|ID])
	 */
	protected void sequence_ArgumentRenaming(ISerializationContext context, ArgumentRenaming semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ARGUMENT_RENAMING__BIND_TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ARGUMENT_RENAMING__BIND_TARGET));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ARGUMENT_RENAMING__BIND_SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ARGUMENT_RENAMING__BIND_SOURCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArgumentRenamingAccess().getBindTargetAlphaCommandArgumentIDTerminalRuleCall_0_0_1(), semanticObject.eGet(ModelPackage.Literals.ARGUMENT_RENAMING__BIND_TARGET, false));
		feeder.accept(grammarAccess.getArgumentRenamingAccess().getBindSourceAlphaCommandArgumentIDTerminalRuleCall_2_0_1(), semanticObject.eGet(ModelPackage.Literals.ARGUMENT_RENAMING__BIND_SOURCE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CommandBinding returns CommandBinding
	 *
	 * Constraint:
	 *     (
	 *         bindTargetCommand=[AlphaCommand|ID] 
	 *         (argumentBindings+=ArgumentBinding | argumentRenamings+=ArgumentRenaming) 
	 *         argumentBindings+=ArgumentBinding? 
	 *         (argumentRenamings+=ArgumentRenaming? argumentBindings+=ArgumentBinding?)*
	 *     )
	 */
	protected void sequence_CommandBinding(ISerializationContext context, CommandBinding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommandArgumentSpecialization returns DefaultValueArgument
	 *     DefaultValueArgument returns DefaultValueArgument
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_DefaultValueArgument(ISerializationContext context, DefaultValueArgument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.DEFAULT_VALUE_ARGUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.DEFAULT_VALUE_ARGUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefaultValueArgumentAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CommandArgumentSpecialization returns OverrideArgument
	 *     OverrideArgument returns OverrideArgument
	 *
	 * Constraint:
	 *     (argumentType=ArgumentType name=ID?)
	 */
	protected void sequence_OverrideArgument(ISerializationContext context, OverrideArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommandArgumentSpecialization returns SameAsParentArgument
	 *     SameAsParentArgument returns SameAsParentArgument
	 *
	 * Constraint:
	 *     {SameAsParentArgument}
	 */
	protected void sequence_SameAsParentArgument(ISerializationContext context, SameAsParentArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
