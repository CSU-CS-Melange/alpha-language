/*
 * generated by Xtext 2.15.0
 */
package alpha.commands.model.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CommandsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AlphaCommandsRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.AlphaCommandsRoot");
		private final Assignment cCategoriesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCategoriesAlphaCommandCategoryParserRuleCall_0 = (RuleCall)cCategoriesAssignment.eContents().get(0);
		
		//AlphaCommandsRoot:
		//	categories+=AlphaCommandCategory*;
		@Override public ParserRule getRule() { return rule; }
		
		//categories+=AlphaCommandCategory*
		public Assignment getCategoriesAssignment() { return cCategoriesAssignment; }
		
		//AlphaCommandCategory
		public RuleCall getCategoriesAlphaCommandCategoryParserRuleCall_0() { return cCategoriesAlphaCommandCategoryParserRuleCall_0; }
	}
	public class AlphaCommandCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.AlphaCommandCategory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsAlphaCommandParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AlphaCommandCategory:
		//	name=ID '{'
		//	commands+=AlphaCommand*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' commands+=AlphaCommand* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//commands+=AlphaCommand*
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }
		
		//AlphaCommand
		public RuleCall getCommandsAlphaCommandParserRuleCall_2_0() { return cCommandsAlphaCommandParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AlphaCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.AlphaCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBindingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBindingCommandBindingParserRuleCall_0_0 = (RuleCall)cBindingAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLabelAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_1_0_0 = (RuleCall)cLabelAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cSignatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignatureAlphaCommandSignatureParserRuleCall_3_0 = (RuleCall)cSignatureAssignment_3.eContents().get(0);
		private final Assignment cSpecializationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSpecializationsAlphaCommandSpecializationParserRuleCall_4_0 = (RuleCall)cSpecializationsAssignment_4.eContents().get(0);
		
		//AlphaCommand:
		//	binding=CommandBinding? (label=ID ':')? name=ID signature=AlphaCommandSignature
		//	specializations+=AlphaCommandSpecialization*;
		@Override public ParserRule getRule() { return rule; }
		
		//binding=CommandBinding? (label=ID ':')? name=ID signature=AlphaCommandSignature
		//specializations+=AlphaCommandSpecialization*
		public Group getGroup() { return cGroup; }
		
		//binding=CommandBinding?
		public Assignment getBindingAssignment_0() { return cBindingAssignment_0; }
		
		//CommandBinding
		public RuleCall getBindingCommandBindingParserRuleCall_0_0() { return cBindingCommandBindingParserRuleCall_0_0; }
		
		//(label=ID ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//label=ID
		public Assignment getLabelAssignment_1_0() { return cLabelAssignment_1_0; }
		
		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_0_0() { return cLabelIDTerminalRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//signature=AlphaCommandSignature
		public Assignment getSignatureAssignment_3() { return cSignatureAssignment_3; }
		
		//AlphaCommandSignature
		public RuleCall getSignatureAlphaCommandSignatureParserRuleCall_3_0() { return cSignatureAlphaCommandSignatureParserRuleCall_3_0; }
		
		//specializations+=AlphaCommandSpecialization*
		public Assignment getSpecializationsAssignment_4() { return cSpecializationsAssignment_4; }
		
		//AlphaCommandSpecialization
		public RuleCall getSpecializationsAlphaCommandSpecializationParserRuleCall_4_0() { return cSpecializationsAlphaCommandSpecializationParserRuleCall_4_0; }
	}
	public class CommandBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.CommandBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBindTargetCommandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cBindTargetCommandAlphaCommandCrossReference_2_0 = (CrossReference)cBindTargetCommandAssignment_2.eContents().get(0);
		private final RuleCall cBindTargetCommandAlphaCommandIDTerminalRuleCall_2_0_1 = (RuleCall)cBindTargetCommandAlphaCommandCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cArgumentBindingsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cArgumentBindingsArgumentBindingParserRuleCall_4_0_0 = (RuleCall)cArgumentBindingsAssignment_4_0.eContents().get(0);
		private final Assignment cArgumentRenamingsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cArgumentRenamingsArgumentRenamingParserRuleCall_4_1_0 = (RuleCall)cArgumentRenamingsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cArgumentBindingsAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cArgumentBindingsArgumentBindingParserRuleCall_5_1_0_0 = (RuleCall)cArgumentBindingsAssignment_5_1_0.eContents().get(0);
		private final Assignment cArgumentRenamingsAssignment_5_1_1 = (Assignment)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cArgumentRenamingsArgumentRenamingParserRuleCall_5_1_1_0 = (RuleCall)cArgumentRenamingsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CommandBinding:
		//	'@Bind' '(' bindTargetCommand=[AlphaCommand] ';' (argumentBindings+=ArgumentBinding |
		//	argumentRenamings+=ArgumentRenaming) (',' (argumentBindings+=ArgumentBinding | argumentRenamings+=ArgumentRenaming))*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'@Bind' '(' bindTargetCommand=[AlphaCommand] ';' (argumentBindings+=ArgumentBinding |
		//argumentRenamings+=ArgumentRenaming) (',' (argumentBindings+=ArgumentBinding | argumentRenamings+=ArgumentRenaming))*
		//')'
		public Group getGroup() { return cGroup; }
		
		//'@Bind'
		public Keyword getBindKeyword_0() { return cBindKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//bindTargetCommand=[AlphaCommand]
		public Assignment getBindTargetCommandAssignment_2() { return cBindTargetCommandAssignment_2; }
		
		//[AlphaCommand]
		public CrossReference getBindTargetCommandAlphaCommandCrossReference_2_0() { return cBindTargetCommandAlphaCommandCrossReference_2_0; }
		
		//ID
		public RuleCall getBindTargetCommandAlphaCommandIDTerminalRuleCall_2_0_1() { return cBindTargetCommandAlphaCommandIDTerminalRuleCall_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//argumentBindings+=ArgumentBinding | argumentRenamings+=ArgumentRenaming
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//argumentBindings+=ArgumentBinding
		public Assignment getArgumentBindingsAssignment_4_0() { return cArgumentBindingsAssignment_4_0; }
		
		//ArgumentBinding
		public RuleCall getArgumentBindingsArgumentBindingParserRuleCall_4_0_0() { return cArgumentBindingsArgumentBindingParserRuleCall_4_0_0; }
		
		//argumentRenamings+=ArgumentRenaming
		public Assignment getArgumentRenamingsAssignment_4_1() { return cArgumentRenamingsAssignment_4_1; }
		
		//ArgumentRenaming
		public RuleCall getArgumentRenamingsArgumentRenamingParserRuleCall_4_1_0() { return cArgumentRenamingsArgumentRenamingParserRuleCall_4_1_0; }
		
		//(',' (argumentBindings+=ArgumentBinding | argumentRenamings+=ArgumentRenaming))*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//argumentBindings+=ArgumentBinding | argumentRenamings+=ArgumentRenaming
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//argumentBindings+=ArgumentBinding
		public Assignment getArgumentBindingsAssignment_5_1_0() { return cArgumentBindingsAssignment_5_1_0; }
		
		//ArgumentBinding
		public RuleCall getArgumentBindingsArgumentBindingParserRuleCall_5_1_0_0() { return cArgumentBindingsArgumentBindingParserRuleCall_5_1_0_0; }
		
		//argumentRenamings+=ArgumentRenaming
		public Assignment getArgumentRenamingsAssignment_5_1_1() { return cArgumentRenamingsAssignment_5_1_1; }
		
		//ArgumentRenaming
		public RuleCall getArgumentRenamingsArgumentRenamingParserRuleCall_5_1_1_0() { return cArgumentRenamingsArgumentRenamingParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ArgumentBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.ArgumentBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBindTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBindTargetAlphaCommandArgumentCrossReference_0_0 = (CrossReference)cBindTargetAssignment_0.eContents().get(0);
		private final RuleCall cBindTargetAlphaCommandArgumentIDTerminalRuleCall_0_0_1 = (RuleCall)cBindTargetAlphaCommandArgumentCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBindSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cBindSourceAlphaCommandArgumentCrossReference_3_0 = (CrossReference)cBindSourceAssignment_3.eContents().get(0);
		private final RuleCall cBindSourceAlphaCommandArgumentIDTerminalRuleCall_3_0_1 = (RuleCall)cBindSourceAlphaCommandArgumentCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBindSourceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cBindSourceAlphaCommandArgumentCrossReference_4_1_0 = (CrossReference)cBindSourceAssignment_4_1.eContents().get(0);
		private final RuleCall cBindSourceAlphaCommandArgumentIDTerminalRuleCall_4_1_0_1 = (RuleCall)cBindSourceAlphaCommandArgumentCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ArgumentBinding:
		//	bindTarget=[AlphaCommandArgument] '=' '(' bindSource+=[AlphaCommandArgument] (',' bindSource+=[AlphaCommandArgument])*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//bindTarget=[AlphaCommandArgument] '=' '(' bindSource+=[AlphaCommandArgument] (',' bindSource+=[AlphaCommandArgument])*
		//')'
		public Group getGroup() { return cGroup; }
		
		//bindTarget=[AlphaCommandArgument]
		public Assignment getBindTargetAssignment_0() { return cBindTargetAssignment_0; }
		
		//[AlphaCommandArgument]
		public CrossReference getBindTargetAlphaCommandArgumentCrossReference_0_0() { return cBindTargetAlphaCommandArgumentCrossReference_0_0; }
		
		//ID
		public RuleCall getBindTargetAlphaCommandArgumentIDTerminalRuleCall_0_0_1() { return cBindTargetAlphaCommandArgumentIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//bindSource+=[AlphaCommandArgument]
		public Assignment getBindSourceAssignment_3() { return cBindSourceAssignment_3; }
		
		//[AlphaCommandArgument]
		public CrossReference getBindSourceAlphaCommandArgumentCrossReference_3_0() { return cBindSourceAlphaCommandArgumentCrossReference_3_0; }
		
		//ID
		public RuleCall getBindSourceAlphaCommandArgumentIDTerminalRuleCall_3_0_1() { return cBindSourceAlphaCommandArgumentIDTerminalRuleCall_3_0_1; }
		
		//(',' bindSource+=[AlphaCommandArgument])*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//bindSource+=[AlphaCommandArgument]
		public Assignment getBindSourceAssignment_4_1() { return cBindSourceAssignment_4_1; }
		
		//[AlphaCommandArgument]
		public CrossReference getBindSourceAlphaCommandArgumentCrossReference_4_1_0() { return cBindSourceAlphaCommandArgumentCrossReference_4_1_0; }
		
		//ID
		public RuleCall getBindSourceAlphaCommandArgumentIDTerminalRuleCall_4_1_0_1() { return cBindSourceAlphaCommandArgumentIDTerminalRuleCall_4_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ArgumentRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.ArgumentRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBindTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBindTargetAlphaCommandArgumentCrossReference_0_0 = (CrossReference)cBindTargetAssignment_0.eContents().get(0);
		private final RuleCall cBindTargetAlphaCommandArgumentIDTerminalRuleCall_0_0_1 = (RuleCall)cBindTargetAlphaCommandArgumentCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBindSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cBindSourceAlphaCommandArgumentCrossReference_2_0 = (CrossReference)cBindSourceAssignment_2.eContents().get(0);
		private final RuleCall cBindSourceAlphaCommandArgumentIDTerminalRuleCall_2_0_1 = (RuleCall)cBindSourceAlphaCommandArgumentCrossReference_2_0.eContents().get(1);
		
		//ArgumentRenaming:
		//	bindTarget=[AlphaCommandArgument] '=' bindSource=[AlphaCommandArgument];
		@Override public ParserRule getRule() { return rule; }
		
		//bindTarget=[AlphaCommandArgument] '=' bindSource=[AlphaCommandArgument]
		public Group getGroup() { return cGroup; }
		
		//bindTarget=[AlphaCommandArgument]
		public Assignment getBindTargetAssignment_0() { return cBindTargetAssignment_0; }
		
		//[AlphaCommandArgument]
		public CrossReference getBindTargetAlphaCommandArgumentCrossReference_0_0() { return cBindTargetAlphaCommandArgumentCrossReference_0_0; }
		
		//ID
		public RuleCall getBindTargetAlphaCommandArgumentIDTerminalRuleCall_0_0_1() { return cBindTargetAlphaCommandArgumentIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//bindSource=[AlphaCommandArgument]
		public Assignment getBindSourceAssignment_2() { return cBindSourceAssignment_2; }
		
		//[AlphaCommandArgument]
		public CrossReference getBindSourceAlphaCommandArgumentCrossReference_2_0() { return cBindSourceAlphaCommandArgumentCrossReference_2_0; }
		
		//ID
		public RuleCall getBindSourceAlphaCommandArgumentIDTerminalRuleCall_2_0_1() { return cBindSourceAlphaCommandArgumentIDTerminalRuleCall_2_0_1; }
	}
	public class AlphaCommandSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.AlphaCommandSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAlphaCommandSignatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsAlphaCommandArgumentParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsAlphaCommandArgumentParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReturnTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReturnTypeArgumentTypeParserRuleCall_4_1_0 = (RuleCall)cReturnTypeAssignment_4_1.eContents().get(0);
		
		//AlphaCommandSignature:
		//	{AlphaCommandSignature} '(' (arguments+=AlphaCommandArgument (',' arguments+=AlphaCommandArgument)*)? ')' (':'
		//	returnType=ArgumentType)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{AlphaCommandSignature} '(' (arguments+=AlphaCommandArgument (',' arguments+=AlphaCommandArgument)*)? ')' (':'
		//returnType=ArgumentType)?
		public Group getGroup() { return cGroup; }
		
		//{AlphaCommandSignature}
		public Action getAlphaCommandSignatureAction_0() { return cAlphaCommandSignatureAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(arguments+=AlphaCommandArgument (',' arguments+=AlphaCommandArgument)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//arguments+=AlphaCommandArgument
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//AlphaCommandArgument
		public RuleCall getArgumentsAlphaCommandArgumentParserRuleCall_2_0_0() { return cArgumentsAlphaCommandArgumentParserRuleCall_2_0_0; }
		
		//(',' arguments+=AlphaCommandArgument)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//arguments+=AlphaCommandArgument
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }
		
		//AlphaCommandArgument
		public RuleCall getArgumentsAlphaCommandArgumentParserRuleCall_2_1_1_0() { return cArgumentsAlphaCommandArgumentParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//(':' returnType=ArgumentType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//returnType=ArgumentType
		public Assignment getReturnTypeAssignment_4_1() { return cReturnTypeAssignment_4_1; }
		
		//ArgumentType
		public RuleCall getReturnTypeArgumentTypeParserRuleCall_4_1_0() { return cReturnTypeArgumentTypeParserRuleCall_4_1_0; }
	}
	public class AlphaCommandSpecializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.AlphaCommandSpecialization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAlphaCommandSpecializationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsCommandArgumentSpecializationParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsCommandArgumentSpecializationParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AlphaCommandSpecialization:
		//	{AlphaCommandSpecialization} '=>' '(' (arguments+=CommandArgumentSpecialization (','
		//	arguments+=CommandArgumentSpecialization)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{AlphaCommandSpecialization} '=>' '(' (arguments+=CommandArgumentSpecialization (','
		//arguments+=CommandArgumentSpecialization)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{AlphaCommandSpecialization}
		public Action getAlphaCommandSpecializationAction_0() { return cAlphaCommandSpecializationAction_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(arguments+=CommandArgumentSpecialization (',' arguments+=CommandArgumentSpecialization)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//arguments+=CommandArgumentSpecialization
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//CommandArgumentSpecialization
		public RuleCall getArgumentsCommandArgumentSpecializationParserRuleCall_3_0_0() { return cArgumentsCommandArgumentSpecializationParserRuleCall_3_0_0; }
		
		//(',' arguments+=CommandArgumentSpecialization)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//arguments+=CommandArgumentSpecialization
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//CommandArgumentSpecialization
		public RuleCall getArgumentsCommandArgumentSpecializationParserRuleCall_3_1_1_0() { return cArgumentsCommandArgumentSpecializationParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AlphaCommandArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.AlphaCommandArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentTypeArgumentTypeParserRuleCall_0_0 = (RuleCall)cArgumentTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AlphaCommandArgument:
		//	argumentType=ArgumentType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//argumentType=ArgumentType name=ID
		public Group getGroup() { return cGroup; }
		
		//argumentType=ArgumentType
		public Assignment getArgumentTypeAssignment_0() { return cArgumentTypeAssignment_0; }
		
		//ArgumentType
		public RuleCall getArgumentTypeArgumentTypeParserRuleCall_0_0() { return cArgumentTypeArgumentTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class CommandArgumentSpecializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.CommandArgumentSpecialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOverrideArgumentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefaultValueArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSameAsParentArgumentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CommandArgumentSpecialization:
		//	OverrideArgument | DefaultValueArgument | SameAsParentArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//OverrideArgument | DefaultValueArgument | SameAsParentArgument
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OverrideArgument
		public RuleCall getOverrideArgumentParserRuleCall_0() { return cOverrideArgumentParserRuleCall_0; }
		
		//DefaultValueArgument
		public RuleCall getDefaultValueArgumentParserRuleCall_1() { return cDefaultValueArgumentParserRuleCall_1; }
		
		//SameAsParentArgument
		public RuleCall getSameAsParentArgumentParserRuleCall_2() { return cSameAsParentArgumentParserRuleCall_2; }
	}
	public class OverrideArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.OverrideArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentTypeArgumentTypeParserRuleCall_0_0 = (RuleCall)cArgumentTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//OverrideArgument:
		//	argumentType=ArgumentType name=ID?;
		@Override public ParserRule getRule() { return rule; }
		
		//argumentType=ArgumentType name=ID?
		public Group getGroup() { return cGroup; }
		
		//argumentType=ArgumentType
		public Assignment getArgumentTypeAssignment_0() { return cArgumentTypeAssignment_0; }
		
		//ArgumentType
		public RuleCall getArgumentTypeArgumentTypeParserRuleCall_0_0() { return cArgumentTypeArgumentTypeParserRuleCall_0_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DefaultValueArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.DefaultValueArgument");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DefaultValueArgument:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class SameAsParentArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.SameAsParentArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSameAsParentArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword c_Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SameAsParentArgument:
		//	{SameAsParentArgument} '_';
		@Override public ParserRule getRule() { return rule; }
		
		//{SameAsParentArgument} '_'
		public Group getGroup() { return cGroup; }
		
		//{SameAsParentArgument}
		public Action getSameAsParentArgumentAction_0() { return cSameAsParentArgumentAction_0; }
		
		//'_'
		public Keyword get_Keyword_1() { return c_Keyword_1; }
	}
	public class ArgumentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.commands.model.Commands.ArgumentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAlphaNodeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAlphaVisitableKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAlphaRootKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAlphaSystemKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSystemBodyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVariableKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cEquationKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cStandardEquationKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cUseEquationKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAlphaExpressionKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cAbstractReduceExpressionKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cBinaryExpressionKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cDependenceExpressionKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cAffineFunctionKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cDomainKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cParameterDomainKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cListAlphaRootKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cStringKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cListStringKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cStringKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cIntKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cListIntegerKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cIntKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		
		//ArgumentType ArgumentType:
		//	"Void" |
		//	"AlphaNode" |
		//	"AlphaVisitable" |
		//	"AlphaRoot" |
		//	"AlphaSystem" |
		//	"SystemBody" |
		//	"Variable" |
		//	"Equation" |
		//	"StandardEquation" |
		//	"UseEquation" |
		//	"AlphaExpression" |
		//	"AbstractReduceExpression" |
		//	"BinaryExpression" |
		//	"DependenceExpression" |
		//	"AffineFunction" |
		//	"Domain" |
		//	"ParameterDomain" |
		//	"List<AlphaRoot>" |
		//	"String" |
		//	"List<String>" |
		//	"String[]" |
		//	"int" |
		//	"List<Integer>" |
		//	"int[]";
		@Override public ParserRule getRule() { return rule; }
		
		//"Void" | "AlphaNode" | "AlphaVisitable" | "AlphaRoot" | "AlphaSystem" | "SystemBody" | "Variable" | "Equation" |
		//"StandardEquation" | "UseEquation" | "AlphaExpression" | "AbstractReduceExpression" | "BinaryExpression" |
		//"DependenceExpression" | "AffineFunction" | "Domain" | "ParameterDomain" | "List<AlphaRoot>" | "String" |
		//"List<String>" | "String[]" | "int" | "List<Integer>" | "int[]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"Void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }
		
		//"AlphaNode"
		public Keyword getAlphaNodeKeyword_1() { return cAlphaNodeKeyword_1; }
		
		//"AlphaVisitable"
		public Keyword getAlphaVisitableKeyword_2() { return cAlphaVisitableKeyword_2; }
		
		//"AlphaRoot"
		public Keyword getAlphaRootKeyword_3() { return cAlphaRootKeyword_3; }
		
		//"AlphaSystem"
		public Keyword getAlphaSystemKeyword_4() { return cAlphaSystemKeyword_4; }
		
		//"SystemBody"
		public Keyword getSystemBodyKeyword_5() { return cSystemBodyKeyword_5; }
		
		//"Variable"
		public Keyword getVariableKeyword_6() { return cVariableKeyword_6; }
		
		//"Equation"
		public Keyword getEquationKeyword_7() { return cEquationKeyword_7; }
		
		//"StandardEquation"
		public Keyword getStandardEquationKeyword_8() { return cStandardEquationKeyword_8; }
		
		//"UseEquation"
		public Keyword getUseEquationKeyword_9() { return cUseEquationKeyword_9; }
		
		//"AlphaExpression"
		public Keyword getAlphaExpressionKeyword_10() { return cAlphaExpressionKeyword_10; }
		
		//"AbstractReduceExpression"
		public Keyword getAbstractReduceExpressionKeyword_11() { return cAbstractReduceExpressionKeyword_11; }
		
		//"BinaryExpression"
		public Keyword getBinaryExpressionKeyword_12() { return cBinaryExpressionKeyword_12; }
		
		//"DependenceExpression"
		public Keyword getDependenceExpressionKeyword_13() { return cDependenceExpressionKeyword_13; }
		
		//"AffineFunction"
		public Keyword getAffineFunctionKeyword_14() { return cAffineFunctionKeyword_14; }
		
		//"Domain"
		public Keyword getDomainKeyword_15() { return cDomainKeyword_15; }
		
		//"ParameterDomain"
		public Keyword getParameterDomainKeyword_16() { return cParameterDomainKeyword_16; }
		
		//"List<AlphaRoot>"
		public Keyword getListAlphaRootKeyword_17() { return cListAlphaRootKeyword_17; }
		
		//"String"
		public Keyword getStringKeyword_18() { return cStringKeyword_18; }
		
		//"List<String>"
		public Keyword getListStringKeyword_19() { return cListStringKeyword_19; }
		
		//"String[]"
		public Keyword getStringKeyword_20() { return cStringKeyword_20; }
		
		//"int"
		public Keyword getIntKeyword_21() { return cIntKeyword_21; }
		
		//"List<Integer>"
		public Keyword getListIntegerKeyword_22() { return cListIntegerKeyword_22; }
		
		//"int[]"
		public Keyword getIntKeyword_23() { return cIntKeyword_23; }
	}
	
	
	private final AlphaCommandsRootElements pAlphaCommandsRoot;
	private final AlphaCommandCategoryElements pAlphaCommandCategory;
	private final AlphaCommandElements pAlphaCommand;
	private final CommandBindingElements pCommandBinding;
	private final ArgumentBindingElements pArgumentBinding;
	private final ArgumentRenamingElements pArgumentRenaming;
	private final AlphaCommandSignatureElements pAlphaCommandSignature;
	private final AlphaCommandSpecializationElements pAlphaCommandSpecialization;
	private final AlphaCommandArgumentElements pAlphaCommandArgument;
	private final CommandArgumentSpecializationElements pCommandArgumentSpecialization;
	private final OverrideArgumentElements pOverrideArgument;
	private final DefaultValueArgumentElements pDefaultValueArgument;
	private final SameAsParentArgumentElements pSameAsParentArgument;
	private final ArgumentTypeElements pArgumentType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CommandsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAlphaCommandsRoot = new AlphaCommandsRootElements();
		this.pAlphaCommandCategory = new AlphaCommandCategoryElements();
		this.pAlphaCommand = new AlphaCommandElements();
		this.pCommandBinding = new CommandBindingElements();
		this.pArgumentBinding = new ArgumentBindingElements();
		this.pArgumentRenaming = new ArgumentRenamingElements();
		this.pAlphaCommandSignature = new AlphaCommandSignatureElements();
		this.pAlphaCommandSpecialization = new AlphaCommandSpecializationElements();
		this.pAlphaCommandArgument = new AlphaCommandArgumentElements();
		this.pCommandArgumentSpecialization = new CommandArgumentSpecializationElements();
		this.pOverrideArgument = new OverrideArgumentElements();
		this.pDefaultValueArgument = new DefaultValueArgumentElements();
		this.pSameAsParentArgument = new SameAsParentArgumentElements();
		this.pArgumentType = new ArgumentTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("alpha.commands.model.Commands".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AlphaCommandsRoot:
	//	categories+=AlphaCommandCategory*;
	public AlphaCommandsRootElements getAlphaCommandsRootAccess() {
		return pAlphaCommandsRoot;
	}
	
	public ParserRule getAlphaCommandsRootRule() {
		return getAlphaCommandsRootAccess().getRule();
	}
	
	//AlphaCommandCategory:
	//	name=ID '{'
	//	commands+=AlphaCommand*
	//	'}';
	public AlphaCommandCategoryElements getAlphaCommandCategoryAccess() {
		return pAlphaCommandCategory;
	}
	
	public ParserRule getAlphaCommandCategoryRule() {
		return getAlphaCommandCategoryAccess().getRule();
	}
	
	//AlphaCommand:
	//	binding=CommandBinding? (label=ID ':')? name=ID signature=AlphaCommandSignature
	//	specializations+=AlphaCommandSpecialization*;
	public AlphaCommandElements getAlphaCommandAccess() {
		return pAlphaCommand;
	}
	
	public ParserRule getAlphaCommandRule() {
		return getAlphaCommandAccess().getRule();
	}
	
	//CommandBinding:
	//	'@Bind' '(' bindTargetCommand=[AlphaCommand] ';' (argumentBindings+=ArgumentBinding |
	//	argumentRenamings+=ArgumentRenaming) (',' (argumentBindings+=ArgumentBinding | argumentRenamings+=ArgumentRenaming))*
	//	')';
	public CommandBindingElements getCommandBindingAccess() {
		return pCommandBinding;
	}
	
	public ParserRule getCommandBindingRule() {
		return getCommandBindingAccess().getRule();
	}
	
	//ArgumentBinding:
	//	bindTarget=[AlphaCommandArgument] '=' '(' bindSource+=[AlphaCommandArgument] (',' bindSource+=[AlphaCommandArgument])*
	//	')';
	public ArgumentBindingElements getArgumentBindingAccess() {
		return pArgumentBinding;
	}
	
	public ParserRule getArgumentBindingRule() {
		return getArgumentBindingAccess().getRule();
	}
	
	//ArgumentRenaming:
	//	bindTarget=[AlphaCommandArgument] '=' bindSource=[AlphaCommandArgument];
	public ArgumentRenamingElements getArgumentRenamingAccess() {
		return pArgumentRenaming;
	}
	
	public ParserRule getArgumentRenamingRule() {
		return getArgumentRenamingAccess().getRule();
	}
	
	//AlphaCommandSignature:
	//	{AlphaCommandSignature} '(' (arguments+=AlphaCommandArgument (',' arguments+=AlphaCommandArgument)*)? ')' (':'
	//	returnType=ArgumentType)?;
	public AlphaCommandSignatureElements getAlphaCommandSignatureAccess() {
		return pAlphaCommandSignature;
	}
	
	public ParserRule getAlphaCommandSignatureRule() {
		return getAlphaCommandSignatureAccess().getRule();
	}
	
	//AlphaCommandSpecialization:
	//	{AlphaCommandSpecialization} '=>' '(' (arguments+=CommandArgumentSpecialization (','
	//	arguments+=CommandArgumentSpecialization)*)? ')';
	public AlphaCommandSpecializationElements getAlphaCommandSpecializationAccess() {
		return pAlphaCommandSpecialization;
	}
	
	public ParserRule getAlphaCommandSpecializationRule() {
		return getAlphaCommandSpecializationAccess().getRule();
	}
	
	//AlphaCommandArgument:
	//	argumentType=ArgumentType name=ID;
	public AlphaCommandArgumentElements getAlphaCommandArgumentAccess() {
		return pAlphaCommandArgument;
	}
	
	public ParserRule getAlphaCommandArgumentRule() {
		return getAlphaCommandArgumentAccess().getRule();
	}
	
	//CommandArgumentSpecialization:
	//	OverrideArgument | DefaultValueArgument | SameAsParentArgument;
	public CommandArgumentSpecializationElements getCommandArgumentSpecializationAccess() {
		return pCommandArgumentSpecialization;
	}
	
	public ParserRule getCommandArgumentSpecializationRule() {
		return getCommandArgumentSpecializationAccess().getRule();
	}
	
	//OverrideArgument:
	//	argumentType=ArgumentType name=ID?;
	public OverrideArgumentElements getOverrideArgumentAccess() {
		return pOverrideArgument;
	}
	
	public ParserRule getOverrideArgumentRule() {
		return getOverrideArgumentAccess().getRule();
	}
	
	//DefaultValueArgument:
	//	value=STRING;
	public DefaultValueArgumentElements getDefaultValueArgumentAccess() {
		return pDefaultValueArgument;
	}
	
	public ParserRule getDefaultValueArgumentRule() {
		return getDefaultValueArgumentAccess().getRule();
	}
	
	//SameAsParentArgument:
	//	{SameAsParentArgument} '_';
	public SameAsParentArgumentElements getSameAsParentArgumentAccess() {
		return pSameAsParentArgument;
	}
	
	public ParserRule getSameAsParentArgumentRule() {
		return getSameAsParentArgumentAccess().getRule();
	}
	
	//ArgumentType ArgumentType:
	//	"Void" |
	//	"AlphaNode" |
	//	"AlphaVisitable" |
	//	"AlphaRoot" |
	//	"AlphaSystem" |
	//	"SystemBody" |
	//	"Variable" |
	//	"Equation" |
	//	"StandardEquation" |
	//	"UseEquation" |
	//	"AlphaExpression" |
	//	"AbstractReduceExpression" |
	//	"BinaryExpression" |
	//	"DependenceExpression" |
	//	"AffineFunction" |
	//	"Domain" |
	//	"ParameterDomain" |
	//	"List<AlphaRoot>" |
	//	"String" |
	//	"List<String>" |
	//	"String[]" |
	//	"int" |
	//	"List<Integer>" |
	//	"int[]";
	public ArgumentTypeElements getArgumentTypeAccess() {
		return pArgumentType;
	}
	
	public ParserRule getArgumentTypeRule() {
		return getArgumentTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
