/*
 * generated by Xtext 2.15.0
 */
package alpha.commands.model.scoping

import alpha.commands.model.AlphaCommand
import alpha.commands.model.ArgumentBinding
import alpha.commands.model.CommandBinding
import alpha.commands.model.ModelPackage
import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import alpha.commands.model.ArgumentRenaming

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class CommandsScopeProvider extends AbstractCommandsScopeProvider {

	@Inject
	IQualifiedNameProvider nameProvider;
	

	override getScope(EObject context, EReference reference) {

		if (context instanceof CommandBinding && reference == ModelPackage.Literals.COMMAND_BINDING__BIND_TARGET_COMMAND) {
			val scope = EcoreUtil2.getAllContentsOfType(EcoreUtil2.getRootContainer(context), AlphaCommand);
			return Scopes.scopeFor(scope, nameProvider, IScope.NULLSCOPE)
		}
		
		//
		if (context instanceof ArgumentBinding && reference == ModelPackage.Literals.ARGUMENT_BINDING__BIND_TARGET) {
			val targetCommand = (context.eContainer as CommandBinding).bindTargetCommand
			if (targetCommand !== null && targetCommand.signature !== null)
				return Scopes.scopeFor(targetCommand.signature.arguments)
		}
		if (context instanceof ArgumentBinding && reference == ModelPackage.Literals.ARGUMENT_BINDING__BIND_SOURCE) {
			val sourceCommand = (context.eContainer.eContainer as AlphaCommand)
			return Scopes.scopeFor(sourceCommand.signature.arguments)
		}
		
		//copy & paste of above
		if (context instanceof ArgumentRenaming && reference == ModelPackage.Literals.ARGUMENT_RENAMING__BIND_TARGET) {
			val targetCommand = (context.eContainer as CommandBinding).bindTargetCommand
			if (targetCommand !== null && targetCommand.signature !== null)
				return Scopes.scopeFor(targetCommand.signature.arguments)
		}
		if (context instanceof ArgumentRenaming && reference == ModelPackage.Literals.ARGUMENT_RENAMING__BIND_SOURCE) {
			val sourceCommand = (context.eContainer.eContainer as AlphaCommand)
			return Scopes.scopeFor(sourceCommand.signature.arguments)
		}
		
		super.getScope(context, reference)
	}
	
}
