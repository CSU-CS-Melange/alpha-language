// automatically generated by Xtext
grammar alpha.commands.model.Commands with org.eclipse.xtext.common.Terminals

import "alpha.commands.model" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


AlphaCommandsRoot:
	(categories+=AlphaCommandCategory)*
;

AlphaCommandCategory returns AlphaCommandCategory:
	name=ID '{'
		(commands+=AlphaCommand)*
	'}'
	;

AlphaCommand: 
	(binding=CommandBinding)?
	(label=ID ':')? name=ID signature=AlphaCommandSignature
	(specializations+=AlphaCommandSpecialization)*
;

CommandBinding:
	'@Bind' '(' bindTargetCommand=[AlphaCommand|ID] ';' 
			 (argumentBindings+=ArgumentBinding | argumentRenamings+=ArgumentRenaming) 
		(',' (argumentBindings+=ArgumentBinding | argumentRenamings+=ArgumentRenaming) )* ')'
;

ArgumentBinding:
	bindTarget=[AlphaCommandArgument] '=' '(' bindSource+=[AlphaCommandArgument] (',' bindSource+=[AlphaCommandArgument])* ')'
;

ArgumentRenaming:
	bindTarget=[AlphaCommandArgument] '=' bindSource=[AlphaCommandArgument]
;


AlphaCommandSignature: 
	{AlphaCommandSignature} '(' (arguments+=AlphaCommandArgument (',' arguments+=AlphaCommandArgument)*)? ')' (':' returnType=ArgumentType)?
;

AlphaCommandSpecialization:
	{AlphaCommandSpecialization} '=>' '(' (arguments+=CommandArgumentSpecialization (',' arguments+=CommandArgumentSpecialization)*)? ')'
;

AlphaCommandArgument: 
	argumentType=ArgumentType name=ID
;

CommandArgumentSpecialization:
	OverrideArgument | DefaultValueArgument | SameAsParentArgument
;

OverrideArgument:
	argumentType=ArgumentType name=ID?
;


DefaultValueArgument:
	value=STRING
;

SameAsParentArgument:
	 {SameAsParentArgument} '_'
;

ArgumentType returns ArgumentType:
	"Void" |
	"AlphaNode" |
	"AlphaCompleteVisitable"  |
	"AlphaVisitable"  |
	"AlphaExpressionVisitable"  |
	"AlphaRoot"  |
	"AlphaSystem" |
	"SystemBody" |
	"Variable" |
	"Equation" |
	"StandardEquation" |
	"UseEquation" |
	"AlphaExpression" |
	"AbstractReduceExpression" |
	"BinaryExpression" |
	"DependenceExpression" |
	"ReduceExpression" |
	"AffineFunction" |
	"Domain" |
	"ParameterDomain" |
	"List<AlphaRoot>" |
	"String" |
	"List<String>" |
	"String[]" |
	"int" |
	"List<Integer>" |
	"int[]"
;
