/**
 * generated by Xtext 2.13.0
 */
package alpha.alpha.impl;

import alpha.alpha.AAffineSystem;
import alpha.alpha.AAlphaExpression;
import alpha.alpha.AIndexAffineExpressionList;
import alpha.alpha.APolyhedralObjectExpression;
import alpha.alpha.AUseEquation;
import alpha.alpha.AlphaPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>AUse Equation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link alpha.alpha.impl.AUseEquationImpl#getInstantiationDomain <em>Instantiation Domain</em>}</li>
 *   <li>{@link alpha.alpha.impl.AUseEquationImpl#getSubsystemDims <em>Subsystem Dims</em>}</li>
 *   <li>{@link alpha.alpha.impl.AUseEquationImpl#getOutputExprs <em>Output Exprs</em>}</li>
 *   <li>{@link alpha.alpha.impl.AUseEquationImpl#getSystem <em>System</em>}</li>
 *   <li>{@link alpha.alpha.impl.AUseEquationImpl#getCallParams <em>Call Params</em>}</li>
 *   <li>{@link alpha.alpha.impl.AUseEquationImpl#getInputExprs <em>Input Exprs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AUseEquationImpl extends MinimalEObjectImpl.Container implements AUseEquation
{
  /**
   * The cached value of the '{@link #getInstantiationDomain() <em>Instantiation Domain</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInstantiationDomain()
   * @generated
   * @ordered
   */
  protected APolyhedralObjectExpression instantiationDomain;

  /**
   * The default value of the '{@link #getSubsystemDims() <em>Subsystem Dims</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubsystemDims()
   * @generated
   * @ordered
   */
  protected static final String SUBSYSTEM_DIMS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSubsystemDims() <em>Subsystem Dims</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubsystemDims()
   * @generated
   * @ordered
   */
  protected String subsystemDims = SUBSYSTEM_DIMS_EDEFAULT;

  /**
   * The cached value of the '{@link #getOutputExprs() <em>Output Exprs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutputExprs()
   * @generated
   * @ordered
   */
  protected EList<AAlphaExpression> outputExprs;

  /**
   * The cached value of the '{@link #getSystem() <em>System</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSystem()
   * @generated
   * @ordered
   */
  protected AAffineSystem system;

  /**
   * The cached value of the '{@link #getCallParams() <em>Call Params</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCallParams()
   * @generated
   * @ordered
   */
  protected AIndexAffineExpressionList callParams;

  /**
   * The cached value of the '{@link #getInputExprs() <em>Input Exprs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputExprs()
   * @generated
   * @ordered
   */
  protected EList<AAlphaExpression> inputExprs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AUseEquationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AlphaPackage.Literals.AUSE_EQUATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public APolyhedralObjectExpression getInstantiationDomain()
  {
    return instantiationDomain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInstantiationDomain(APolyhedralObjectExpression newInstantiationDomain, NotificationChain msgs)
  {
    APolyhedralObjectExpression oldInstantiationDomain = instantiationDomain;
    instantiationDomain = newInstantiationDomain;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlphaPackage.AUSE_EQUATION__INSTANTIATION_DOMAIN, oldInstantiationDomain, newInstantiationDomain);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInstantiationDomain(APolyhedralObjectExpression newInstantiationDomain)
  {
    if (newInstantiationDomain != instantiationDomain)
    {
      NotificationChain msgs = null;
      if (instantiationDomain != null)
        msgs = ((InternalEObject)instantiationDomain).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlphaPackage.AUSE_EQUATION__INSTANTIATION_DOMAIN, null, msgs);
      if (newInstantiationDomain != null)
        msgs = ((InternalEObject)newInstantiationDomain).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlphaPackage.AUSE_EQUATION__INSTANTIATION_DOMAIN, null, msgs);
      msgs = basicSetInstantiationDomain(newInstantiationDomain, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlphaPackage.AUSE_EQUATION__INSTANTIATION_DOMAIN, newInstantiationDomain, newInstantiationDomain));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSubsystemDims()
  {
    return subsystemDims;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSubsystemDims(String newSubsystemDims)
  {
    String oldSubsystemDims = subsystemDims;
    subsystemDims = newSubsystemDims;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlphaPackage.AUSE_EQUATION__SUBSYSTEM_DIMS, oldSubsystemDims, subsystemDims));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AAlphaExpression> getOutputExprs()
  {
    if (outputExprs == null)
    {
      outputExprs = new EObjectContainmentEList<AAlphaExpression>(AAlphaExpression.class, this, AlphaPackage.AUSE_EQUATION__OUTPUT_EXPRS);
    }
    return outputExprs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AAffineSystem getSystem()
  {
    if (system != null && system.eIsProxy())
    {
      InternalEObject oldSystem = (InternalEObject)system;
      system = (AAffineSystem)eResolveProxy(oldSystem);
      if (system != oldSystem)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AlphaPackage.AUSE_EQUATION__SYSTEM, oldSystem, system));
      }
    }
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AAffineSystem basicGetSystem()
  {
    return system;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSystem(AAffineSystem newSystem)
  {
    AAffineSystem oldSystem = system;
    system = newSystem;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlphaPackage.AUSE_EQUATION__SYSTEM, oldSystem, system));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AIndexAffineExpressionList getCallParams()
  {
    return callParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCallParams(AIndexAffineExpressionList newCallParams, NotificationChain msgs)
  {
    AIndexAffineExpressionList oldCallParams = callParams;
    callParams = newCallParams;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AlphaPackage.AUSE_EQUATION__CALL_PARAMS, oldCallParams, newCallParams);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCallParams(AIndexAffineExpressionList newCallParams)
  {
    if (newCallParams != callParams)
    {
      NotificationChain msgs = null;
      if (callParams != null)
        msgs = ((InternalEObject)callParams).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AlphaPackage.AUSE_EQUATION__CALL_PARAMS, null, msgs);
      if (newCallParams != null)
        msgs = ((InternalEObject)newCallParams).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AlphaPackage.AUSE_EQUATION__CALL_PARAMS, null, msgs);
      msgs = basicSetCallParams(newCallParams, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AlphaPackage.AUSE_EQUATION__CALL_PARAMS, newCallParams, newCallParams));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AAlphaExpression> getInputExprs()
  {
    if (inputExprs == null)
    {
      inputExprs = new EObjectContainmentEList<AAlphaExpression>(AAlphaExpression.class, this, AlphaPackage.AUSE_EQUATION__INPUT_EXPRS);
    }
    return inputExprs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AlphaPackage.AUSE_EQUATION__INSTANTIATION_DOMAIN:
        return basicSetInstantiationDomain(null, msgs);
      case AlphaPackage.AUSE_EQUATION__OUTPUT_EXPRS:
        return ((InternalEList<?>)getOutputExprs()).basicRemove(otherEnd, msgs);
      case AlphaPackage.AUSE_EQUATION__CALL_PARAMS:
        return basicSetCallParams(null, msgs);
      case AlphaPackage.AUSE_EQUATION__INPUT_EXPRS:
        return ((InternalEList<?>)getInputExprs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AlphaPackage.AUSE_EQUATION__INSTANTIATION_DOMAIN:
        return getInstantiationDomain();
      case AlphaPackage.AUSE_EQUATION__SUBSYSTEM_DIMS:
        return getSubsystemDims();
      case AlphaPackage.AUSE_EQUATION__OUTPUT_EXPRS:
        return getOutputExprs();
      case AlphaPackage.AUSE_EQUATION__SYSTEM:
        if (resolve) return getSystem();
        return basicGetSystem();
      case AlphaPackage.AUSE_EQUATION__CALL_PARAMS:
        return getCallParams();
      case AlphaPackage.AUSE_EQUATION__INPUT_EXPRS:
        return getInputExprs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AlphaPackage.AUSE_EQUATION__INSTANTIATION_DOMAIN:
        setInstantiationDomain((APolyhedralObjectExpression)newValue);
        return;
      case AlphaPackage.AUSE_EQUATION__SUBSYSTEM_DIMS:
        setSubsystemDims((String)newValue);
        return;
      case AlphaPackage.AUSE_EQUATION__OUTPUT_EXPRS:
        getOutputExprs().clear();
        getOutputExprs().addAll((Collection<? extends AAlphaExpression>)newValue);
        return;
      case AlphaPackage.AUSE_EQUATION__SYSTEM:
        setSystem((AAffineSystem)newValue);
        return;
      case AlphaPackage.AUSE_EQUATION__CALL_PARAMS:
        setCallParams((AIndexAffineExpressionList)newValue);
        return;
      case AlphaPackage.AUSE_EQUATION__INPUT_EXPRS:
        getInputExprs().clear();
        getInputExprs().addAll((Collection<? extends AAlphaExpression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AlphaPackage.AUSE_EQUATION__INSTANTIATION_DOMAIN:
        setInstantiationDomain((APolyhedralObjectExpression)null);
        return;
      case AlphaPackage.AUSE_EQUATION__SUBSYSTEM_DIMS:
        setSubsystemDims(SUBSYSTEM_DIMS_EDEFAULT);
        return;
      case AlphaPackage.AUSE_EQUATION__OUTPUT_EXPRS:
        getOutputExprs().clear();
        return;
      case AlphaPackage.AUSE_EQUATION__SYSTEM:
        setSystem((AAffineSystem)null);
        return;
      case AlphaPackage.AUSE_EQUATION__CALL_PARAMS:
        setCallParams((AIndexAffineExpressionList)null);
        return;
      case AlphaPackage.AUSE_EQUATION__INPUT_EXPRS:
        getInputExprs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AlphaPackage.AUSE_EQUATION__INSTANTIATION_DOMAIN:
        return instantiationDomain != null;
      case AlphaPackage.AUSE_EQUATION__SUBSYSTEM_DIMS:
        return SUBSYSTEM_DIMS_EDEFAULT == null ? subsystemDims != null : !SUBSYSTEM_DIMS_EDEFAULT.equals(subsystemDims);
      case AlphaPackage.AUSE_EQUATION__OUTPUT_EXPRS:
        return outputExprs != null && !outputExprs.isEmpty();
      case AlphaPackage.AUSE_EQUATION__SYSTEM:
        return system != null;
      case AlphaPackage.AUSE_EQUATION__CALL_PARAMS:
        return callParams != null;
      case AlphaPackage.AUSE_EQUATION__INPUT_EXPRS:
        return inputExprs != null && !inputExprs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (subsystemDims: ");
    result.append(subsystemDims);
    result.append(')');
    return result.toString();
  }

} //AUseEquationImpl
