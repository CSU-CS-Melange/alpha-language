/**
 * generated by Xtext 2.12.0
 */
package alpha.alpha.util;

import alpha.alpha.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see alpha.alpha.AlphaPackage
 * @generated
 */
public class AlphaAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AlphaPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlphaAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = AlphaPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AlphaSwitch<Adapter> modelSwitch =
    new AlphaSwitch<Adapter>()
    {
      @Override
      public Adapter caseAStart(AStart object)
      {
        return createAStartAdapter();
      }
      @Override
      public Adapter caseAbstractElement(AbstractElement object)
      {
        return createAbstractElementAdapter();
      }
      @Override
      public Adapter caseAPackageDeclaration(APackageDeclaration object)
      {
        return createAPackageDeclarationAdapter();
      }
      @Override
      public Adapter caseAImport(AImport object)
      {
        return createAImportAdapter();
      }
      @Override
      public Adapter caseAConstantDeclaration(AConstantDeclaration object)
      {
        return createAConstantDeclarationAdapter();
      }
      @Override
      public Adapter caseAExternalFunctionDeclaration(AExternalFunctionDeclaration object)
      {
        return createAExternalFunctionDeclarationAdapter();
      }
      @Override
      public Adapter caseAExternalFunction(AExternalFunction object)
      {
        return createAExternalFunctionAdapter();
      }
      @Override
      public Adapter caseAConstant(AConstant object)
      {
        return createAConstantAdapter();
      }
      @Override
      public Adapter caseAAffineSystem(AAffineSystem object)
      {
        return createAAffineSystemAdapter();
      }
      @Override
      public Adapter caseAVariableDeclaration(AVariableDeclaration object)
      {
        return createAVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseAVariableList(AVariableList object)
      {
        return createAVariableListAdapter();
      }
      @Override
      public Adapter caseAVariable(AVariable object)
      {
        return createAVariableAdapter();
      }
      @Override
      public Adapter caseAFuzzyVariableDeclaration(AFuzzyVariableDeclaration object)
      {
        return createAFuzzyVariableDeclarationAdapter();
      }
      @Override
      public Adapter casePolyhedralObject(PolyhedralObject object)
      {
        return createPolyhedralObjectAdapter();
      }
      @Override
      public Adapter caseAPolyhedralObjectExpression(APolyhedralObjectExpression object)
      {
        return createAPolyhedralObjectExpressionAdapter();
      }
      @Override
      public Adapter caseAVariableDomain(AVariableDomain object)
      {
        return createAVariableDomainAdapter();
      }
      @Override
      public Adapter caseARectangularDomain(ARectangularDomain object)
      {
        return createARectangularDomainAdapter();
      }
      @Override
      public Adapter caseADeclaredObject(ADeclaredObject object)
      {
        return createADeclaredObjectAdapter();
      }
      @Override
      public Adapter caseAISLSet(AISLSet object)
      {
        return createAISLSetAdapter();
      }
      @Override
      public Adapter caseAISLBasicSet(AISLBasicSet object)
      {
        return createAISLBasicSetAdapter();
      }
      @Override
      public Adapter caseAISLRelation(AISLRelation object)
      {
        return createAISLRelationAdapter();
      }
      @Override
      public Adapter caseAISLBasicRelation(AISLBasicRelation object)
      {
        return createAISLBasicRelationAdapter();
      }
      @Override
      public Adapter caseAEquation(AEquation object)
      {
        return createAEquationAdapter();
      }
      @Override
      public Adapter caseAUseEquation(AUseEquation object)
      {
        return createAUseEquationAdapter();
      }
      @Override
      public Adapter caseAAlphaExpression(AAlphaExpression object)
      {
        return createAAlphaExpressionAdapter();
      }
      @Override
      public Adapter caseANotExpression(ANotExpression object)
      {
        return createANotExpressionAdapter();
      }
      @Override
      public Adapter caseANegateExpression(ANegateExpression object)
      {
        return createANegateExpressionAdapter();
      }
      @Override
      public Adapter caseACaseExpression(ACaseExpression object)
      {
        return createACaseExpressionAdapter();
      }
      @Override
      public Adapter caseADependenceExpression(ADependenceExpression object)
      {
        return createADependenceExpressionAdapter();
      }
      @Override
      public Adapter caseASelectDependenceExpression(ASelectDependenceExpression object)
      {
        return createASelectDependenceExpressionAdapter();
      }
      @Override
      public Adapter caseADependenceInArrayNotation(ADependenceInArrayNotation object)
      {
        return createADependenceInArrayNotationAdapter();
      }
      @Override
      public Adapter caseAIfExpression(AIfExpression object)
      {
        return createAIfExpressionAdapter();
      }
      @Override
      public Adapter caseAIndexExpression(AIndexExpression object)
      {
        return createAIndexExpressionAdapter();
      }
      @Override
      public Adapter caseAIndexExpressionInArrayNotation(AIndexExpressionInArrayNotation object)
      {
        return createAIndexExpressionInArrayNotationAdapter();
      }
      @Override
      public Adapter caseAReduceExpression(AReduceExpression object)
      {
        return createAReduceExpressionAdapter();
      }
      @Override
      public Adapter caseAArgReduceExpression(AArgReduceExpression object)
      {
        return createAArgReduceExpressionAdapter();
      }
      @Override
      public Adapter caseAConvExpression(AConvExpression object)
      {
        return createAConvExpressionAdapter();
      }
      @Override
      public Adapter caseARestrictExpression(ARestrictExpression object)
      {
        return createARestrictExpressionAdapter();
      }
      @Override
      public Adapter caseAPolyObjectInRestrict(APolyObjectInRestrict object)
      {
        return createAPolyObjectInRestrictAdapter();
      }
      @Override
      public Adapter caseAAutoRestrictExpression(AAutoRestrictExpression object)
      {
        return createAAutoRestrictExpressionAdapter();
      }
      @Override
      public Adapter caseAVariableExpression(AVariableExpression object)
      {
        return createAVariableExpressionAdapter();
      }
      @Override
      public Adapter caseAConstantExpression(AConstantExpression object)
      {
        return createAConstantExpressionAdapter();
      }
      @Override
      public Adapter caseABooleanExpression(ABooleanExpression object)
      {
        return createABooleanExpressionAdapter();
      }
      @Override
      public Adapter caseAIntegerExpression(AIntegerExpression object)
      {
        return createAIntegerExpressionAdapter();
      }
      @Override
      public Adapter caseARealExpression(ARealExpression object)
      {
        return createARealExpressionAdapter();
      }
      @Override
      public Adapter caseAMultiArgExpression(AMultiArgExpression object)
      {
        return createAMultiArgExpressionAdapter();
      }
      @Override
      public Adapter caseAMultiArgArithmeticExpression(AMultiArgArithmeticExpression object)
      {
        return createAMultiArgArithmeticExpressionAdapter();
      }
      @Override
      public Adapter caseAMultiArgLogicalExpression(AMultiArgLogicalExpression object)
      {
        return createAMultiArgLogicalExpressionAdapter();
      }
      @Override
      public Adapter caseAExternalFunctionCall(AExternalFunctionCall object)
      {
        return createAExternalFunctionCallAdapter();
      }
      @Override
      public Adapter caseAIndexAffineExpressionList(AIndexAffineExpressionList object)
      {
        return createAIndexAffineExpressionListAdapter();
      }
      @Override
      public Adapter caseAFunction(AFunction object)
      {
        return createAFunctionAdapter();
      }
      @Override
      public Adapter caseAFunctionInArrayNotation(AFunctionInArrayNotation object)
      {
        return createAFunctionInArrayNotationAdapter();
      }
      @Override
      public Adapter caseAReductionOperator(AReductionOperator object)
      {
        return createAReductionOperatorAdapter();
      }
      @Override
      public Adapter caseABinaryPolyObjExpression(ABinaryPolyObjExpression object)
      {
        return createABinaryPolyObjExpressionAdapter();
      }
      @Override
      public Adapter caseAOrExpression(AOrExpression object)
      {
        return createAOrExpressionAdapter();
      }
      @Override
      public Adapter caseAAndExpression(AAndExpression object)
      {
        return createAAndExpressionAdapter();
      }
      @Override
      public Adapter caseARelationalExpression(ARelationalExpression object)
      {
        return createARelationalExpressionAdapter();
      }
      @Override
      public Adapter caseAAdditiveExpression(AAdditiveExpression object)
      {
        return createAAdditiveExpressionAdapter();
      }
      @Override
      public Adapter caseAMultiplicativeExpression(AMultiplicativeExpression object)
      {
        return createAMultiplicativeExpressionAdapter();
      }
      @Override
      public Adapter caseAMinMaxExpression(AMinMaxExpression object)
      {
        return createAMinMaxExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AStart <em>AStart</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AStart
   * @generated
   */
  public Adapter createAStartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AbstractElement <em>Abstract Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AbstractElement
   * @generated
   */
  public Adapter createAbstractElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.APackageDeclaration <em>APackage Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.APackageDeclaration
   * @generated
   */
  public Adapter createAPackageDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AImport <em>AImport</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AImport
   * @generated
   */
  public Adapter createAImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AConstantDeclaration <em>AConstant Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AConstantDeclaration
   * @generated
   */
  public Adapter createAConstantDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AExternalFunctionDeclaration <em>AExternal Function Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AExternalFunctionDeclaration
   * @generated
   */
  public Adapter createAExternalFunctionDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AExternalFunction <em>AExternal Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AExternalFunction
   * @generated
   */
  public Adapter createAExternalFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AConstant <em>AConstant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AConstant
   * @generated
   */
  public Adapter createAConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AAffineSystem <em>AAffine System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AAffineSystem
   * @generated
   */
  public Adapter createAAffineSystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AVariableDeclaration <em>AVariable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AVariableDeclaration
   * @generated
   */
  public Adapter createAVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AVariableList <em>AVariable List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AVariableList
   * @generated
   */
  public Adapter createAVariableListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AVariable <em>AVariable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AVariable
   * @generated
   */
  public Adapter createAVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AFuzzyVariableDeclaration <em>AFuzzy Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AFuzzyVariableDeclaration
   * @generated
   */
  public Adapter createAFuzzyVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.PolyhedralObject <em>Polyhedral Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.PolyhedralObject
   * @generated
   */
  public Adapter createPolyhedralObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.APolyhedralObjectExpression <em>APolyhedral Object Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.APolyhedralObjectExpression
   * @generated
   */
  public Adapter createAPolyhedralObjectExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AVariableDomain <em>AVariable Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AVariableDomain
   * @generated
   */
  public Adapter createAVariableDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.ARectangularDomain <em>ARectangular Domain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.ARectangularDomain
   * @generated
   */
  public Adapter createARectangularDomainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.ADeclaredObject <em>ADeclared Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.ADeclaredObject
   * @generated
   */
  public Adapter createADeclaredObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AISLSet <em>AISL Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AISLSet
   * @generated
   */
  public Adapter createAISLSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AISLBasicSet <em>AISL Basic Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AISLBasicSet
   * @generated
   */
  public Adapter createAISLBasicSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AISLRelation <em>AISL Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AISLRelation
   * @generated
   */
  public Adapter createAISLRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AISLBasicRelation <em>AISL Basic Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AISLBasicRelation
   * @generated
   */
  public Adapter createAISLBasicRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AEquation <em>AEquation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AEquation
   * @generated
   */
  public Adapter createAEquationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AUseEquation <em>AUse Equation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AUseEquation
   * @generated
   */
  public Adapter createAUseEquationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AAlphaExpression <em>AAlpha Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AAlphaExpression
   * @generated
   */
  public Adapter createAAlphaExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.ANotExpression <em>ANot Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.ANotExpression
   * @generated
   */
  public Adapter createANotExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.ANegateExpression <em>ANegate Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.ANegateExpression
   * @generated
   */
  public Adapter createANegateExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.ACaseExpression <em>ACase Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.ACaseExpression
   * @generated
   */
  public Adapter createACaseExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.ADependenceExpression <em>ADependence Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.ADependenceExpression
   * @generated
   */
  public Adapter createADependenceExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.ASelectDependenceExpression <em>ASelect Dependence Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.ASelectDependenceExpression
   * @generated
   */
  public Adapter createASelectDependenceExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.ADependenceInArrayNotation <em>ADependence In Array Notation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.ADependenceInArrayNotation
   * @generated
   */
  public Adapter createADependenceInArrayNotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AIfExpression <em>AIf Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AIfExpression
   * @generated
   */
  public Adapter createAIfExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AIndexExpression <em>AIndex Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AIndexExpression
   * @generated
   */
  public Adapter createAIndexExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AIndexExpressionInArrayNotation <em>AIndex Expression In Array Notation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AIndexExpressionInArrayNotation
   * @generated
   */
  public Adapter createAIndexExpressionInArrayNotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AReduceExpression <em>AReduce Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AReduceExpression
   * @generated
   */
  public Adapter createAReduceExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AArgReduceExpression <em>AArg Reduce Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AArgReduceExpression
   * @generated
   */
  public Adapter createAArgReduceExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AConvExpression <em>AConv Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AConvExpression
   * @generated
   */
  public Adapter createAConvExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.ARestrictExpression <em>ARestrict Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.ARestrictExpression
   * @generated
   */
  public Adapter createARestrictExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.APolyObjectInRestrict <em>APoly Object In Restrict</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.APolyObjectInRestrict
   * @generated
   */
  public Adapter createAPolyObjectInRestrictAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AAutoRestrictExpression <em>AAuto Restrict Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AAutoRestrictExpression
   * @generated
   */
  public Adapter createAAutoRestrictExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AVariableExpression <em>AVariable Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AVariableExpression
   * @generated
   */
  public Adapter createAVariableExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AConstantExpression <em>AConstant Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AConstantExpression
   * @generated
   */
  public Adapter createAConstantExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.ABooleanExpression <em>ABoolean Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.ABooleanExpression
   * @generated
   */
  public Adapter createABooleanExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AIntegerExpression <em>AInteger Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AIntegerExpression
   * @generated
   */
  public Adapter createAIntegerExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.ARealExpression <em>AReal Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.ARealExpression
   * @generated
   */
  public Adapter createARealExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AMultiArgExpression <em>AMulti Arg Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AMultiArgExpression
   * @generated
   */
  public Adapter createAMultiArgExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AMultiArgArithmeticExpression <em>AMulti Arg Arithmetic Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AMultiArgArithmeticExpression
   * @generated
   */
  public Adapter createAMultiArgArithmeticExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AMultiArgLogicalExpression <em>AMulti Arg Logical Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AMultiArgLogicalExpression
   * @generated
   */
  public Adapter createAMultiArgLogicalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AExternalFunctionCall <em>AExternal Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AExternalFunctionCall
   * @generated
   */
  public Adapter createAExternalFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AIndexAffineExpressionList <em>AIndex Affine Expression List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AIndexAffineExpressionList
   * @generated
   */
  public Adapter createAIndexAffineExpressionListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AFunction <em>AFunction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AFunction
   * @generated
   */
  public Adapter createAFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AFunctionInArrayNotation <em>AFunction In Array Notation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AFunctionInArrayNotation
   * @generated
   */
  public Adapter createAFunctionInArrayNotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AReductionOperator <em>AReduction Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AReductionOperator
   * @generated
   */
  public Adapter createAReductionOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.ABinaryPolyObjExpression <em>ABinary Poly Obj Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.ABinaryPolyObjExpression
   * @generated
   */
  public Adapter createABinaryPolyObjExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AOrExpression <em>AOr Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AOrExpression
   * @generated
   */
  public Adapter createAOrExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AAndExpression <em>AAnd Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AAndExpression
   * @generated
   */
  public Adapter createAAndExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.ARelationalExpression <em>ARelational Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.ARelationalExpression
   * @generated
   */
  public Adapter createARelationalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AAdditiveExpression <em>AAdditive Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AAdditiveExpression
   * @generated
   */
  public Adapter createAAdditiveExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AMultiplicativeExpression <em>AMultiplicative Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AMultiplicativeExpression
   * @generated
   */
  public Adapter createAMultiplicativeExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link alpha.alpha.AMinMaxExpression <em>AMin Max Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see alpha.alpha.AMinMaxExpression
   * @generated
   */
  public Adapter createAMinMaxExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //AlphaAdapterFactory
