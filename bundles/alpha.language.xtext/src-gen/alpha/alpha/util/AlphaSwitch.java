/**
 * generated by Xtext 2.12.0
 */
package alpha.alpha.util;

import alpha.alpha.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see alpha.alpha.AlphaPackage
 * @generated
 */
public class AlphaSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AlphaPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlphaSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = AlphaPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case AlphaPackage.ASTART:
      {
        AStart aStart = (AStart)theEObject;
        T result = caseAStart(aStart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ABSTRACT_ELEMENT:
      {
        AbstractElement abstractElement = (AbstractElement)theEObject;
        T result = caseAbstractElement(abstractElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.APACKAGE_DECLARATION:
      {
        APackageDeclaration aPackageDeclaration = (APackageDeclaration)theEObject;
        T result = caseAPackageDeclaration(aPackageDeclaration);
        if (result == null) result = caseAbstractElement(aPackageDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AIMPORT:
      {
        AImport aImport = (AImport)theEObject;
        T result = caseAImport(aImport);
        if (result == null) result = caseAbstractElement(aImport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ACONSTANT_DECLARATION:
      {
        AConstantDeclaration aConstantDeclaration = (AConstantDeclaration)theEObject;
        T result = caseAConstantDeclaration(aConstantDeclaration);
        if (result == null) result = caseAbstractElement(aConstantDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AEXTERNAL_FUNCTION_DECLARATION:
      {
        AExternalFunctionDeclaration aExternalFunctionDeclaration = (AExternalFunctionDeclaration)theEObject;
        T result = caseAExternalFunctionDeclaration(aExternalFunctionDeclaration);
        if (result == null) result = caseAbstractElement(aExternalFunctionDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AEXTERNAL_FUNCTION:
      {
        AExternalFunction aExternalFunction = (AExternalFunction)theEObject;
        T result = caseAExternalFunction(aExternalFunction);
        if (result == null) result = caseAExternalFunctionDeclaration(aExternalFunction);
        if (result == null) result = caseAbstractElement(aExternalFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ACONSTANT:
      {
        AConstant aConstant = (AConstant)theEObject;
        T result = caseAConstant(aConstant);
        if (result == null) result = caseAConstantDeclaration(aConstant);
        if (result == null) result = caseAbstractElement(aConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AAFFINE_SYSTEM:
      {
        AAffineSystem aAffineSystem = (AAffineSystem)theEObject;
        T result = caseAAffineSystem(aAffineSystem);
        if (result == null) result = caseAbstractElement(aAffineSystem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AVARIABLE_DECLARATION:
      {
        AVariableDeclaration aVariableDeclaration = (AVariableDeclaration)theEObject;
        T result = caseAVariableDeclaration(aVariableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AVARIABLE_LIST:
      {
        AVariableList aVariableList = (AVariableList)theEObject;
        T result = caseAVariableList(aVariableList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AVARIABLE:
      {
        AVariable aVariable = (AVariable)theEObject;
        T result = caseAVariable(aVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AFUZZY_VARIABLE_DECLARATION:
      {
        AFuzzyVariableDeclaration aFuzzyVariableDeclaration = (AFuzzyVariableDeclaration)theEObject;
        T result = caseAFuzzyVariableDeclaration(aFuzzyVariableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.POLYHEDRAL_OBJECT:
      {
        PolyhedralObject polyhedralObject = (PolyhedralObject)theEObject;
        T result = casePolyhedralObject(polyhedralObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.APOLYHEDRAL_OBJECT_EXPRESSION:
      {
        APolyhedralObjectExpression aPolyhedralObjectExpression = (APolyhedralObjectExpression)theEObject;
        T result = caseAPolyhedralObjectExpression(aPolyhedralObjectExpression);
        if (result == null) result = caseAPolyObjectInRestrict(aPolyhedralObjectExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AVARIABLE_DOMAIN:
      {
        AVariableDomain aVariableDomain = (AVariableDomain)theEObject;
        T result = caseAVariableDomain(aVariableDomain);
        if (result == null) result = caseAPolyhedralObjectExpression(aVariableDomain);
        if (result == null) result = caseAPolyObjectInRestrict(aVariableDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ARECTANGULAR_DOMAIN:
      {
        ARectangularDomain aRectangularDomain = (ARectangularDomain)theEObject;
        T result = caseARectangularDomain(aRectangularDomain);
        if (result == null) result = caseAPolyhedralObjectExpression(aRectangularDomain);
        if (result == null) result = caseAPolyObjectInRestrict(aRectangularDomain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ADECLARED_OBJECT:
      {
        ADeclaredObject aDeclaredObject = (ADeclaredObject)theEObject;
        T result = caseADeclaredObject(aDeclaredObject);
        if (result == null) result = caseAPolyhedralObjectExpression(aDeclaredObject);
        if (result == null) result = caseAPolyObjectInRestrict(aDeclaredObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AISL_SET:
      {
        AISLSet aislSet = (AISLSet)theEObject;
        T result = caseAISLSet(aislSet);
        if (result == null) result = caseAPolyhedralObjectExpression(aislSet);
        if (result == null) result = caseAPolyObjectInRestrict(aislSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AISL_BASIC_SET:
      {
        AISLBasicSet aislBasicSet = (AISLBasicSet)theEObject;
        T result = caseAISLBasicSet(aislBasicSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AISL_RELATION:
      {
        AISLRelation aislRelation = (AISLRelation)theEObject;
        T result = caseAISLRelation(aislRelation);
        if (result == null) result = caseAPolyhedralObjectExpression(aislRelation);
        if (result == null) result = caseAPolyObjectInRestrict(aislRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AISL_BASIC_RELATION:
      {
        AISLBasicRelation aislBasicRelation = (AISLBasicRelation)theEObject;
        T result = caseAISLBasicRelation(aislBasicRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AEQUATION:
      {
        AEquation aEquation = (AEquation)theEObject;
        T result = caseAEquation(aEquation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AUSE_EQUATION:
      {
        AUseEquation aUseEquation = (AUseEquation)theEObject;
        T result = caseAUseEquation(aUseEquation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AALPHA_EXPRESSION:
      {
        AAlphaExpression aAlphaExpression = (AAlphaExpression)theEObject;
        T result = caseAAlphaExpression(aAlphaExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ANOT_EXPRESSION:
      {
        ANotExpression aNotExpression = (ANotExpression)theEObject;
        T result = caseANotExpression(aNotExpression);
        if (result == null) result = caseAAlphaExpression(aNotExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ANEGATE_EXPRESSION:
      {
        ANegateExpression aNegateExpression = (ANegateExpression)theEObject;
        T result = caseANegateExpression(aNegateExpression);
        if (result == null) result = caseAAlphaExpression(aNegateExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ACASE_EXPRESSION:
      {
        ACaseExpression aCaseExpression = (ACaseExpression)theEObject;
        T result = caseACaseExpression(aCaseExpression);
        if (result == null) result = caseAAlphaExpression(aCaseExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ADEPENDENCE_EXPRESSION:
      {
        ADependenceExpression aDependenceExpression = (ADependenceExpression)theEObject;
        T result = caseADependenceExpression(aDependenceExpression);
        if (result == null) result = caseAAlphaExpression(aDependenceExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ASELECT_DEPENDENCE_EXPRESSION:
      {
        ASelectDependenceExpression aSelectDependenceExpression = (ASelectDependenceExpression)theEObject;
        T result = caseASelectDependenceExpression(aSelectDependenceExpression);
        if (result == null) result = caseAAlphaExpression(aSelectDependenceExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ADEPENDENCE_IN_ARRAY_NOTATION:
      {
        ADependenceInArrayNotation aDependenceInArrayNotation = (ADependenceInArrayNotation)theEObject;
        T result = caseADependenceInArrayNotation(aDependenceInArrayNotation);
        if (result == null) result = caseAAlphaExpression(aDependenceInArrayNotation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AIF_EXPRESSION:
      {
        AIfExpression aIfExpression = (AIfExpression)theEObject;
        T result = caseAIfExpression(aIfExpression);
        if (result == null) result = caseAAlphaExpression(aIfExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AINDEX_EXPRESSION:
      {
        AIndexExpression aIndexExpression = (AIndexExpression)theEObject;
        T result = caseAIndexExpression(aIndexExpression);
        if (result == null) result = caseAAlphaExpression(aIndexExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AINDEX_EXPRESSION_IN_ARRAY_NOTATION:
      {
        AIndexExpressionInArrayNotation aIndexExpressionInArrayNotation = (AIndexExpressionInArrayNotation)theEObject;
        T result = caseAIndexExpressionInArrayNotation(aIndexExpressionInArrayNotation);
        if (result == null) result = caseAAlphaExpression(aIndexExpressionInArrayNotation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AREDUCE_EXPRESSION:
      {
        AReduceExpression aReduceExpression = (AReduceExpression)theEObject;
        T result = caseAReduceExpression(aReduceExpression);
        if (result == null) result = caseAAlphaExpression(aReduceExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AARG_REDUCE_EXPRESSION:
      {
        AArgReduceExpression aArgReduceExpression = (AArgReduceExpression)theEObject;
        T result = caseAArgReduceExpression(aArgReduceExpression);
        if (result == null) result = caseAAlphaExpression(aArgReduceExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ACONV_EXPRESSION:
      {
        AConvExpression aConvExpression = (AConvExpression)theEObject;
        T result = caseAConvExpression(aConvExpression);
        if (result == null) result = caseAAlphaExpression(aConvExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ARESTRICT_EXPRESSION:
      {
        ARestrictExpression aRestrictExpression = (ARestrictExpression)theEObject;
        T result = caseARestrictExpression(aRestrictExpression);
        if (result == null) result = caseAAlphaExpression(aRestrictExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.APOLY_OBJECT_IN_RESTRICT:
      {
        APolyObjectInRestrict aPolyObjectInRestrict = (APolyObjectInRestrict)theEObject;
        T result = caseAPolyObjectInRestrict(aPolyObjectInRestrict);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AAUTO_RESTRICT_EXPRESSION:
      {
        AAutoRestrictExpression aAutoRestrictExpression = (AAutoRestrictExpression)theEObject;
        T result = caseAAutoRestrictExpression(aAutoRestrictExpression);
        if (result == null) result = caseAAlphaExpression(aAutoRestrictExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AVARIABLE_EXPRESSION:
      {
        AVariableExpression aVariableExpression = (AVariableExpression)theEObject;
        T result = caseAVariableExpression(aVariableExpression);
        if (result == null) result = caseAAlphaExpression(aVariableExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ACONSTANT_EXPRESSION:
      {
        AConstantExpression aConstantExpression = (AConstantExpression)theEObject;
        T result = caseAConstantExpression(aConstantExpression);
        if (result == null) result = caseAAlphaExpression(aConstantExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ABOOLEAN_EXPRESSION:
      {
        ABooleanExpression aBooleanExpression = (ABooleanExpression)theEObject;
        T result = caseABooleanExpression(aBooleanExpression);
        if (result == null) result = caseAConstantExpression(aBooleanExpression);
        if (result == null) result = caseAAlphaExpression(aBooleanExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AINTEGER_EXPRESSION:
      {
        AIntegerExpression aIntegerExpression = (AIntegerExpression)theEObject;
        T result = caseAIntegerExpression(aIntegerExpression);
        if (result == null) result = caseAConstantExpression(aIntegerExpression);
        if (result == null) result = caseAAlphaExpression(aIntegerExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AREAL_EXPRESSION:
      {
        ARealExpression aRealExpression = (ARealExpression)theEObject;
        T result = caseARealExpression(aRealExpression);
        if (result == null) result = caseAConstantExpression(aRealExpression);
        if (result == null) result = caseAAlphaExpression(aRealExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AMULTI_ARG_EXPRESSION:
      {
        AMultiArgExpression aMultiArgExpression = (AMultiArgExpression)theEObject;
        T result = caseAMultiArgExpression(aMultiArgExpression);
        if (result == null) result = caseAAlphaExpression(aMultiArgExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AMULTI_ARG_ARITHMETIC_EXPRESSION:
      {
        AMultiArgArithmeticExpression aMultiArgArithmeticExpression = (AMultiArgArithmeticExpression)theEObject;
        T result = caseAMultiArgArithmeticExpression(aMultiArgArithmeticExpression);
        if (result == null) result = caseAMultiArgExpression(aMultiArgArithmeticExpression);
        if (result == null) result = caseAAlphaExpression(aMultiArgArithmeticExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AMULTI_ARG_LOGICAL_EXPRESSION:
      {
        AMultiArgLogicalExpression aMultiArgLogicalExpression = (AMultiArgLogicalExpression)theEObject;
        T result = caseAMultiArgLogicalExpression(aMultiArgLogicalExpression);
        if (result == null) result = caseAMultiArgExpression(aMultiArgLogicalExpression);
        if (result == null) result = caseAAlphaExpression(aMultiArgLogicalExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AEXTERNAL_FUNCTION_CALL:
      {
        AExternalFunctionCall aExternalFunctionCall = (AExternalFunctionCall)theEObject;
        T result = caseAExternalFunctionCall(aExternalFunctionCall);
        if (result == null) result = caseAMultiArgExpression(aExternalFunctionCall);
        if (result == null) result = caseAAlphaExpression(aExternalFunctionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AINDEX_AFFINE_EXPRESSION_LIST:
      {
        AIndexAffineExpressionList aIndexAffineExpressionList = (AIndexAffineExpressionList)theEObject;
        T result = caseAIndexAffineExpressionList(aIndexAffineExpressionList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AFUNCTION:
      {
        AFunction aFunction = (AFunction)theEObject;
        T result = caseAFunction(aFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AFUNCTION_IN_ARRAY_NOTATION:
      {
        AFunctionInArrayNotation aFunctionInArrayNotation = (AFunctionInArrayNotation)theEObject;
        T result = caseAFunctionInArrayNotation(aFunctionInArrayNotation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AREDUCTION_OPERATOR:
      {
        AReductionOperator aReductionOperator = (AReductionOperator)theEObject;
        T result = caseAReductionOperator(aReductionOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ABINARY_POLY_OBJ_EXPRESSION:
      {
        ABinaryPolyObjExpression aBinaryPolyObjExpression = (ABinaryPolyObjExpression)theEObject;
        T result = caseABinaryPolyObjExpression(aBinaryPolyObjExpression);
        if (result == null) result = caseAPolyhedralObjectExpression(aBinaryPolyObjExpression);
        if (result == null) result = caseAPolyObjectInRestrict(aBinaryPolyObjExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AOR_EXPRESSION:
      {
        AOrExpression aOrExpression = (AOrExpression)theEObject;
        T result = caseAOrExpression(aOrExpression);
        if (result == null) result = caseAAlphaExpression(aOrExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AAND_EXPRESSION:
      {
        AAndExpression aAndExpression = (AAndExpression)theEObject;
        T result = caseAAndExpression(aAndExpression);
        if (result == null) result = caseAAlphaExpression(aAndExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.ARELATIONAL_EXPRESSION:
      {
        ARelationalExpression aRelationalExpression = (ARelationalExpression)theEObject;
        T result = caseARelationalExpression(aRelationalExpression);
        if (result == null) result = caseAAlphaExpression(aRelationalExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AADDITIVE_EXPRESSION:
      {
        AAdditiveExpression aAdditiveExpression = (AAdditiveExpression)theEObject;
        T result = caseAAdditiveExpression(aAdditiveExpression);
        if (result == null) result = caseAAlphaExpression(aAdditiveExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AMULTIPLICATIVE_EXPRESSION:
      {
        AMultiplicativeExpression aMultiplicativeExpression = (AMultiplicativeExpression)theEObject;
        T result = caseAMultiplicativeExpression(aMultiplicativeExpression);
        if (result == null) result = caseAAlphaExpression(aMultiplicativeExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case AlphaPackage.AMIN_MAX_EXPRESSION:
      {
        AMinMaxExpression aMinMaxExpression = (AMinMaxExpression)theEObject;
        T result = caseAMinMaxExpression(aMinMaxExpression);
        if (result == null) result = caseAAlphaExpression(aMinMaxExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AStart</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AStart</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAStart(AStart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractElement(AbstractElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>APackage Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>APackage Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAPackageDeclaration(APackageDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AImport</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AImport</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAImport(AImport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AConstant Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AConstant Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAConstantDeclaration(AConstantDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AExternal Function Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AExternal Function Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAExternalFunctionDeclaration(AExternalFunctionDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AExternal Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AExternal Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAExternalFunction(AExternalFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AConstant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AConstant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAConstant(AConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AAffine System</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AAffine System</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAAffineSystem(AAffineSystem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AVariable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AVariable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAVariableDeclaration(AVariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AVariable List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AVariable List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAVariableList(AVariableList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AVariable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AVariable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAVariable(AVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AFuzzy Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AFuzzy Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAFuzzyVariableDeclaration(AFuzzyVariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Polyhedral Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Polyhedral Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePolyhedralObject(PolyhedralObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>APolyhedral Object Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>APolyhedral Object Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAPolyhedralObjectExpression(APolyhedralObjectExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AVariable Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AVariable Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAVariableDomain(AVariableDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ARectangular Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ARectangular Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseARectangularDomain(ARectangularDomain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ADeclared Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ADeclared Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseADeclaredObject(ADeclaredObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AISL Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AISL Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAISLSet(AISLSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AISL Basic Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AISL Basic Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAISLBasicSet(AISLBasicSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AISL Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AISL Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAISLRelation(AISLRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AISL Basic Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AISL Basic Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAISLBasicRelation(AISLBasicRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AEquation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AEquation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAEquation(AEquation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AUse Equation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AUse Equation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAUseEquation(AUseEquation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AAlpha Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AAlpha Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAAlphaExpression(AAlphaExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ANot Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ANot Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseANotExpression(ANotExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ANegate Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ANegate Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseANegateExpression(ANegateExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ACase Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ACase Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseACaseExpression(ACaseExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ADependence Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ADependence Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseADependenceExpression(ADependenceExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ASelect Dependence Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ASelect Dependence Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseASelectDependenceExpression(ASelectDependenceExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ADependence In Array Notation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ADependence In Array Notation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseADependenceInArrayNotation(ADependenceInArrayNotation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AIf Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AIf Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAIfExpression(AIfExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AIndex Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AIndex Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAIndexExpression(AIndexExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AIndex Expression In Array Notation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AIndex Expression In Array Notation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAIndexExpressionInArrayNotation(AIndexExpressionInArrayNotation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AReduce Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AReduce Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAReduceExpression(AReduceExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AArg Reduce Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AArg Reduce Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAArgReduceExpression(AArgReduceExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AConv Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AConv Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAConvExpression(AConvExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ARestrict Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ARestrict Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseARestrictExpression(ARestrictExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>APoly Object In Restrict</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>APoly Object In Restrict</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAPolyObjectInRestrict(APolyObjectInRestrict object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AAuto Restrict Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AAuto Restrict Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAAutoRestrictExpression(AAutoRestrictExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AVariable Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AVariable Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAVariableExpression(AVariableExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AConstant Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AConstant Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAConstantExpression(AConstantExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ABoolean Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ABoolean Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseABooleanExpression(ABooleanExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AInteger Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AInteger Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAIntegerExpression(AIntegerExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AReal Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AReal Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseARealExpression(ARealExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AMulti Arg Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AMulti Arg Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAMultiArgExpression(AMultiArgExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AMulti Arg Arithmetic Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AMulti Arg Arithmetic Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAMultiArgArithmeticExpression(AMultiArgArithmeticExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AMulti Arg Logical Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AMulti Arg Logical Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAMultiArgLogicalExpression(AMultiArgLogicalExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AExternal Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AExternal Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAExternalFunctionCall(AExternalFunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AIndex Affine Expression List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AIndex Affine Expression List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAIndexAffineExpressionList(AIndexAffineExpressionList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AFunction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AFunction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAFunction(AFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AFunction In Array Notation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AFunction In Array Notation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAFunctionInArrayNotation(AFunctionInArrayNotation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AReduction Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AReduction Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAReductionOperator(AReductionOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ABinary Poly Obj Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ABinary Poly Obj Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseABinaryPolyObjExpression(ABinaryPolyObjExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AOr Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AOr Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAOrExpression(AOrExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AAnd Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AAnd Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAAndExpression(AAndExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ARelational Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ARelational Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseARelationalExpression(ARelationalExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AAdditive Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AAdditive Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAAdditiveExpression(AAdditiveExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AMultiplicative Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AMultiplicative Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAMultiplicativeExpression(AMultiplicativeExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AMin Max Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AMin Max Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAMinMaxExpression(AMinMaxExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //AlphaSwitch
