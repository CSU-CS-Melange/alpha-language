/*
 * generated by Xtext 2.13.0
 */
package alpha.serializer;

import alpha.services.AlphaGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class AlphaSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AlphaGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AAffineSystem_DefineKeyword_3_0_q;
	protected AbstractElementAlias match_AAffineSystem_FuzzyKeyword_7_0_q;
	protected AbstractElementAlias match_AAffineSystem_InputsKeyword_4_0_q;
	protected AbstractElementAlias match_AAffineSystem_LetKeyword_9_0_q;
	protected AbstractElementAlias match_AAffineSystem_LocalsKeyword_6_0_q;
	protected AbstractElementAlias match_AAffineSystem_OutputsKeyword_5_0_q;
	protected AbstractElementAlias match_AParanthesizedAlphabetsExpression_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_AParanthesizedAlphabetsExpression_LeftParenthesisKeyword_0_p;
	protected AbstractElementAlias match_APolyObjTerminal_APolyObjectInRestrict___LeftCurlyBracketKeyword_4_0_LeftParenthesisKeyword_5_0_a__q;
	protected AbstractElementAlias match_APolyObjTerminal_LeftParenthesisKeyword_5_0_a;
	protected AbstractElementAlias match_APolyObjTerminal_LeftParenthesisKeyword_5_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AlphaGrammarAccess) access;
		match_AAffineSystem_DefineKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getAAffineSystemAccess().getDefineKeyword_3_0());
		match_AAffineSystem_FuzzyKeyword_7_0_q = new TokenAlias(false, true, grammarAccess.getAAffineSystemAccess().getFuzzyKeyword_7_0());
		match_AAffineSystem_InputsKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getAAffineSystemAccess().getInputsKeyword_4_0());
		match_AAffineSystem_LetKeyword_9_0_q = new TokenAlias(false, true, grammarAccess.getAAffineSystemAccess().getLetKeyword_9_0());
		match_AAffineSystem_LocalsKeyword_6_0_q = new TokenAlias(false, true, grammarAccess.getAAffineSystemAccess().getLocalsKeyword_6_0());
		match_AAffineSystem_OutputsKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getAAffineSystemAccess().getOutputsKeyword_5_0());
		match_AParanthesizedAlphabetsExpression_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getLeftParenthesisKeyword_0());
		match_AParanthesizedAlphabetsExpression_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getLeftParenthesisKeyword_0());
		match_APolyObjTerminal_APolyObjectInRestrict___LeftCurlyBracketKeyword_4_0_LeftParenthesisKeyword_5_0_a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAPolyObjectInRestrictAccess().getLeftCurlyBracketKeyword_4_0()), new TokenAlias(true, true, grammarAccess.getAPolyObjTerminalAccess().getLeftParenthesisKeyword_5_0()));
		match_APolyObjTerminal_LeftParenthesisKeyword_5_0_a = new TokenAlias(true, true, grammarAccess.getAPolyObjTerminalAccess().getLeftParenthesisKeyword_5_0());
		match_APolyObjTerminal_LeftParenthesisKeyword_5_0_p = new TokenAlias(true, false, grammarAccess.getAPolyObjTerminalAccess().getLeftParenthesisKeyword_5_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getOP_EQRule())
			return getOP_EQToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal OP_EQ : '=';
	 */
	protected String getOP_EQToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AAffineSystem_DefineKeyword_3_0_q.equals(syntax))
				emit_AAffineSystem_DefineKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AAffineSystem_FuzzyKeyword_7_0_q.equals(syntax))
				emit_AAffineSystem_FuzzyKeyword_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AAffineSystem_InputsKeyword_4_0_q.equals(syntax))
				emit_AAffineSystem_InputsKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AAffineSystem_LetKeyword_9_0_q.equals(syntax))
				emit_AAffineSystem_LetKeyword_9_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AAffineSystem_LocalsKeyword_6_0_q.equals(syntax))
				emit_AAffineSystem_LocalsKeyword_6_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AAffineSystem_OutputsKeyword_5_0_q.equals(syntax))
				emit_AAffineSystem_OutputsKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AParanthesizedAlphabetsExpression_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_AParanthesizedAlphabetsExpression_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AParanthesizedAlphabetsExpression_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_AParanthesizedAlphabetsExpression_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_APolyObjTerminal_APolyObjectInRestrict___LeftCurlyBracketKeyword_4_0_LeftParenthesisKeyword_5_0_a__q.equals(syntax))
				emit_APolyObjTerminal_APolyObjectInRestrict___LeftCurlyBracketKeyword_4_0_LeftParenthesisKeyword_5_0_a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_APolyObjTerminal_LeftParenthesisKeyword_5_0_a.equals(syntax))
				emit_APolyObjTerminal_LeftParenthesisKeyword_5_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_APolyObjTerminal_LeftParenthesisKeyword_5_0_p.equals(syntax))
				emit_APolyObjTerminal_LeftParenthesisKeyword_5_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'define'?
	 *
	 * This ambiguous syntax occurs at:
	 *     parameters=AParamDomain (ambiguity) 'inputs' inputDeclarations+=AVariableDeclaration
	 *     parameters=AParamDomain (ambiguity) 'inputs'? 'outputs' outputDeclarations+=AVariableDeclaration
	 *     parameters=AParamDomain (ambiguity) 'inputs'? 'outputs'? 'locals' localvarDeclarations+=AVariableDeclaration
	 *     parameters=AParamDomain (ambiguity) 'inputs'? 'outputs'? 'locals'? 'fuzzy' fuzzyVariables+=AFuzzyVariableDeclaration
	 *     parameters=AParamDomain (ambiguity) 'inputs'? 'outputs'? 'locals'? 'fuzzy'? 'let' equations+=AEquation
	 *     parameters=AParamDomain (ambiguity) 'inputs'? 'outputs'? 'locals'? 'fuzzy'? 'let' useEquations+=AUseEquation
	 *     parameters=AParamDomain (ambiguity) 'inputs'? 'outputs'? 'locals'? 'fuzzy'? 'let'? '.' (rule end)
	 *     parameters=AParamDomain (ambiguity) 'inputs'? 'outputs'? 'locals'? 'fuzzy'? 'over' whileDomain=APolyhedralObjectExpression
	 */
	protected void emit_AAffineSystem_DefineKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'fuzzy'?
	 *
	 * This ambiguous syntax occurs at:
	 *     inputDeclarations+=AVariableDeclaration 'outputs'? 'locals'? (ambiguity) 'let' equations+=AEquation
	 *     inputDeclarations+=AVariableDeclaration 'outputs'? 'locals'? (ambiguity) 'let' useEquations+=AUseEquation
	 *     inputDeclarations+=AVariableDeclaration 'outputs'? 'locals'? (ambiguity) 'let'? '.' (rule end)
	 *     inputDeclarations+=AVariableDeclaration 'outputs'? 'locals'? (ambiguity) 'over' whileDomain=APolyhedralObjectExpression
	 *     localvarDeclarations+=AVariableDeclaration (ambiguity) 'let' equations+=AEquation
	 *     localvarDeclarations+=AVariableDeclaration (ambiguity) 'let' useEquations+=AUseEquation
	 *     localvarDeclarations+=AVariableDeclaration (ambiguity) 'let'? '.' (rule end)
	 *     localvarDeclarations+=AVariableDeclaration (ambiguity) 'over' whileDomain=APolyhedralObjectExpression
	 *     outputDeclarations+=AVariableDeclaration 'locals'? (ambiguity) 'let' equations+=AEquation
	 *     outputDeclarations+=AVariableDeclaration 'locals'? (ambiguity) 'let' useEquations+=AUseEquation
	 *     outputDeclarations+=AVariableDeclaration 'locals'? (ambiguity) 'let'? '.' (rule end)
	 *     outputDeclarations+=AVariableDeclaration 'locals'? (ambiguity) 'over' whileDomain=APolyhedralObjectExpression
	 *     parameters=AParamDomain 'define'? 'inputs'? 'outputs'? 'locals'? (ambiguity) 'let' equations+=AEquation
	 *     parameters=AParamDomain 'define'? 'inputs'? 'outputs'? 'locals'? (ambiguity) 'let' useEquations+=AUseEquation
	 *     parameters=AParamDomain 'define'? 'inputs'? 'outputs'? 'locals'? (ambiguity) 'let'? '.' (rule end)
	 *     parameters=AParamDomain 'define'? 'inputs'? 'outputs'? 'locals'? (ambiguity) 'over' whileDomain=APolyhedralObjectExpression
	 *     polyObjects+=PolyhedralObject 'inputs'? 'outputs'? 'locals'? (ambiguity) 'let' equations+=AEquation
	 *     polyObjects+=PolyhedralObject 'inputs'? 'outputs'? 'locals'? (ambiguity) 'let' useEquations+=AUseEquation
	 *     polyObjects+=PolyhedralObject 'inputs'? 'outputs'? 'locals'? (ambiguity) 'let'? '.' (rule end)
	 *     polyObjects+=PolyhedralObject 'inputs'? 'outputs'? 'locals'? (ambiguity) 'over' whileDomain=APolyhedralObjectExpression
	 */
	protected void emit_AAffineSystem_FuzzyKeyword_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'inputs'?
	 *
	 * This ambiguous syntax occurs at:
	 *     parameters=AParamDomain 'define'? (ambiguity) 'outputs' outputDeclarations+=AVariableDeclaration
	 *     parameters=AParamDomain 'define'? (ambiguity) 'outputs'? 'locals' localvarDeclarations+=AVariableDeclaration
	 *     parameters=AParamDomain 'define'? (ambiguity) 'outputs'? 'locals'? 'fuzzy' fuzzyVariables+=AFuzzyVariableDeclaration
	 *     parameters=AParamDomain 'define'? (ambiguity) 'outputs'? 'locals'? 'fuzzy'? 'let' equations+=AEquation
	 *     parameters=AParamDomain 'define'? (ambiguity) 'outputs'? 'locals'? 'fuzzy'? 'let' useEquations+=AUseEquation
	 *     parameters=AParamDomain 'define'? (ambiguity) 'outputs'? 'locals'? 'fuzzy'? 'let'? '.' (rule end)
	 *     parameters=AParamDomain 'define'? (ambiguity) 'outputs'? 'locals'? 'fuzzy'? 'over' whileDomain=APolyhedralObjectExpression
	 *     polyObjects+=PolyhedralObject (ambiguity) 'outputs' outputDeclarations+=AVariableDeclaration
	 *     polyObjects+=PolyhedralObject (ambiguity) 'outputs'? 'locals' localvarDeclarations+=AVariableDeclaration
	 *     polyObjects+=PolyhedralObject (ambiguity) 'outputs'? 'locals'? 'fuzzy' fuzzyVariables+=AFuzzyVariableDeclaration
	 *     polyObjects+=PolyhedralObject (ambiguity) 'outputs'? 'locals'? 'fuzzy'? 'let' equations+=AEquation
	 *     polyObjects+=PolyhedralObject (ambiguity) 'outputs'? 'locals'? 'fuzzy'? 'let' useEquations+=AUseEquation
	 *     polyObjects+=PolyhedralObject (ambiguity) 'outputs'? 'locals'? 'fuzzy'? 'let'? '.' (rule end)
	 *     polyObjects+=PolyhedralObject (ambiguity) 'outputs'? 'locals'? 'fuzzy'? 'over' whileDomain=APolyhedralObjectExpression
	 */
	protected void emit_AAffineSystem_InputsKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'let'?
	 *
	 * This ambiguous syntax occurs at:
	 *     fuzzyVariables+=AFuzzyVariableDeclaration (ambiguity) '.' (rule end)
	 *     inputDeclarations+=AVariableDeclaration 'outputs'? 'locals'? 'fuzzy'? (ambiguity) '.' (rule end)
	 *     localvarDeclarations+=AVariableDeclaration 'fuzzy'? (ambiguity) '.' (rule end)
	 *     outputDeclarations+=AVariableDeclaration 'locals'? 'fuzzy'? (ambiguity) '.' (rule end)
	 *     parameters=AParamDomain 'define'? 'inputs'? 'outputs'? 'locals'? 'fuzzy'? (ambiguity) '.' (rule end)
	 *     polyObjects+=PolyhedralObject 'inputs'? 'outputs'? 'locals'? 'fuzzy'? (ambiguity) '.' (rule end)
	 *     testExpression=AAlphaExpression ')' (ambiguity) '.' (rule end)
	 */
	protected void emit_AAffineSystem_LetKeyword_9_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'locals'?
	 *
	 * This ambiguous syntax occurs at:
	 *     inputDeclarations+=AVariableDeclaration 'outputs'? (ambiguity) 'fuzzy' fuzzyVariables+=AFuzzyVariableDeclaration
	 *     inputDeclarations+=AVariableDeclaration 'outputs'? (ambiguity) 'fuzzy'? 'let' equations+=AEquation
	 *     inputDeclarations+=AVariableDeclaration 'outputs'? (ambiguity) 'fuzzy'? 'let' useEquations+=AUseEquation
	 *     inputDeclarations+=AVariableDeclaration 'outputs'? (ambiguity) 'fuzzy'? 'let'? '.' (rule end)
	 *     inputDeclarations+=AVariableDeclaration 'outputs'? (ambiguity) 'fuzzy'? 'over' whileDomain=APolyhedralObjectExpression
	 *     outputDeclarations+=AVariableDeclaration (ambiguity) 'fuzzy' fuzzyVariables+=AFuzzyVariableDeclaration
	 *     outputDeclarations+=AVariableDeclaration (ambiguity) 'fuzzy'? 'let' equations+=AEquation
	 *     outputDeclarations+=AVariableDeclaration (ambiguity) 'fuzzy'? 'let' useEquations+=AUseEquation
	 *     outputDeclarations+=AVariableDeclaration (ambiguity) 'fuzzy'? 'let'? '.' (rule end)
	 *     outputDeclarations+=AVariableDeclaration (ambiguity) 'fuzzy'? 'over' whileDomain=APolyhedralObjectExpression
	 *     parameters=AParamDomain 'define'? 'inputs'? 'outputs'? (ambiguity) 'fuzzy' fuzzyVariables+=AFuzzyVariableDeclaration
	 *     parameters=AParamDomain 'define'? 'inputs'? 'outputs'? (ambiguity) 'fuzzy'? 'let' equations+=AEquation
	 *     parameters=AParamDomain 'define'? 'inputs'? 'outputs'? (ambiguity) 'fuzzy'? 'let' useEquations+=AUseEquation
	 *     parameters=AParamDomain 'define'? 'inputs'? 'outputs'? (ambiguity) 'fuzzy'? 'let'? '.' (rule end)
	 *     parameters=AParamDomain 'define'? 'inputs'? 'outputs'? (ambiguity) 'fuzzy'? 'over' whileDomain=APolyhedralObjectExpression
	 *     polyObjects+=PolyhedralObject 'inputs'? 'outputs'? (ambiguity) 'fuzzy' fuzzyVariables+=AFuzzyVariableDeclaration
	 *     polyObjects+=PolyhedralObject 'inputs'? 'outputs'? (ambiguity) 'fuzzy'? 'let' equations+=AEquation
	 *     polyObjects+=PolyhedralObject 'inputs'? 'outputs'? (ambiguity) 'fuzzy'? 'let' useEquations+=AUseEquation
	 *     polyObjects+=PolyhedralObject 'inputs'? 'outputs'? (ambiguity) 'fuzzy'? 'let'? '.' (rule end)
	 *     polyObjects+=PolyhedralObject 'inputs'? 'outputs'? (ambiguity) 'fuzzy'? 'over' whileDomain=APolyhedralObjectExpression
	 */
	protected void emit_AAffineSystem_LocalsKeyword_6_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'outputs'?
	 *
	 * This ambiguous syntax occurs at:
	 *     inputDeclarations+=AVariableDeclaration (ambiguity) 'locals' localvarDeclarations+=AVariableDeclaration
	 *     inputDeclarations+=AVariableDeclaration (ambiguity) 'locals'? 'fuzzy' fuzzyVariables+=AFuzzyVariableDeclaration
	 *     inputDeclarations+=AVariableDeclaration (ambiguity) 'locals'? 'fuzzy'? 'let' equations+=AEquation
	 *     inputDeclarations+=AVariableDeclaration (ambiguity) 'locals'? 'fuzzy'? 'let' useEquations+=AUseEquation
	 *     inputDeclarations+=AVariableDeclaration (ambiguity) 'locals'? 'fuzzy'? 'let'? '.' (rule end)
	 *     inputDeclarations+=AVariableDeclaration (ambiguity) 'locals'? 'fuzzy'? 'over' whileDomain=APolyhedralObjectExpression
	 *     parameters=AParamDomain 'define'? 'inputs'? (ambiguity) 'locals' localvarDeclarations+=AVariableDeclaration
	 *     parameters=AParamDomain 'define'? 'inputs'? (ambiguity) 'locals'? 'fuzzy' fuzzyVariables+=AFuzzyVariableDeclaration
	 *     parameters=AParamDomain 'define'? 'inputs'? (ambiguity) 'locals'? 'fuzzy'? 'let' equations+=AEquation
	 *     parameters=AParamDomain 'define'? 'inputs'? (ambiguity) 'locals'? 'fuzzy'? 'let' useEquations+=AUseEquation
	 *     parameters=AParamDomain 'define'? 'inputs'? (ambiguity) 'locals'? 'fuzzy'? 'let'? '.' (rule end)
	 *     parameters=AParamDomain 'define'? 'inputs'? (ambiguity) 'locals'? 'fuzzy'? 'over' whileDomain=APolyhedralObjectExpression
	 *     polyObjects+=PolyhedralObject 'inputs'? (ambiguity) 'locals' localvarDeclarations+=AVariableDeclaration
	 *     polyObjects+=PolyhedralObject 'inputs'? (ambiguity) 'locals'? 'fuzzy' fuzzyVariables+=AFuzzyVariableDeclaration
	 *     polyObjects+=PolyhedralObject 'inputs'? (ambiguity) 'locals'? 'fuzzy'? 'let' equations+=AEquation
	 *     polyObjects+=PolyhedralObject 'inputs'? (ambiguity) 'locals'? 'fuzzy'? 'let' useEquations+=AUseEquation
	 *     polyObjects+=PolyhedralObject 'inputs'? (ambiguity) 'locals'? 'fuzzy'? 'let'? '.' (rule end)
	 *     polyObjects+=PolyhedralObject 'inputs'? (ambiguity) 'locals'? 'fuzzy'? 'over' whileDomain=APolyhedralObjectExpression
	 */
	protected void emit_AAffineSystem_OutputsKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '[' func=IndexAffineExpressionTerminal
	 *     (rule start) (ambiguity) 'argreduce' '(' op=AReductionOperator
	 *     (rule start) (ambiguity) 'auto' ':' expr=AAlphaExpression
	 *     (rule start) (ambiguity) 'case' '{' exprs+=AAlphaExpression
	 *     (rule start) (ambiguity) 'case' name=ID
	 *     (rule start) (ambiguity) 'conv' '(' domain=APolyhedralObjectExpression
	 *     (rule start) (ambiguity) 'if' cond=AAlphaExpression
	 *     (rule start) (ambiguity) 'reduce' '(' op=AReductionOperator
	 *     (rule start) (ambiguity) 'select' relation=APolyhedralObjectExpression
	 *     (rule start) (ambiguity) 'val(' indexes=AIndexList
	 *     (rule start) (ambiguity) domain=APolyObjectInRestrict
	 *     (rule start) (ambiguity) func=[AExternalFunction|ID]
	 *     (rule start) (ambiguity) function=AFunction
	 *     (rule start) (ambiguity) op='not'
	 *     (rule start) (ambiguity) op=ARITHMETIC_REDUCTION_OP
	 *     (rule start) (ambiguity) op=LOGICAL_REDUCTION_OP
	 *     (rule start) (ambiguity) op=OP_MINUS
	 *     (rule start) (ambiguity) value=BOOLEAN
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=REAL
	 *     (rule start) (ambiguity) var=[AVariable|ID]
	 *     (rule start) (ambiguity) {AAdditiveExpression.left=}
	 *     (rule start) (ambiguity) {AAndExpression.left=}
	 *     (rule start) (ambiguity) {AMinMaxExpression.left=}
	 *     (rule start) (ambiguity) {AMultiplicativeExpression.left=}
	 *     (rule start) (ambiguity) {AOrExpression.left=}
	 *     (rule start) (ambiguity) {ARelationalExpression.left=}
	 */
	protected void emit_AParanthesizedAlphabetsExpression_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '[' func=IndexAffineExpressionTerminal
	 *     (rule start) (ambiguity) 'argreduce' '(' op=AReductionOperator
	 *     (rule start) (ambiguity) 'auto' ':' expr=AAlphaExpression
	 *     (rule start) (ambiguity) 'case' '{' exprs+=AAlphaExpression
	 *     (rule start) (ambiguity) 'case' name=ID
	 *     (rule start) (ambiguity) 'conv' '(' domain=APolyhedralObjectExpression
	 *     (rule start) (ambiguity) 'if' cond=AAlphaExpression
	 *     (rule start) (ambiguity) 'reduce' '(' op=AReductionOperator
	 *     (rule start) (ambiguity) 'select' relation=APolyhedralObjectExpression
	 *     (rule start) (ambiguity) 'val(' indexes=AIndexList
	 *     (rule start) (ambiguity) domain=APolyObjectInRestrict
	 *     (rule start) (ambiguity) func=[AExternalFunction|ID]
	 *     (rule start) (ambiguity) function=AFunction
	 *     (rule start) (ambiguity) op='not'
	 *     (rule start) (ambiguity) op=ARITHMETIC_REDUCTION_OP
	 *     (rule start) (ambiguity) op=LOGICAL_REDUCTION_OP
	 *     (rule start) (ambiguity) op=OP_MINUS
	 *     (rule start) (ambiguity) value=BOOLEAN
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=REAL
	 *     (rule start) (ambiguity) var=[AVariable|ID]
	 *     (rule start) (ambiguity) {AAdditiveExpression.left=}
	 *     (rule start) (ambiguity) {AAndExpression.left=}
	 *     (rule start) (ambiguity) {AMinMaxExpression.left=}
	 *     (rule start) (ambiguity) {AMultiplicativeExpression.left=}
	 *     (rule start) (ambiguity) {AOrExpression.left=}
	 *     (rule start) (ambiguity) {ARelationalExpression.left=}
	 */
	protected void emit_AParanthesizedAlphabetsExpression_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '('*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '{' relations+=AISLBasicRelation
	 *     (rule start) (ambiguity) '{' sets+=AISLBasicSet
	 *     (rule start) (ambiguity) '{' var=[AVariable|ID]
	 *     (rule start) (ambiguity) object=[PolyhedralObject|ID]
	 */
	protected void emit_APolyObjTerminal_APolyObjectInRestrict___LeftCurlyBracketKeyword_4_0_LeftParenthesisKeyword_5_0_a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '{' (ambiguity) '[' dimensions+=AIndexList
	 *     (rule start) '{' (ambiguity) op='affine-hull'
	 *     (rule start) '{' (ambiguity) op='complement'
	 *     (rule start) '{' (ambiguity) op='domain'
	 *     (rule start) '{' (ambiguity) op='poly-hull'
	 *     (rule start) '{' (ambiguity) op='range'
	 *     (rule start) '{' (ambiguity) op='reverse'
	 *     (rule start) '{' (ambiguity) {ABinaryPolyObjExpression.left=}
	 *     (rule start) (ambiguity) '[' dimensions+=AIndexList
	 *     (rule start) (ambiguity) '{' relations+=AISLBasicRelation
	 *     (rule start) (ambiguity) '{' sets+=AISLBasicSet
	 *     (rule start) (ambiguity) '{' var=[AVariable|ID]
	 *     (rule start) (ambiguity) object=[PolyhedralObject|ID]
	 *     (rule start) (ambiguity) op='affine-hull'
	 *     (rule start) (ambiguity) op='complement'
	 *     (rule start) (ambiguity) op='domain'
	 *     (rule start) (ambiguity) op='poly-hull'
	 *     (rule start) (ambiguity) op='range'
	 *     (rule start) (ambiguity) op='reverse'
	 *     (rule start) (ambiguity) {ABinaryPolyObjExpression.left=}
	 */
	protected void emit_APolyObjTerminal_LeftParenthesisKeyword_5_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) op='affine-hull'
	 *     (rule start) (ambiguity) op='complement'
	 *     (rule start) (ambiguity) op='domain'
	 *     (rule start) (ambiguity) op='poly-hull'
	 *     (rule start) (ambiguity) op='range'
	 *     (rule start) (ambiguity) op='reverse'
	 *     (rule start) (ambiguity) {ABinaryPolyObjExpression.left=}
	 */
	protected void emit_APolyObjTerminal_LeftParenthesisKeyword_5_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
