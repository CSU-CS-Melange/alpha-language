/*
 * generated by Xtext 2.12.0
 */
package alpha.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AlphaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AStart");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//AStart:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAPackageDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAAffineSystemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAImportParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAExternalFunctionDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbstractElement:
		//	APackageDeclaration | AAffineSystem | AImport | AExternalFunctionDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//APackageDeclaration | AAffineSystem | AImport | AExternalFunctionDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//APackageDeclaration
		public RuleCall getAPackageDeclarationParserRuleCall_0() { return cAPackageDeclarationParserRuleCall_0; }
		
		//AAffineSystem
		public RuleCall getAAffineSystemParserRuleCall_1() { return cAAffineSystemParserRuleCall_1; }
		
		//AImport
		public RuleCall getAImportParserRuleCall_2() { return cAImportParserRuleCall_2; }
		
		//AExternalFunctionDeclaration
		public RuleCall getAExternalFunctionDeclarationParserRuleCall_3() { return cAExternalFunctionDeclarationParserRuleCall_3; }
	}
	public class APackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.APackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsAbstractElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//APackageDeclaration:
		//	'package' name=QualifiedName '{'
		//	elements+=AbstractElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName '{' elements+=AbstractElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_3_0() { return cElementsAbstractElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//AImport:
		//	'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class AExternalFunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AExternalFunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAExternalFunctionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AExternalFunctionDeclaration:
		//	'external' AExternalFunction ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'external' AExternalFunction ';'
		public Group getGroup() { return cGroup; }
		
		//'external'
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }
		
		//AExternalFunction
		public RuleCall getAExternalFunctionParserRuleCall_1() { return cAExternalFunctionParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class AExternalFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AExternalFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputCardinarityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputCardinarityINTTerminalRuleCall_2_0 = (RuleCall)cInputCardinarityAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AExternalFunction:
		//	name=ID '(' inputCardinarity=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' inputCardinarity=INT ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//inputCardinarity=INT
		public Assignment getInputCardinarityAssignment_2() { return cInputCardinarityAssignment_2; }
		
		//INT
		public RuleCall getInputCardinarityINTTerminalRuleCall_2_0() { return cInputCardinarityINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AAffineSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AAffineSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAffineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSystemNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersAParamDomainParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInputsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInputDeclarationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInputDeclarationsAVariableDeclarationParserRuleCall_3_1_0 = (RuleCall)cInputDeclarationsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutputsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOutputDeclarationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOutputDeclarationsAVariableDeclarationParserRuleCall_4_1_0 = (RuleCall)cOutputDeclarationsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLocalsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLocalvarDeclarationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLocalvarDeclarationsAVariableDeclarationParserRuleCall_5_1_0 = (RuleCall)cLocalvarDeclarationsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFuzzyKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFuzzyVariablesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFuzzyVariablesAFuzzyVariableDeclarationParserRuleCall_6_1_0 = (RuleCall)cFuzzyVariablesAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLetKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cUseEquationsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cUseEquationsAUseEquationParserRuleCall_7_1_0 = (RuleCall)cUseEquationsAssignment_7_1.eContents().get(0);
		private final Assignment cEquationsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cEquationsAEquationParserRuleCall_7_2_0 = (RuleCall)cEquationsAssignment_7_2.eContents().get(0);
		private final Keyword cFullStopKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//AAffineSystem:
		//	'affine' name=SystemName parameters=AParamDomain ('inputs' inputDeclarations+=AVariableDeclaration*)? ('outputs'
		//	outputDeclarations+=AVariableDeclaration*)? ('locals' localvarDeclarations+=AVariableDeclaration*)? ('fuzzy'
		//	fuzzyVariables+=AFuzzyVariableDeclaration*)? ('let'
		//	useEquations+=AUseEquation*
		//	equations+=AEquation*)?
		//	'.';
		@Override public ParserRule getRule() { return rule; }
		
		//'affine' name=SystemName parameters=AParamDomain ('inputs' inputDeclarations+=AVariableDeclaration*)? ('outputs'
		//outputDeclarations+=AVariableDeclaration*)? ('locals' localvarDeclarations+=AVariableDeclaration*)? ('fuzzy'
		//fuzzyVariables+=AFuzzyVariableDeclaration*)? ('let' useEquations+=AUseEquation* equations+=AEquation*)? '.'
		public Group getGroup() { return cGroup; }
		
		//'affine'
		public Keyword getAffineKeyword_0() { return cAffineKeyword_0; }
		
		//name=SystemName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SystemName
		public RuleCall getNameSystemNameParserRuleCall_1_0() { return cNameSystemNameParserRuleCall_1_0; }
		
		//parameters=AParamDomain
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//AParamDomain
		public RuleCall getParametersAParamDomainParserRuleCall_2_0() { return cParametersAParamDomainParserRuleCall_2_0; }
		
		//('inputs' inputDeclarations+=AVariableDeclaration*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'inputs'
		public Keyword getInputsKeyword_3_0() { return cInputsKeyword_3_0; }
		
		//inputDeclarations+=AVariableDeclaration*
		public Assignment getInputDeclarationsAssignment_3_1() { return cInputDeclarationsAssignment_3_1; }
		
		//AVariableDeclaration
		public RuleCall getInputDeclarationsAVariableDeclarationParserRuleCall_3_1_0() { return cInputDeclarationsAVariableDeclarationParserRuleCall_3_1_0; }
		
		//('outputs' outputDeclarations+=AVariableDeclaration*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'outputs'
		public Keyword getOutputsKeyword_4_0() { return cOutputsKeyword_4_0; }
		
		//outputDeclarations+=AVariableDeclaration*
		public Assignment getOutputDeclarationsAssignment_4_1() { return cOutputDeclarationsAssignment_4_1; }
		
		//AVariableDeclaration
		public RuleCall getOutputDeclarationsAVariableDeclarationParserRuleCall_4_1_0() { return cOutputDeclarationsAVariableDeclarationParserRuleCall_4_1_0; }
		
		//('locals' localvarDeclarations+=AVariableDeclaration*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'locals'
		public Keyword getLocalsKeyword_5_0() { return cLocalsKeyword_5_0; }
		
		//localvarDeclarations+=AVariableDeclaration*
		public Assignment getLocalvarDeclarationsAssignment_5_1() { return cLocalvarDeclarationsAssignment_5_1; }
		
		//AVariableDeclaration
		public RuleCall getLocalvarDeclarationsAVariableDeclarationParserRuleCall_5_1_0() { return cLocalvarDeclarationsAVariableDeclarationParserRuleCall_5_1_0; }
		
		//('fuzzy' fuzzyVariables+=AFuzzyVariableDeclaration*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'fuzzy'
		public Keyword getFuzzyKeyword_6_0() { return cFuzzyKeyword_6_0; }
		
		//fuzzyVariables+=AFuzzyVariableDeclaration*
		public Assignment getFuzzyVariablesAssignment_6_1() { return cFuzzyVariablesAssignment_6_1; }
		
		//AFuzzyVariableDeclaration
		public RuleCall getFuzzyVariablesAFuzzyVariableDeclarationParserRuleCall_6_1_0() { return cFuzzyVariablesAFuzzyVariableDeclarationParserRuleCall_6_1_0; }
		
		//('let' useEquations+=AUseEquation* equations+=AEquation*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'let'
		public Keyword getLetKeyword_7_0() { return cLetKeyword_7_0; }
		
		//useEquations+=AUseEquation*
		public Assignment getUseEquationsAssignment_7_1() { return cUseEquationsAssignment_7_1; }
		
		//AUseEquation
		public RuleCall getUseEquationsAUseEquationParserRuleCall_7_1_0() { return cUseEquationsAUseEquationParserRuleCall_7_1_0; }
		
		//equations+=AEquation*
		public Assignment getEquationsAssignment_7_2() { return cEquationsAssignment_7_2; }
		
		//AEquation
		public RuleCall getEquationsAEquationParserRuleCall_7_2_0() { return cEquationsAEquationParserRuleCall_7_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_8() { return cFullStopKeyword_8; }
	}
	public class AVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarListAVariableListParserRuleCall_0_0 = (RuleCall)cVarListAssignment_0.eContents().get(0);
		private final Assignment cDomainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDomainADomainExpressionParserRuleCall_1_0 = (RuleCall)cDomainAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AVariableDeclaration:
		//	varList+=AVariableList domain=ADomainExpression? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//varList+=AVariableList domain=ADomainExpression? ';'
		public Group getGroup() { return cGroup; }
		
		//varList+=AVariableList
		public Assignment getVarListAssignment_0() { return cVarListAssignment_0; }
		
		//AVariableList
		public RuleCall getVarListAVariableListParserRuleCall_0_0() { return cVarListAVariableListParserRuleCall_0_0; }
		
		//domain=ADomainExpression?
		public Assignment getDomainAssignment_1() { return cDomainAssignment_1; }
		
		//ADomainExpression
		public RuleCall getDomainADomainExpressionParserRuleCall_1_0() { return cDomainADomainExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class AVariableListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AVariableList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsAVariableParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsAVariableParserRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		
		//AVariableList:
		//	vars+=AVariable (',' vars+=AVariable)*;
		@Override public ParserRule getRule() { return rule; }
		
		//vars+=AVariable (',' vars+=AVariable)*
		public Group getGroup() { return cGroup; }
		
		//vars+=AVariable
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//AVariable
		public RuleCall getVarsAVariableParserRuleCall_0_0() { return cVarsAVariableParserRuleCall_0_0; }
		
		//(',' vars+=AVariable)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=AVariable
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//AVariable
		public RuleCall getVarsAVariableParserRuleCall_1_1_0() { return cVarsAVariableParserRuleCall_1_1_0; }
	}
	public class AVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AVariable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AFuzzyVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AFuzzyVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarListAVariableListParserRuleCall_0_0 = (RuleCall)cVarListAssignment_0.eContents().get(0);
		private final Assignment cRelationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationARelationParserRuleCall_1_0 = (RuleCall)cRelationAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AFuzzyVariableDeclaration:
		//	varList+=AVariableList relation=ARelation ';';
		@Override public ParserRule getRule() { return rule; }
		
		//varList+=AVariableList relation=ARelation ';'
		public Group getGroup() { return cGroup; }
		
		//varList+=AVariableList
		public Assignment getVarListAssignment_0() { return cVarListAssignment_0; }
		
		//AVariableList
		public RuleCall getVarListAVariableListParserRuleCall_0_0() { return cVarListAVariableListParserRuleCall_0_0; }
		
		//relation=ARelation
		public Assignment getRelationAssignment_1() { return cRelationAssignment_1; }
		
		//ARelation
		public RuleCall getRelationARelationParserRuleCall_1_0() { return cRelationARelationParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class SystemNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.SystemName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SystemName:
		//	ID // ('-' ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class IndexNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.IndexName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cApostropheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IndexName:
		//	ID '\''*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID '\''*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'\''*
		public Keyword getApostropheKeyword_1() { return cApostropheKeyword_1; }
	}
	public class AIndexDimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AIndexDimension");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIndexNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AIndexDimension:
		//	name=IndexName;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IndexName
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//IndexName
		public RuleCall getNameIndexNameParserRuleCall_0() { return cNameIndexNameParserRuleCall_0; }
	}
	public class AIndexListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AIndexList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAIndexListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIdsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdsAIndexDimensionParserRuleCall_1_0_0 = (RuleCall)cIdsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cIdsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cIdsAIndexDimensionParserRuleCall_1_1_1_0 = (RuleCall)cIdsAssignment_1_1_1.eContents().get(0);
		
		//AIndexList:
		//	{AIndexList} (ids+=AIndexDimension (',' ids+=AIndexDimension)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{AIndexList} (ids+=AIndexDimension (',' ids+=AIndexDimension)*)?
		public Group getGroup() { return cGroup; }
		
		//{AIndexList}
		public Action getAIndexListAction_0() { return cAIndexListAction_0; }
		
		//(ids+=AIndexDimension (',' ids+=AIndexDimension)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ids+=AIndexDimension
		public Assignment getIdsAssignment_1_0() { return cIdsAssignment_1_0; }
		
		//AIndexDimension
		public RuleCall getIdsAIndexDimensionParserRuleCall_1_0_0() { return cIdsAIndexDimensionParserRuleCall_1_0_0; }
		
		//(',' ids+=AIndexDimension)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//ids+=AIndexDimension
		public Assignment getIdsAssignment_1_1_1() { return cIdsAssignment_1_1_1; }
		
		//AIndexDimension
		public RuleCall getIdsAIndexDimensionParserRuleCall_1_1_1_0() { return cIdsAIndexDimensionParserRuleCall_1_1_1_0; }
	}
	public class ADomainExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ADomainExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cADomainProductParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cADomainTerminalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////
		////////// Domains ////////
		//ADomainExpression:
		//	ADomainProduct | ADomainTerminal;
		@Override public ParserRule getRule() { return rule; }
		
		//ADomainProduct | ADomainTerminal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADomainProduct
		public RuleCall getADomainProductParserRuleCall_0() { return cADomainProductParserRuleCall_0; }
		
		//ADomainTerminal
		public RuleCall getADomainTerminalParserRuleCall_1() { return cADomainTerminalParserRuleCall_1; }
	}
	public class ADomainTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ADomainTerminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAISLDomainParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAVariableDomainParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ADomainTerminal:
		//	AISLDomain | AVariableDomain;
		@Override public ParserRule getRule() { return rule; }
		
		//AISLDomain | AVariableDomain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AISLDomain
		public RuleCall getAISLDomainParserRuleCall_0() { return cAISLDomainParserRuleCall_0; }
		
		//AVariableDomain
		public RuleCall getAVariableDomainParserRuleCall_1() { return cAVariableDomainParserRuleCall_1; }
	}
	public class AISLDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AISLDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDimsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDimsAIndexListParserRuleCall_1_1_0 = (RuleCall)cDimsAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstraintStringAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintStringISLStringParserRuleCall_3_0 = (RuleCall)cConstraintStringAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AISLDomain:
		//	'{' ('[' dims=AIndexList ']')? ':' constraintString=ISLString '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' ('[' dims=AIndexList ']')? ':' constraintString=ISLString '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//('[' dims=AIndexList ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//dims=AIndexList
		public Assignment getDimsAssignment_1_1() { return cDimsAssignment_1_1; }
		
		//AIndexList
		public RuleCall getDimsAIndexListParserRuleCall_1_1_0() { return cDimsAIndexListParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//constraintString=ISLString
		public Assignment getConstraintStringAssignment_3() { return cConstraintStringAssignment_3; }
		
		//ISLString
		public RuleCall getConstraintStringISLStringParserRuleCall_3_0() { return cConstraintStringISLStringParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AVariableDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AVariableDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVarAVariableCrossReference_2_0 = (CrossReference)cVarAssignment_2.eContents().get(0);
		private final RuleCall cVarAVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cVarAVariableCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AVariableDomain:
		//	'D' '(' var=[AVariable] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'D' '(' var=[AVariable] ')'
		public Group getGroup() { return cGroup; }
		
		//'D'
		public Keyword getDKeyword_0() { return cDKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//var=[AVariable]
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//[AVariable]
		public CrossReference getVarAVariableCrossReference_2_0() { return cVarAVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getVarAVariableIDTerminalRuleCall_2_0_1() { return cVarAVariableIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ADomainProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ADomainProduct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExtensionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExtensionADomainTerminalParserRuleCall_0_0 = (RuleCall)cExtensionAssignment_0.eContents().get(0);
		private final Keyword cTimesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBaseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBaseADomainExpressionParserRuleCall_2_0 = (RuleCall)cBaseAssignment_2.eContents().get(0);
		
		//ADomainProduct:
		//	extension=ADomainTerminal 'times' base=ADomainExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//extension=ADomainTerminal 'times' base=ADomainExpression
		public Group getGroup() { return cGroup; }
		
		//extension=ADomainTerminal
		public Assignment getExtensionAssignment_0() { return cExtensionAssignment_0; }
		
		//ADomainTerminal
		public RuleCall getExtensionADomainTerminalParserRuleCall_0_0() { return cExtensionADomainTerminalParserRuleCall_0_0; }
		
		//'times'
		public Keyword getTimesKeyword_1() { return cTimesKeyword_1; }
		
		//base=ADomainExpression
		public Assignment getBaseAssignment_2() { return cBaseAssignment_2; }
		
		//ADomainExpression
		public RuleCall getBaseADomainExpressionParserRuleCall_2_0() { return cBaseADomainExpressionParserRuleCall_2_0; }
	}
	public class ADomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ADomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDimsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDimsAIndexListParserRuleCall_1_1_0 = (RuleCall)cDimsAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstraintStringAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintStringISLStringParserRuleCall_3_0 = (RuleCall)cConstraintStringAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Domains are unions of single polyhedron
		//ADomain:
		//	'{' ('[' dims=AIndexList ']')? ':' constraintString=ISLString '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' ('[' dims=AIndexList ']')? ':' constraintString=ISLString '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//('[' dims=AIndexList ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//dims=AIndexList
		public Assignment getDimsAssignment_1_1() { return cDimsAssignment_1_1; }
		
		//AIndexList
		public RuleCall getDimsAIndexListParserRuleCall_1_1_0() { return cDimsAIndexListParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//constraintString=ISLString
		public Assignment getConstraintStringAssignment_3() { return cConstraintStringAssignment_3; }
		
		//ISLString
		public RuleCall getConstraintStringISLStringParserRuleCall_3_0() { return cConstraintStringISLStringParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AParamDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AParamDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDimsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDimsAIndexListParserRuleCall_1_0 = (RuleCall)cDimsAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConstraintStringAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstraintStringISLStringParserRuleCall_6_0 = (RuleCall)cConstraintStringAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AParamDomain:
		//	'[' dims=AIndexList ']' '->' '{' ':' constraintString=ISLString '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' dims=AIndexList ']' '->' '{' ':' constraintString=ISLString '}'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//dims=AIndexList
		public Assignment getDimsAssignment_1() { return cDimsAssignment_1; }
		
		//AIndexList
		public RuleCall getDimsAIndexListParserRuleCall_1_0() { return cDimsAIndexListParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//constraintString=ISLString
		public Assignment getConstraintStringAssignment_6() { return cConstraintStringAssignment_6; }
		
		//ISLString
		public RuleCall getConstraintStringISLStringParserRuleCall_6_0() { return cConstraintStringISLStringParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ARelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ARelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInDimsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInDimsAIndexListParserRuleCall_2_0 = (RuleCall)cInDimsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutDimsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutDimsAIndexListParserRuleCall_6_0 = (RuleCall)cOutDimsAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cConstraintStrAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cConstraintStrISLStringParserRuleCall_8_0 = (RuleCall)cConstraintStrAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ARelation:
		//	'{' '[' inDims=AIndexList ']' '->' '[' outDims=AIndexList ']' constraintStr=ISLString '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' '[' inDims=AIndexList ']' '->' '[' outDims=AIndexList ']' constraintStr=ISLString '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//inDims=AIndexList
		public Assignment getInDimsAssignment_2() { return cInDimsAssignment_2; }
		
		//AIndexList
		public RuleCall getInDimsAIndexListParserRuleCall_2_0() { return cInDimsAIndexListParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//outDims=AIndexList
		public Assignment getOutDimsAssignment_6() { return cOutDimsAssignment_6; }
		
		//AIndexList
		public RuleCall getOutDimsAIndexListParserRuleCall_6_0() { return cOutDimsAIndexListParserRuleCall_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//constraintStr=ISLString
		public Assignment getConstraintStrAssignment_8() { return cConstraintStrAssignment_8; }
		
		//ISLString
		public RuleCall getConstraintStrISLStringParserRuleCall_8_0() { return cConstraintStrISLStringParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ISLStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ISLString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIndexNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOP_PLUSTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOP_MINUSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOP_MULTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOP_DIVTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOP_ANDTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOP_ORTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cLeftParenthesisKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cCommaKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cColonKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final RuleCall cINTERSECTIONTerminalRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cUNIONTerminalRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cWSTerminalRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cRELATIONAL_OPParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		//ISLString:
		//	(IndexName | INT | OP_PLUS | OP_MINUS | OP_MUL | OP_DIV | OP_AND | OP_OR | '[' | ']' | '(' | ')' | ',' | ':' |
		//	INTERSECTION | UNION | WS | RELATIONAL_OP)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(IndexName | INT | OP_PLUS | OP_MINUS | OP_MUL | OP_DIV | OP_AND | OP_OR | '[' | ']' | '(' | ')' | ',' | ':' |
		//INTERSECTION | UNION | WS | RELATIONAL_OP)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IndexName
		public RuleCall getIndexNameParserRuleCall_0() { return cIndexNameParserRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//OP_PLUS
		public RuleCall getOP_PLUSTerminalRuleCall_2() { return cOP_PLUSTerminalRuleCall_2; }
		
		//OP_MINUS
		public RuleCall getOP_MINUSTerminalRuleCall_3() { return cOP_MINUSTerminalRuleCall_3; }
		
		//OP_MUL
		public RuleCall getOP_MULTerminalRuleCall_4() { return cOP_MULTerminalRuleCall_4; }
		
		//OP_DIV
		public RuleCall getOP_DIVTerminalRuleCall_5() { return cOP_DIVTerminalRuleCall_5; }
		
		//OP_AND
		public RuleCall getOP_ANDTerminalRuleCall_6() { return cOP_ANDTerminalRuleCall_6; }
		
		//OP_OR
		public RuleCall getOP_ORTerminalRuleCall_7() { return cOP_ORTerminalRuleCall_7; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8() { return cLeftSquareBracketKeyword_8; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10() { return cLeftParenthesisKeyword_10; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
		
		//','
		public Keyword getCommaKeyword_12() { return cCommaKeyword_12; }
		
		//':'
		public Keyword getColonKeyword_13() { return cColonKeyword_13; }
		
		//INTERSECTION
		public RuleCall getINTERSECTIONTerminalRuleCall_14() { return cINTERSECTIONTerminalRuleCall_14; }
		
		//UNION
		public RuleCall getUNIONTerminalRuleCall_15() { return cUNIONTerminalRuleCall_15; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_16() { return cWSTerminalRuleCall_16; }
		
		//RELATIONAL_OP
		public RuleCall getRELATIONAL_OPParserRuleCall_17() { return cRELATIONAL_OPParserRuleCall_17; }
	}
	public class AEquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AEquation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarAVariableCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarAVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVarAVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexesAIndexListParserRuleCall_1_1_0 = (RuleCall)cIndexesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cOP_EQTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprAAlphaExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/////////// Equations //////
		//AEquation:
		//	var=[AVariable] ('[' indexes=AIndexList ']')? OP_EQ expr=AAlphaExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//var=[AVariable] ('[' indexes=AIndexList ']')? OP_EQ expr=AAlphaExpression ';'
		public Group getGroup() { return cGroup; }
		
		//var=[AVariable]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//[AVariable]
		public CrossReference getVarAVariableCrossReference_0_0() { return cVarAVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getVarAVariableIDTerminalRuleCall_0_0_1() { return cVarAVariableIDTerminalRuleCall_0_0_1; }
		
		//('[' indexes=AIndexList ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//indexes=AIndexList
		public Assignment getIndexesAssignment_1_1() { return cIndexesAssignment_1_1; }
		
		//AIndexList
		public RuleCall getIndexesAIndexListParserRuleCall_1_1_0() { return cIndexesAIndexListParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//OP_EQ
		public RuleCall getOP_EQTerminalRuleCall_2() { return cOP_EQTerminalRuleCall_2; }
		
		//expr=AAlphaExpression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//AAlphaExpression
		public RuleCall getExprAAlphaExpressionParserRuleCall_3_0() { return cExprAAlphaExpressionParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class AUseEquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AUseEquation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOverKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstantiationDomainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstantiationDomainADomainParserRuleCall_1_0 = (RuleCall)cInstantiationDomainAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cSubsystemDimsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cSubsystemDimsAIndexListParserRuleCall_2_2_0 = (RuleCall)cSubsystemDimsAssignment_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cOutputExprsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOutputExprsAAlphaExpressionParserRuleCall_5_0_0 = (RuleCall)cOutputExprsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cOutputExprsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cOutputExprsAAlphaExpressionParserRuleCall_5_1_1_0 = (RuleCall)cOutputExprsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cOP_EQTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cSystemAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cSystemAAffineSystemCrossReference_8_0 = (CrossReference)cSystemAssignment_8.eContents().get(0);
		private final RuleCall cSystemAAffineSystemIDTerminalRuleCall_8_0_1 = (RuleCall)cSystemAAffineSystemCrossReference_8_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cCallParamsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cCallParamsAIndexListParserRuleCall_10_0 = (RuleCall)cCallParamsAssignment_10.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Assignment cInputExprsAssignment_13_0 = (Assignment)cGroup_13.eContents().get(0);
		private final RuleCall cInputExprsAAlphaExpressionParserRuleCall_13_0_0 = (RuleCall)cInputExprsAssignment_13_0.eContents().get(0);
		private final Group cGroup_13_1 = (Group)cGroup_13.eContents().get(1);
		private final Keyword cCommaKeyword_13_1_0 = (Keyword)cGroup_13_1.eContents().get(0);
		private final Assignment cInputExprsAssignment_13_1_1 = (Assignment)cGroup_13_1.eContents().get(1);
		private final RuleCall cInputExprsAAlphaExpressionParserRuleCall_13_1_1_0 = (RuleCall)cInputExprsAssignment_13_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cSemicolonKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//AUseEquation:
		//	'over' instantiationDomain=ADomain ('with' '[' subsystemDims=AIndexList ']')? ':' '(' (outputExprs+=AAlphaExpression
		//	(',' outputExprs+=AAlphaExpression)*)? ')'
		//	OP_EQ
		//	system=[AAffineSystem] '[' callParams=AIndexList ']'
		//	'(' (inputExprs+=AAlphaExpression (',' inputExprs+=AAlphaExpression)*)? ')'
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'over' instantiationDomain=ADomain ('with' '[' subsystemDims=AIndexList ']')? ':' '(' (outputExprs+=AAlphaExpression
		//(',' outputExprs+=AAlphaExpression)*)? ')' OP_EQ system=[AAffineSystem] '[' callParams=AIndexList ']' '('
		//(inputExprs+=AAlphaExpression (',' inputExprs+=AAlphaExpression)*)? ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'over'
		public Keyword getOverKeyword_0() { return cOverKeyword_0; }
		
		//instantiationDomain=ADomain
		public Assignment getInstantiationDomainAssignment_1() { return cInstantiationDomainAssignment_1; }
		
		//ADomain
		public RuleCall getInstantiationDomainADomainParserRuleCall_1_0() { return cInstantiationDomainADomainParserRuleCall_1_0; }
		
		//('with' '[' subsystemDims=AIndexList ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'with'
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//subsystemDims=AIndexList
		public Assignment getSubsystemDimsAssignment_2_2() { return cSubsystemDimsAssignment_2_2; }
		
		//AIndexList
		public RuleCall getSubsystemDimsAIndexListParserRuleCall_2_2_0() { return cSubsystemDimsAIndexListParserRuleCall_2_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(outputExprs+=AAlphaExpression (',' outputExprs+=AAlphaExpression)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//outputExprs+=AAlphaExpression
		public Assignment getOutputExprsAssignment_5_0() { return cOutputExprsAssignment_5_0; }
		
		//AAlphaExpression
		public RuleCall getOutputExprsAAlphaExpressionParserRuleCall_5_0_0() { return cOutputExprsAAlphaExpressionParserRuleCall_5_0_0; }
		
		//(',' outputExprs+=AAlphaExpression)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//outputExprs+=AAlphaExpression
		public Assignment getOutputExprsAssignment_5_1_1() { return cOutputExprsAssignment_5_1_1; }
		
		//AAlphaExpression
		public RuleCall getOutputExprsAAlphaExpressionParserRuleCall_5_1_1_0() { return cOutputExprsAAlphaExpressionParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//OP_EQ
		public RuleCall getOP_EQTerminalRuleCall_7() { return cOP_EQTerminalRuleCall_7; }
		
		//system=[AAffineSystem]
		public Assignment getSystemAssignment_8() { return cSystemAssignment_8; }
		
		//[AAffineSystem]
		public CrossReference getSystemAAffineSystemCrossReference_8_0() { return cSystemAAffineSystemCrossReference_8_0; }
		
		//ID
		public RuleCall getSystemAAffineSystemIDTerminalRuleCall_8_0_1() { return cSystemAAffineSystemIDTerminalRuleCall_8_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_9() { return cLeftSquareBracketKeyword_9; }
		
		//callParams=AIndexList
		public Assignment getCallParamsAssignment_10() { return cCallParamsAssignment_10; }
		
		//AIndexList
		public RuleCall getCallParamsAIndexListParserRuleCall_10_0() { return cCallParamsAIndexListParserRuleCall_10_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_12() { return cLeftParenthesisKeyword_12; }
		
		//(inputExprs+=AAlphaExpression (',' inputExprs+=AAlphaExpression)*)?
		public Group getGroup_13() { return cGroup_13; }
		
		//inputExprs+=AAlphaExpression
		public Assignment getInputExprsAssignment_13_0() { return cInputExprsAssignment_13_0; }
		
		//AAlphaExpression
		public RuleCall getInputExprsAAlphaExpressionParserRuleCall_13_0_0() { return cInputExprsAAlphaExpressionParserRuleCall_13_0_0; }
		
		//(',' inputExprs+=AAlphaExpression)*
		public Group getGroup_13_1() { return cGroup_13_1; }
		
		//','
		public Keyword getCommaKeyword_13_1_0() { return cCommaKeyword_13_1_0; }
		
		//inputExprs+=AAlphaExpression
		public Assignment getInputExprsAssignment_13_1_1() { return cInputExprsAssignment_13_1_1; }
		
		//AAlphaExpression
		public RuleCall getInputExprsAAlphaExpressionParserRuleCall_13_1_1_0() { return cInputExprsAAlphaExpressionParserRuleCall_13_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_14() { return cRightParenthesisKeyword_14; }
		
		//';'
		public Keyword getSemicolonKeyword_15() { return cSemicolonKeyword_15; }
	}
	public class AAlphaExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AAlphaExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAIfExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cARestrictExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAOrExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////////// Expressions //////
		//AAlphaExpression:
		//	AIfExpression | ARestrictExpression | AOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//AIfExpression | ARestrictExpression | AOrExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AIfExpression
		public RuleCall getAIfExpressionParserRuleCall_0() { return cAIfExpressionParserRuleCall_0; }
		
		//ARestrictExpression
		public RuleCall getARestrictExpressionParserRuleCall_1() { return cARestrictExpressionParserRuleCall_1; }
		
		//AOrExpression
		public RuleCall getAOrExpressionParserRuleCall_2() { return cAOrExpressionParserRuleCall_2; }
	}
	public class AAlphabetsTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AAlphabetsTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAParanthesizedAlphabetsExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cACaseExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAReduceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAArgReduceExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAMultiArgExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAConstantExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAVariableExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAIndexExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cADependenceExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cADependenceInArrayNotationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//AAlphabetsTerminalExpression AAlphaExpression:
		//	AParanthesizedAlphabetsExpression | ACaseExpression | AReduceExpression | AArgReduceExpression | AMultiArgExpression |
		//	AConstantExpression | AVariableExpression | AIndexExpression | ADependenceExpression | ADependenceInArrayNotation;
		@Override public ParserRule getRule() { return rule; }
		
		//AParanthesizedAlphabetsExpression | ACaseExpression | AReduceExpression | AArgReduceExpression | AMultiArgExpression |
		//AConstantExpression | AVariableExpression | AIndexExpression | ADependenceExpression | ADependenceInArrayNotation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AParanthesizedAlphabetsExpression
		public RuleCall getAParanthesizedAlphabetsExpressionParserRuleCall_0() { return cAParanthesizedAlphabetsExpressionParserRuleCall_0; }
		
		//ACaseExpression
		public RuleCall getACaseExpressionParserRuleCall_1() { return cACaseExpressionParserRuleCall_1; }
		
		//AReduceExpression
		public RuleCall getAReduceExpressionParserRuleCall_2() { return cAReduceExpressionParserRuleCall_2; }
		
		//AArgReduceExpression
		public RuleCall getAArgReduceExpressionParserRuleCall_3() { return cAArgReduceExpressionParserRuleCall_3; }
		
		//AMultiArgExpression
		public RuleCall getAMultiArgExpressionParserRuleCall_4() { return cAMultiArgExpressionParserRuleCall_4; }
		
		//AConstantExpression
		public RuleCall getAConstantExpressionParserRuleCall_5() { return cAConstantExpressionParserRuleCall_5; }
		
		//AVariableExpression
		public RuleCall getAVariableExpressionParserRuleCall_6() { return cAVariableExpressionParserRuleCall_6; }
		
		//AIndexExpression
		public RuleCall getAIndexExpressionParserRuleCall_7() { return cAIndexExpressionParserRuleCall_7; }
		
		//ADependenceExpression
		public RuleCall getADependenceExpressionParserRuleCall_8() { return cADependenceExpressionParserRuleCall_8; }
		
		//ADependenceInArrayNotation
		public RuleCall getADependenceInArrayNotationParserRuleCall_9() { return cADependenceInArrayNotationParserRuleCall_9; }
	}
	public class AParanthesizedAlphabetsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AParanthesizedAlphabetsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAAlphaExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AParanthesizedAlphabetsExpression AAlphaExpression:
		//	"(" AAlphaExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" AAlphaExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//AAlphaExpression
		public RuleCall getAAlphaExpressionParserRuleCall_1() { return cAAlphaExpressionParserRuleCall_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class AOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final RuleCall cOperatorOP_ORTerminalRuleCall_1_1_0_0 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOperatorOP_XORTerminalRuleCall_1_1_0_1 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AOrExpression AAlphaExpression:
		//	AAndExpression ({AOrExpression.left=current} operator=(OP_OR | OP_XOR) right=AAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AAndExpression ({AOrExpression.left=current} operator=(OP_OR | OP_XOR) right=AAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AAndExpression
		public RuleCall getAAndExpressionParserRuleCall_0() { return cAAndExpressionParserRuleCall_0; }
		
		//({AOrExpression.left=current} operator=(OP_OR | OP_XOR) right=AAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AOrExpression.left=current}
		public Action getAOrExpressionLeftAction_1_0() { return cAOrExpressionLeftAction_1_0; }
		
		//operator=(OP_OR | OP_XOR)
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//(OP_OR | OP_XOR)
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//OP_OR
		public RuleCall getOperatorOP_ORTerminalRuleCall_1_1_0_0() { return cOperatorOP_ORTerminalRuleCall_1_1_0_0; }
		
		//OP_XOR
		public RuleCall getOperatorOP_XORTerminalRuleCall_1_1_0_1() { return cOperatorOP_XORTerminalRuleCall_1_1_0_1; }
		
		//right=AAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AAndExpression
		public RuleCall getRightAAndExpressionParserRuleCall_1_2_0() { return cRightAAndExpressionParserRuleCall_1_2_0; }
	}
	public class AAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cARelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final RuleCall cOperatorOP_ANDTerminalRuleCall_1_1_0_0 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOperatorOP_NANDTerminalRuleCall_1_1_0_1 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightARelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AAndExpression AAlphaExpression:
		//	ARelationalExpression ({AAndExpression.left=current} operator=(OP_AND | OP_NAND) right=ARelationalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ARelationalExpression ({AAndExpression.left=current} operator=(OP_AND | OP_NAND) right=ARelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//ARelationalExpression
		public RuleCall getARelationalExpressionParserRuleCall_0() { return cARelationalExpressionParserRuleCall_0; }
		
		//({AAndExpression.left=current} operator=(OP_AND | OP_NAND) right=ARelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AAndExpression.left=current}
		public Action getAAndExpressionLeftAction_1_0() { return cAAndExpressionLeftAction_1_0; }
		
		//operator=(OP_AND | OP_NAND)
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//(OP_AND | OP_NAND)
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//OP_AND
		public RuleCall getOperatorOP_ANDTerminalRuleCall_1_1_0_0() { return cOperatorOP_ANDTerminalRuleCall_1_1_0_0; }
		
		//OP_NAND
		public RuleCall getOperatorOP_NANDTerminalRuleCall_1_1_0_1() { return cOperatorOP_NANDTerminalRuleCall_1_1_0_1; }
		
		//right=ARelationalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ARelationalExpression
		public RuleCall getRightARelationalExpressionParserRuleCall_1_2_0() { return cRightARelationalExpressionParserRuleCall_1_2_0; }
	}
	public class ARelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ARelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cARelationalExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRELATIONAL_OPParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ARelationalExpression AAlphaExpression:
		//	AAdditiveExpression ({ARelationalExpression.left=current} operator=RELATIONAL_OP right=AAdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AAdditiveExpression ({ARelationalExpression.left=current} operator=RELATIONAL_OP right=AAdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//AAdditiveExpression
		public RuleCall getAAdditiveExpressionParserRuleCall_0() { return cAAdditiveExpressionParserRuleCall_0; }
		
		//({ARelationalExpression.left=current} operator=RELATIONAL_OP right=AAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ARelationalExpression.left=current}
		public Action getARelationalExpressionLeftAction_1_0() { return cARelationalExpressionLeftAction_1_0; }
		
		//operator=RELATIONAL_OP
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//RELATIONAL_OP
		public RuleCall getOperatorRELATIONAL_OPParserRuleCall_1_1_0() { return cOperatorRELATIONAL_OPParserRuleCall_1_1_0; }
		
		//right=AAdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AAdditiveExpression
		public RuleCall getRightAAdditiveExpressionParserRuleCall_1_2_0() { return cRightAAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class AAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAAdditiveExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final RuleCall cOpOP_PLUSTerminalRuleCall_1_1_0_0 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOpOP_MINUSTerminalRuleCall_1_1_0_1 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AAdditiveExpression AAlphaExpression:
		//	AMultiplicativeExpression ({AAdditiveExpression.left=current} op=(OP_PLUS | OP_MINUS)
		//	right=AMultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AMultiplicativeExpression ({AAdditiveExpression.left=current} op=(OP_PLUS | OP_MINUS) right=AMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//AMultiplicativeExpression
		public RuleCall getAMultiplicativeExpressionParserRuleCall_0() { return cAMultiplicativeExpressionParserRuleCall_0; }
		
		//({AAdditiveExpression.left=current} op=(OP_PLUS | OP_MINUS) right=AMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AAdditiveExpression.left=current}
		public Action getAAdditiveExpressionLeftAction_1_0() { return cAAdditiveExpressionLeftAction_1_0; }
		
		//op=(OP_PLUS | OP_MINUS)
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(OP_PLUS | OP_MINUS)
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//OP_PLUS
		public RuleCall getOpOP_PLUSTerminalRuleCall_1_1_0_0() { return cOpOP_PLUSTerminalRuleCall_1_1_0_0; }
		
		//OP_MINUS
		public RuleCall getOpOP_MINUSTerminalRuleCall_1_1_0_1() { return cOpOP_MINUSTerminalRuleCall_1_1_0_1; }
		
		//right=AMultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AMultiplicativeExpression
		public RuleCall getRightAMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightAMultiplicativeExpressionParserRuleCall_1_2_0; }
	}
	public class AMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAMinMaxExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAMultiplicativeExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final RuleCall cOpOP_MULTerminalRuleCall_1_1_0_0 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOpOP_DIVTerminalRuleCall_1_1_0_1 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAMinMaxExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AMultiplicativeExpression AAlphaExpression:
		//	AMinMaxExpression ({AMultiplicativeExpression.left=current} op=(OP_MUL | OP_DIV) right=AMinMaxExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AMinMaxExpression ({AMultiplicativeExpression.left=current} op=(OP_MUL | OP_DIV) right=AMinMaxExpression)*
		public Group getGroup() { return cGroup; }
		
		//AMinMaxExpression
		public RuleCall getAMinMaxExpressionParserRuleCall_0() { return cAMinMaxExpressionParserRuleCall_0; }
		
		//({AMultiplicativeExpression.left=current} op=(OP_MUL | OP_DIV) right=AMinMaxExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AMultiplicativeExpression.left=current}
		public Action getAMultiplicativeExpressionLeftAction_1_0() { return cAMultiplicativeExpressionLeftAction_1_0; }
		
		//op=(OP_MUL | OP_DIV)
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(OP_MUL | OP_DIV)
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//OP_MUL
		public RuleCall getOpOP_MULTerminalRuleCall_1_1_0_0() { return cOpOP_MULTerminalRuleCall_1_1_0_0; }
		
		//OP_DIV
		public RuleCall getOpOP_DIVTerminalRuleCall_1_1_0_1() { return cOpOP_DIVTerminalRuleCall_1_1_0_1; }
		
		//right=AMinMaxExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AMinMaxExpression
		public RuleCall getRightAMinMaxExpressionParserRuleCall_1_2_0() { return cRightAMinMaxExpressionParserRuleCall_1_2_0; }
	}
	public class AMinMaxExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AMinMaxExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAUnaryOrTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAMinMaxExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final RuleCall cOpOP_MINTerminalRuleCall_1_1_0_0 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOpOP_MAXTerminalRuleCall_1_1_0_1 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAUnaryOrTerminalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AMinMaxExpression AAlphaExpression:
		//	AUnaryOrTerminalExpression ({AMinMaxExpression.left=current} op=(OP_MIN | OP_MAX) right=AUnaryOrTerminalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AUnaryOrTerminalExpression ({AMinMaxExpression.left=current} op=(OP_MIN | OP_MAX) right=AUnaryOrTerminalExpression)*
		public Group getGroup() { return cGroup; }
		
		//AUnaryOrTerminalExpression
		public RuleCall getAUnaryOrTerminalExpressionParserRuleCall_0() { return cAUnaryOrTerminalExpressionParserRuleCall_0; }
		
		//({AMinMaxExpression.left=current} op=(OP_MIN | OP_MAX) right=AUnaryOrTerminalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AMinMaxExpression.left=current}
		public Action getAMinMaxExpressionLeftAction_1_0() { return cAMinMaxExpressionLeftAction_1_0; }
		
		//op=(OP_MIN | OP_MAX)
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(OP_MIN | OP_MAX)
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//OP_MIN
		public RuleCall getOpOP_MINTerminalRuleCall_1_1_0_0() { return cOpOP_MINTerminalRuleCall_1_1_0_0; }
		
		//OP_MAX
		public RuleCall getOpOP_MAXTerminalRuleCall_1_1_0_1() { return cOpOP_MAXTerminalRuleCall_1_1_0_1; }
		
		//right=AUnaryOrTerminalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AUnaryOrTerminalExpression
		public RuleCall getRightAUnaryOrTerminalExpressionParserRuleCall_1_2_0() { return cRightAUnaryOrTerminalExpressionParserRuleCall_1_2_0; }
	}
	public class AUnaryOrTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AUnaryOrTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAAlphabetsTerminalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AUnaryOrTerminalExpression AAlphaExpression:
		//	AUnaryExpression | AAlphabetsTerminalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//AUnaryExpression | AAlphabetsTerminalExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AUnaryExpression
		public RuleCall getAUnaryExpressionParserRuleCall_0() { return cAUnaryExpressionParserRuleCall_0; }
		
		//AAlphabetsTerminalExpression
		public RuleCall getAAlphabetsTerminalExpressionParserRuleCall_1() { return cAAlphabetsTerminalExpressionParserRuleCall_1; }
	}
	public class AUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AUnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cANotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cANegateExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AUnaryExpression AAlphaExpression:
		//	ANotExpression | ANegateExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ANotExpression | ANegateExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ANotExpression
		public RuleCall getANotExpressionParserRuleCall_0() { return cANotExpressionParserRuleCall_0; }
		
		//ANegateExpression
		public RuleCall getANegateExpressionParserRuleCall_1() { return cANegateExpressionParserRuleCall_1; }
	}
	public class ANotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ANotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpNotKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAAlphabetsTerminalExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//ANotExpression:
		//	op='not' expr=AAlphabetsTerminalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//op='not' expr=AAlphabetsTerminalExpression
		public Group getGroup() { return cGroup; }
		
		//op='not'
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//'not'
		public Keyword getOpNotKeyword_0_0() { return cOpNotKeyword_0_0; }
		
		//expr=AAlphabetsTerminalExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//AAlphabetsTerminalExpression
		public RuleCall getExprAAlphabetsTerminalExpressionParserRuleCall_1_0() { return cExprAAlphabetsTerminalExpressionParserRuleCall_1_0; }
	}
	public class ANegateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ANegateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOP_MINUSTerminalRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAAlphabetsTerminalExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//ANegateExpression:
		//	op=OP_MINUS expr=AAlphabetsTerminalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//op=OP_MINUS expr=AAlphabetsTerminalExpression
		public Group getGroup() { return cGroup; }
		
		//op=OP_MINUS
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//OP_MINUS
		public RuleCall getOpOP_MINUSTerminalRuleCall_0_0() { return cOpOP_MINUSTerminalRuleCall_0_0; }
		
		//expr=AAlphabetsTerminalExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//AAlphabetsTerminalExpression
		public RuleCall getExprAAlphabetsTerminalExpressionParserRuleCall_1_0() { return cExprAAlphabetsTerminalExpressionParserRuleCall_1_0; }
	}
	public class ACaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ACaseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cExprsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cExprsAAlphaExpressionParserRuleCall_3_0_0 = (RuleCall)cExprsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////////// Expressions //////	
		//ACaseExpression:
		//	'case' name=ID? '{' (exprs+=AAlphaExpression ';')+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'case' name=ID? '{' (exprs+=AAlphaExpression ';')+ '}'
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(exprs+=AAlphaExpression ';')+
		public Group getGroup_3() { return cGroup_3; }
		
		//exprs+=AAlphaExpression
		public Assignment getExprsAssignment_3_0() { return cExprsAssignment_3_0; }
		
		//AAlphaExpression
		public RuleCall getExprsAAlphaExpressionParserRuleCall_3_0_0() { return cExprsAAlphaExpressionParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ADependenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ADependenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFuncAFunctionParserRuleCall_0_0 = (RuleCall)cFuncAssignment_0.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprAAlphabetsTerminalExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//ADependenceExpression:
		//	func=AFunction '@' expr=AAlphabetsTerminalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//func=AFunction '@' expr=AAlphabetsTerminalExpression
		public Group getGroup() { return cGroup; }
		
		//func=AFunction
		public Assignment getFuncAssignment_0() { return cFuncAssignment_0; }
		
		//AFunction
		public RuleCall getFuncAFunctionParserRuleCall_0_0() { return cFuncAFunctionParserRuleCall_0_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//expr=AAlphabetsTerminalExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//AAlphabetsTerminalExpression
		public RuleCall getExprAAlphabetsTerminalExpressionParserRuleCall_2_0() { return cExprAAlphabetsTerminalExpressionParserRuleCall_2_0; }
	}
	public class ADependenceInArrayNotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ADependenceInArrayNotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarAVariableCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarAVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVarAVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDepAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDepAIndexAffineExpressionListParserRuleCall_2_0 = (RuleCall)cDepAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//////Array notation for AShow type syntax
		//ADependenceInArrayNotation:
		//	var=[AVariable] '[' dep=AIndexAffineExpressionList ']';
		@Override public ParserRule getRule() { return rule; }
		
		//var=[AVariable] '[' dep=AIndexAffineExpressionList ']'
		public Group getGroup() { return cGroup; }
		
		//var=[AVariable]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//[AVariable]
		public CrossReference getVarAVariableCrossReference_0_0() { return cVarAVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getVarAVariableIDTerminalRuleCall_0_0_1() { return cVarAVariableIDTerminalRuleCall_0_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//dep=AIndexAffineExpressionList
		public Assignment getDepAssignment_2() { return cDepAssignment_2; }
		
		//AIndexAffineExpressionList
		public RuleCall getDepAIndexAffineExpressionListParserRuleCall_2_0() { return cDepAIndexAffineExpressionListParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class AIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondAAlphaExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenAAlphaExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseAAlphaExpressionParserRuleCall_5_0 = (RuleCall)cElseAssignment_5.eContents().get(0);
		
		//AIfExpression:
		//	'if' cond=AAlphaExpression 'then' then=AAlphaExpression 'else' else=AAlphaExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' cond=AAlphaExpression 'then' then=AAlphaExpression 'else' else=AAlphaExpression
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//cond=AAlphaExpression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//AAlphaExpression
		public RuleCall getCondAAlphaExpressionParserRuleCall_1_0() { return cCondAAlphaExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//then=AAlphaExpression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//AAlphaExpression
		public RuleCall getThenAAlphaExpressionParserRuleCall_3_0() { return cThenAAlphaExpressionParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//else=AAlphaExpression
		public Assignment getElseAssignment_5() { return cElseAssignment_5; }
		
		//AAlphaExpression
		public RuleCall getElseAAlphaExpressionParserRuleCall_5_0() { return cElseAAlphaExpressionParserRuleCall_5_0; }
	}
	public class AIndexExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AIndexExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFuncAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFuncIndexAffineExpressionTerminalParserRuleCall_0_1_0 = (RuleCall)cFuncAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cValKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexesAIndexListParserRuleCall_1_1_0 = (RuleCall)cIndexesAssignment_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cFuncAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cFuncIndexAffineExpressionTerminalParserRuleCall_1_3_0 = (RuleCall)cFuncAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//AIndexExpression:
		//	'[' func=IndexAffineExpressionTerminal ']' | 'val(' indexes=AIndexList '->' func=IndexAffineExpressionTerminal ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' func=IndexAffineExpressionTerminal ']' | 'val(' indexes=AIndexList '->' func=IndexAffineExpressionTerminal ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' func=IndexAffineExpressionTerminal ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//func=IndexAffineExpressionTerminal
		public Assignment getFuncAssignment_0_1() { return cFuncAssignment_0_1; }
		
		//IndexAffineExpressionTerminal
		public RuleCall getFuncIndexAffineExpressionTerminalParserRuleCall_0_1_0() { return cFuncIndexAffineExpressionTerminalParserRuleCall_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//'val(' indexes=AIndexList '->' func=IndexAffineExpressionTerminal ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'val('
		public Keyword getValKeyword_1_0() { return cValKeyword_1_0; }
		
		//indexes=AIndexList
		public Assignment getIndexesAssignment_1_1() { return cIndexesAssignment_1_1; }
		
		//AIndexList
		public RuleCall getIndexesAIndexListParserRuleCall_1_1_0() { return cIndexesAIndexListParserRuleCall_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2() { return cHyphenMinusGreaterThanSignKeyword_1_2; }
		
		//func=IndexAffineExpressionTerminal
		public Assignment getFuncAssignment_1_3() { return cFuncAssignment_1_3; }
		
		//IndexAffineExpressionTerminal
		public RuleCall getFuncIndexAffineExpressionTerminalParserRuleCall_1_3_0() { return cFuncIndexAffineExpressionTerminalParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}
	public class AReduceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AReduceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpAReductionOperatorParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProjectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cProjectionAlternatives_4_0 = (Alternatives)cProjectionAssignment_4.eContents().get(0);
		private final RuleCall cProjectionAFunctionParserRuleCall_4_0_0 = (RuleCall)cProjectionAlternatives_4_0.eContents().get(0);
		private final RuleCall cProjectionAFunctionInArrayNotationParserRuleCall_4_0_1 = (RuleCall)cProjectionAlternatives_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExprAAlphaExpressionParserRuleCall_6_0 = (RuleCall)cExprAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AReduceExpression:
		//	'reduce' '(' op=AReductionOperator ',' projection=(AFunction | AFunctionInArrayNotation) ',' expr=AAlphaExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'reduce' '(' op=AReductionOperator ',' projection=(AFunction | AFunctionInArrayNotation) ',' expr=AAlphaExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'reduce'
		public Keyword getReduceKeyword_0() { return cReduceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//op=AReductionOperator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//AReductionOperator
		public RuleCall getOpAReductionOperatorParserRuleCall_2_0() { return cOpAReductionOperatorParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//projection=(AFunction | AFunctionInArrayNotation)
		public Assignment getProjectionAssignment_4() { return cProjectionAssignment_4; }
		
		//(AFunction | AFunctionInArrayNotation)
		public Alternatives getProjectionAlternatives_4_0() { return cProjectionAlternatives_4_0; }
		
		//AFunction
		public RuleCall getProjectionAFunctionParserRuleCall_4_0_0() { return cProjectionAFunctionParserRuleCall_4_0_0; }
		
		//AFunctionInArrayNotation
		public RuleCall getProjectionAFunctionInArrayNotationParserRuleCall_4_0_1() { return cProjectionAFunctionInArrayNotationParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//expr=AAlphaExpression
		public Assignment getExprAssignment_6() { return cExprAssignment_6; }
		
		//AAlphaExpression
		public RuleCall getExprAAlphaExpressionParserRuleCall_6_0() { return cExprAAlphaExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class AArgReduceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AArgReduceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArgreduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpAReductionOperatorParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProjectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cProjectionAlternatives_4_0 = (Alternatives)cProjectionAssignment_4.eContents().get(0);
		private final RuleCall cProjectionAFunctionParserRuleCall_4_0_0 = (RuleCall)cProjectionAlternatives_4_0.eContents().get(0);
		private final RuleCall cProjectionAFunctionInArrayNotationParserRuleCall_4_0_1 = (RuleCall)cProjectionAlternatives_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExprAAlphaExpressionParserRuleCall_6_0 = (RuleCall)cExprAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AArgReduceExpression:
		//	'argreduce' '(' op=AReductionOperator ',' projection=(AFunction | AFunctionInArrayNotation) ',' expr=AAlphaExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'argreduce' '(' op=AReductionOperator ',' projection=(AFunction | AFunctionInArrayNotation) ',' expr=AAlphaExpression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'argreduce'
		public Keyword getArgreduceKeyword_0() { return cArgreduceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//op=AReductionOperator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//AReductionOperator
		public RuleCall getOpAReductionOperatorParserRuleCall_2_0() { return cOpAReductionOperatorParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//projection=(AFunction | AFunctionInArrayNotation)
		public Assignment getProjectionAssignment_4() { return cProjectionAssignment_4; }
		
		//(AFunction | AFunctionInArrayNotation)
		public Alternatives getProjectionAlternatives_4_0() { return cProjectionAlternatives_4_0; }
		
		//AFunction
		public RuleCall getProjectionAFunctionParserRuleCall_4_0_0() { return cProjectionAFunctionParserRuleCall_4_0_0; }
		
		//AFunctionInArrayNotation
		public RuleCall getProjectionAFunctionInArrayNotationParserRuleCall_4_0_1() { return cProjectionAFunctionInArrayNotationParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//expr=AAlphaExpression
		public Assignment getExprAssignment_6() { return cExprAssignment_6; }
		
		//AAlphaExpression
		public RuleCall getExprAAlphaExpressionParserRuleCall_6_0() { return cExprAAlphaExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ARestrictExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ARestrictExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDomainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDomainADomainParserRuleCall_0_0 = (RuleCall)cDomainAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprAAlphaExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//ARestrictExpression:
		//	domain=ADomain ':' expr=AAlphaExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//domain=ADomain ':' expr=AAlphaExpression
		public Group getGroup() { return cGroup; }
		
		//domain=ADomain
		public Assignment getDomainAssignment_0() { return cDomainAssignment_0; }
		
		//ADomain
		public RuleCall getDomainADomainParserRuleCall_0_0() { return cDomainADomainParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//expr=AAlphaExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//AAlphaExpression
		public RuleCall getExprAAlphaExpressionParserRuleCall_2_0() { return cExprAAlphaExpressionParserRuleCall_2_0; }
	}
	public class AVariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AVariableExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarAVariableCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarAVariableIDTerminalRuleCall_0_1 = (RuleCall)cVarAVariableCrossReference_0.eContents().get(1);
		
		//AVariableExpression:
		//	var=[AVariable];
		@Override public ParserRule getRule() { return rule; }
		
		//var=[AVariable]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[AVariable]
		public CrossReference getVarAVariableCrossReference_0() { return cVarAVariableCrossReference_0; }
		
		//ID
		public RuleCall getVarAVariableIDTerminalRuleCall_0_1() { return cVarAVariableIDTerminalRuleCall_0_1; }
	}
	public class AConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AConstantExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cABooleanExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cARealExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAIntegerExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AConstantExpression:
		//	ABooleanExpression | ARealExpression | AIntegerExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ABooleanExpression | ARealExpression | AIntegerExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ABooleanExpression
		public RuleCall getABooleanExpressionParserRuleCall_0() { return cABooleanExpressionParserRuleCall_0; }
		
		//ARealExpression
		public RuleCall getARealExpressionParserRuleCall_1() { return cARealExpressionParserRuleCall_1; }
		
		//AIntegerExpression
		public RuleCall getAIntegerExpressionParserRuleCall_2() { return cAIntegerExpressionParserRuleCall_2; }
	}
	public class ABooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ABooleanExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ABooleanExpression:
		//	value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_0() { return cValueBOOLEANTerminalRuleCall_0; }
	}
	public class AIntegerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AIntegerExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//AIntegerExpression:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ARealExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ARealExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ARealExpression:
		//	value=REAL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=REAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//REAL
		public RuleCall getValueREALTerminalRuleCall_0() { return cValueREALTerminalRuleCall_0; }
	}
	public class AMultiArgExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AMultiArgExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAMultiArgArithmeticExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAMultiArgLogicalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAExternalFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AMultiArgExpression:
		//	AMultiArgArithmeticExpression | AMultiArgLogicalExpression | AExternalFunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//AMultiArgArithmeticExpression | AMultiArgLogicalExpression | AExternalFunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AMultiArgArithmeticExpression
		public RuleCall getAMultiArgArithmeticExpressionParserRuleCall_0() { return cAMultiArgArithmeticExpressionParserRuleCall_0; }
		
		//AMultiArgLogicalExpression
		public RuleCall getAMultiArgLogicalExpressionParserRuleCall_1() { return cAMultiArgLogicalExpressionParserRuleCall_1; }
		
		//AExternalFunctionCall
		public RuleCall getAExternalFunctionCallParserRuleCall_2() { return cAExternalFunctionCallParserRuleCall_2; }
	}
	public class AMultiArgArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AMultiArgArithmeticExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpARITHMETIC_REDUCTION_OPParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprsAAlphaExpressionParserRuleCall_2_0 = (RuleCall)cExprsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExprsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExprsAAlphaExpressionParserRuleCall_3_1_0 = (RuleCall)cExprsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AMultiArgArithmeticExpression:
		//	op=ARITHMETIC_REDUCTION_OP '(' exprs+=AAlphaExpression (',' exprs+=AAlphaExpression)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//op=ARITHMETIC_REDUCTION_OP '(' exprs+=AAlphaExpression (',' exprs+=AAlphaExpression)+ ')'
		public Group getGroup() { return cGroup; }
		
		//op=ARITHMETIC_REDUCTION_OP
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//ARITHMETIC_REDUCTION_OP
		public RuleCall getOpARITHMETIC_REDUCTION_OPParserRuleCall_0_0() { return cOpARITHMETIC_REDUCTION_OPParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exprs+=AAlphaExpression
		public Assignment getExprsAssignment_2() { return cExprsAssignment_2; }
		
		//AAlphaExpression
		public RuleCall getExprsAAlphaExpressionParserRuleCall_2_0() { return cExprsAAlphaExpressionParserRuleCall_2_0; }
		
		//(',' exprs+=AAlphaExpression)+
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//exprs+=AAlphaExpression
		public Assignment getExprsAssignment_3_1() { return cExprsAssignment_3_1; }
		
		//AAlphaExpression
		public RuleCall getExprsAAlphaExpressionParserRuleCall_3_1_0() { return cExprsAAlphaExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AMultiArgLogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AMultiArgLogicalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpLOGICAL_REDUCTION_OPParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprsAAlphaExpressionParserRuleCall_2_0 = (RuleCall)cExprsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExprsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExprsAAlphaExpressionParserRuleCall_3_1_0 = (RuleCall)cExprsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AMultiArgLogicalExpression:
		//	op=LOGICAL_REDUCTION_OP '(' exprs+=AAlphaExpression (',' exprs+=AAlphaExpression)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//op=LOGICAL_REDUCTION_OP '(' exprs+=AAlphaExpression (',' exprs+=AAlphaExpression)+ ')'
		public Group getGroup() { return cGroup; }
		
		//op=LOGICAL_REDUCTION_OP
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//LOGICAL_REDUCTION_OP
		public RuleCall getOpLOGICAL_REDUCTION_OPParserRuleCall_0_0() { return cOpLOGICAL_REDUCTION_OPParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exprs+=AAlphaExpression
		public Assignment getExprsAssignment_2() { return cExprsAssignment_2; }
		
		//AAlphaExpression
		public RuleCall getExprsAAlphaExpressionParserRuleCall_2_0() { return cExprsAAlphaExpressionParserRuleCall_2_0; }
		
		//(',' exprs+=AAlphaExpression)+
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//exprs+=AAlphaExpression
		public Assignment getExprsAssignment_3_1() { return cExprsAssignment_3_1; }
		
		//AAlphaExpression
		public RuleCall getExprsAAlphaExpressionParserRuleCall_3_1_0() { return cExprsAAlphaExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AExternalFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AExternalFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFuncAExternalFunctionCrossReference_0_0 = (CrossReference)cFuncAssignment_0.eContents().get(0);
		private final RuleCall cFuncAExternalFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cFuncAExternalFunctionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExprsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprsAAlphaExpressionParserRuleCall_2_0_0 = (RuleCall)cExprsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExprsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExprsAAlphaExpressionParserRuleCall_2_1_1_0 = (RuleCall)cExprsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AExternalFunctionCall:
		//	func=[AExternalFunction] '(' (exprs+=AAlphaExpression (',' exprs+=AAlphaExpression)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//func=[AExternalFunction] '(' (exprs+=AAlphaExpression (',' exprs+=AAlphaExpression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//func=[AExternalFunction]
		public Assignment getFuncAssignment_0() { return cFuncAssignment_0; }
		
		//[AExternalFunction]
		public CrossReference getFuncAExternalFunctionCrossReference_0_0() { return cFuncAExternalFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getFuncAExternalFunctionIDTerminalRuleCall_0_0_1() { return cFuncAExternalFunctionIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(exprs+=AAlphaExpression (',' exprs+=AAlphaExpression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//exprs+=AAlphaExpression
		public Assignment getExprsAssignment_2_0() { return cExprsAssignment_2_0; }
		
		//AAlphaExpression
		public RuleCall getExprsAAlphaExpressionParserRuleCall_2_0_0() { return cExprsAAlphaExpressionParserRuleCall_2_0_0; }
		
		//(',' exprs+=AAlphaExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//exprs+=AAlphaExpression
		public Assignment getExprsAssignment_2_1_1() { return cExprsAssignment_2_1_1; }
		
		//AAlphaExpression
		public RuleCall getExprsAAlphaExpressionParserRuleCall_2_1_1_0() { return cExprsAAlphaExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class IndexAffineExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.IndexAffineExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIndexAffineExpressionTerminalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cOP_PLUSTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cOP_MINUSTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIndexAffineExpressionTerminalParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////////////////////////////////////////////////////////////
		////////// Dependence functions and IndexExpressions ///////
		////////////////////////////////////////////////////////////
		//IndexAffineExpression:
		//	IndexAffineExpressionTerminal ((OP_PLUS | OP_MINUS) IndexAffineExpressionTerminal)*;
		@Override public ParserRule getRule() { return rule; }
		
		//IndexAffineExpressionTerminal ((OP_PLUS | OP_MINUS) IndexAffineExpressionTerminal)*
		public Group getGroup() { return cGroup; }
		
		//IndexAffineExpressionTerminal
		public RuleCall getIndexAffineExpressionTerminalParserRuleCall_0() { return cIndexAffineExpressionTerminalParserRuleCall_0; }
		
		//((OP_PLUS | OP_MINUS) IndexAffineExpressionTerminal)*
		public Group getGroup_1() { return cGroup_1; }
		
		//OP_PLUS | OP_MINUS
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//OP_PLUS
		public RuleCall getOP_PLUSTerminalRuleCall_1_0_0() { return cOP_PLUSTerminalRuleCall_1_0_0; }
		
		//OP_MINUS
		public RuleCall getOP_MINUSTerminalRuleCall_1_0_1() { return cOP_MINUSTerminalRuleCall_1_0_1; }
		
		//IndexAffineExpressionTerminal
		public RuleCall getIndexAffineExpressionTerminalParserRuleCall_1_1() { return cIndexAffineExpressionTerminalParserRuleCall_1_1; }
	}
	public class IndexAffineExpressionTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.IndexAffineExpressionTerminal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOP_MINUSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cIndexNameParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//IndexAffineExpressionTerminal:
		//	OP_MINUS? (INT | INT? IndexName);
		@Override public ParserRule getRule() { return rule; }
		
		//OP_MINUS? (INT | INT? IndexName)
		public Group getGroup() { return cGroup; }
		
		//OP_MINUS?
		public RuleCall getOP_MINUSTerminalRuleCall_0() { return cOP_MINUSTerminalRuleCall_0; }
		
		//INT | INT? IndexName
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//INT? IndexName
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1_1_0() { return cINTTerminalRuleCall_1_1_0; }
		
		//IndexName
		public RuleCall getIndexNameParserRuleCall_1_1_1() { return cIndexNameParserRuleCall_1_1_1; }
	}
	public class AIndexAffineExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AIndexAffineExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAIndexAffineExpressionListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprsIndexAffineExpressionParserRuleCall_1_0_0 = (RuleCall)cExprsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExprsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprsIndexAffineExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExprsAssignment_1_1_1.eContents().get(0);
		
		//AIndexAffineExpressionList:
		//	{AIndexAffineExpressionList} (exprs+=IndexAffineExpression (',' exprs+=IndexAffineExpression)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{AIndexAffineExpressionList} (exprs+=IndexAffineExpression (',' exprs+=IndexAffineExpression)*)?
		public Group getGroup() { return cGroup; }
		
		//{AIndexAffineExpressionList}
		public Action getAIndexAffineExpressionListAction_0() { return cAIndexAffineExpressionListAction_0; }
		
		//(exprs+=IndexAffineExpression (',' exprs+=IndexAffineExpression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//exprs+=IndexAffineExpression
		public Assignment getExprsAssignment_1_0() { return cExprsAssignment_1_0; }
		
		//IndexAffineExpression
		public RuleCall getExprsIndexAffineExpressionParserRuleCall_1_0_0() { return cExprsIndexAffineExpressionParserRuleCall_1_0_0; }
		
		//(',' exprs+=IndexAffineExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//exprs+=IndexAffineExpression
		public Assignment getExprsAssignment_1_1_1() { return cExprsAssignment_1_1_1; }
		
		//IndexAffineExpression
		public RuleCall getExprsIndexAffineExpressionParserRuleCall_1_1_1_0() { return cExprsIndexAffineExpressionParserRuleCall_1_1_1_0; }
	}
	public class AFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexesAIndexListParserRuleCall_1_0 = (RuleCall)cIndexesAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFuncAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFuncAIndexAffineExpressionListParserRuleCall_3_0 = (RuleCall)cFuncAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AFunction:
		//	'(' indexes=AIndexList '->' func=AIndexAffineExpressionList ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' indexes=AIndexList '->' func=AIndexAffineExpressionList ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//indexes=AIndexList
		public Assignment getIndexesAssignment_1() { return cIndexesAssignment_1; }
		
		//AIndexList
		public RuleCall getIndexesAIndexListParserRuleCall_1_0() { return cIndexesAIndexListParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//func=AIndexAffineExpressionList
		public Assignment getFuncAssignment_3() { return cFuncAssignment_3; }
		
		//AIndexAffineExpressionList
		public RuleCall getFuncAIndexAffineExpressionListParserRuleCall_3_0() { return cFuncAIndexAffineExpressionListParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AFunctionInArrayNotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AFunctionInArrayNotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNewIdsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNewIdsAIndexAffineExpressionListParserRuleCall_1_0 = (RuleCall)cNewIdsAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//////Array notation for AShow type syntax
		//AFunctionInArrayNotation:
		//	'[' newIds=AIndexAffineExpressionList ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' newIds=AIndexAffineExpressionList ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//newIds=AIndexAffineExpressionList
		public Assignment getNewIdsAssignment_1() { return cNewIdsAssignment_1; }
		
		//AIndexAffineExpressionList
		public RuleCall getNewIdsAIndexAffineExpressionListParserRuleCall_1_0() { return cNewIdsAIndexAffineExpressionListParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class AReductionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.AReductionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cOpAExternalFunctionCrossReference_0_0 = (CrossReference)cOpAssignment_0.eContents().get(0);
		private final RuleCall cOpAExternalFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cOpAExternalFunctionCrossReference_0_0.eContents().get(1);
		private final Assignment cBuiltinAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBuiltinREDUCTION_OPParserRuleCall_1_0 = (RuleCall)cBuiltinAssignment_1.eContents().get(0);
		
		//AReductionOperator:
		//	op=[AExternalFunction] | builtin=REDUCTION_OP;
		@Override public ParserRule getRule() { return rule; }
		
		//op=[AExternalFunction] | builtin=REDUCTION_OP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//op=[AExternalFunction]
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//[AExternalFunction]
		public CrossReference getOpAExternalFunctionCrossReference_0_0() { return cOpAExternalFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getOpAExternalFunctionIDTerminalRuleCall_0_0_1() { return cOpAExternalFunctionIDTerminalRuleCall_0_0_1; }
		
		//builtin=REDUCTION_OP
		public Assignment getBuiltinAssignment_1() { return cBuiltinAssignment_1; }
		
		//REDUCTION_OP
		public RuleCall getBuiltinREDUCTION_OPParserRuleCall_1_0() { return cBuiltinREDUCTION_OPParserRuleCall_1_0; }
	}
	public class ARITHMETIC_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ARITHMETIC_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cARITHMETIC_REDUCTION_OPParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cARITHMETIC_NONREDUCTION_OPParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/////// Tokens /////
		////AType: unsigned=('unsigned')? type=(ATypeInteger|ATypeFloat|ATypeBoolean|ATypeChar);
		////
		////ATypeInteger:
		////	'int' | 'longlong' | 'long' | 'short';
		////ATypeBoolean:
		////	'bool';
		////ATypeFloat:
		////	'float' | 'double';
		////ATypeChar:
		////	'char';	
		//ARITHMETIC_OP:
		//	ARITHMETIC_REDUCTION_OP | ARITHMETIC_NONREDUCTION_OP;
		@Override public ParserRule getRule() { return rule; }
		
		//ARITHMETIC_REDUCTION_OP | ARITHMETIC_NONREDUCTION_OP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ARITHMETIC_REDUCTION_OP
		public RuleCall getARITHMETIC_REDUCTION_OPParserRuleCall_0() { return cARITHMETIC_REDUCTION_OPParserRuleCall_0; }
		
		//ARITHMETIC_NONREDUCTION_OP
		public RuleCall getARITHMETIC_NONREDUCTION_OPParserRuleCall_1() { return cARITHMETIC_NONREDUCTION_OPParserRuleCall_1; }
	}
	public class LOGICAL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.LOGICAL_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLOGICAL_REDUCTION_OPParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLOGICAL_NONREDUCTION_OPParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LOGICAL_OP:
		//	LOGICAL_REDUCTION_OP | LOGICAL_NONREDUCTION_OP;
		@Override public ParserRule getRule() { return rule; }
		
		//LOGICAL_REDUCTION_OP | LOGICAL_NONREDUCTION_OP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LOGICAL_REDUCTION_OP
		public RuleCall getLOGICAL_REDUCTION_OPParserRuleCall_0() { return cLOGICAL_REDUCTION_OPParserRuleCall_0; }
		
		//LOGICAL_NONREDUCTION_OP
		public RuleCall getLOGICAL_NONREDUCTION_OPParserRuleCall_1() { return cLOGICAL_NONREDUCTION_OPParserRuleCall_1; }
	}
	public class REDUCTION_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.REDUCTION_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cARITHMETIC_REDUCTION_OPParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLOGICAL_REDUCTION_OPParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//REDUCTION_OP:
		//	ARITHMETIC_REDUCTION_OP | LOGICAL_REDUCTION_OP;
		@Override public ParserRule getRule() { return rule; }
		
		//ARITHMETIC_REDUCTION_OP | LOGICAL_REDUCTION_OP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ARITHMETIC_REDUCTION_OP
		public RuleCall getARITHMETIC_REDUCTION_OPParserRuleCall_0() { return cARITHMETIC_REDUCTION_OPParserRuleCall_0; }
		
		//LOGICAL_REDUCTION_OP
		public RuleCall getLOGICAL_REDUCTION_OPParserRuleCall_1() { return cLOGICAL_REDUCTION_OPParserRuleCall_1; }
	}
	public class ARITHMETIC_REDUCTION_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ARITHMETIC_REDUCTION_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOP_MAXTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOP_MINTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOP_MULTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOP_PLUSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ARITHMETIC_REDUCTION_OP:
		//	OP_MAX | OP_MIN | OP_MUL | OP_PLUS;
		@Override public ParserRule getRule() { return rule; }
		
		//OP_MAX | OP_MIN | OP_MUL | OP_PLUS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OP_MAX
		public RuleCall getOP_MAXTerminalRuleCall_0() { return cOP_MAXTerminalRuleCall_0; }
		
		//OP_MIN
		public RuleCall getOP_MINTerminalRuleCall_1() { return cOP_MINTerminalRuleCall_1; }
		
		//OP_MUL
		public RuleCall getOP_MULTerminalRuleCall_2() { return cOP_MULTerminalRuleCall_2; }
		
		//OP_PLUS
		public RuleCall getOP_PLUSTerminalRuleCall_3() { return cOP_PLUSTerminalRuleCall_3; }
	}
	public class LOGICAL_REDUCTION_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.LOGICAL_REDUCTION_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOP_ANDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOP_ORTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOP_XORTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LOGICAL_REDUCTION_OP:
		//	OP_AND | OP_OR | OP_XOR;
		@Override public ParserRule getRule() { return rule; }
		
		//OP_AND | OP_OR | OP_XOR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OP_AND
		public RuleCall getOP_ANDTerminalRuleCall_0() { return cOP_ANDTerminalRuleCall_0; }
		
		//OP_OR
		public RuleCall getOP_ORTerminalRuleCall_1() { return cOP_ORTerminalRuleCall_1; }
		
		//OP_XOR
		public RuleCall getOP_XORTerminalRuleCall_2() { return cOP_XORTerminalRuleCall_2; }
	}
	public class ARITHMETIC_NONREDUCTION_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.ARITHMETIC_NONREDUCTION_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOP_MINUSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOP_DIVTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOP_MODTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ARITHMETIC_NONREDUCTION_OP:
		//	OP_MINUS | OP_DIV | OP_MOD;
		@Override public ParserRule getRule() { return rule; }
		
		//OP_MINUS | OP_DIV | OP_MOD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OP_MINUS
		public RuleCall getOP_MINUSTerminalRuleCall_0() { return cOP_MINUSTerminalRuleCall_0; }
		
		//OP_DIV
		public RuleCall getOP_DIVTerminalRuleCall_1() { return cOP_DIVTerminalRuleCall_1; }
		
		//OP_MOD
		public RuleCall getOP_MODTerminalRuleCall_2() { return cOP_MODTerminalRuleCall_2; }
	}
	public class LOGICAL_NONREDUCTION_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.LOGICAL_NONREDUCTION_OP");
		private final RuleCall cOP_NANDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LOGICAL_NONREDUCTION_OP:
		//	OP_NAND;
		@Override public ParserRule getRule() { return rule; }
		
		//OP_NAND
		public RuleCall getOP_NANDTerminalRuleCall() { return cOP_NANDTerminalRuleCall; }
	}
	public class RELATIONAL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.RELATIONAL_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOP_EQTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOP_GETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOP_GTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOP_LETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOP_LTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOP_NETerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//RELATIONAL_OP:
		//	OP_EQ | OP_GE | OP_GT | OP_LE | OP_LT | OP_NE;
		@Override public ParserRule getRule() { return rule; }
		
		//OP_EQ | OP_GE | OP_GT | OP_LE | OP_LT | OP_NE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OP_EQ
		public RuleCall getOP_EQTerminalRuleCall_0() { return cOP_EQTerminalRuleCall_0; }
		
		//OP_GE
		public RuleCall getOP_GETerminalRuleCall_1() { return cOP_GETerminalRuleCall_1; }
		
		//OP_GT
		public RuleCall getOP_GTTerminalRuleCall_2() { return cOP_GTTerminalRuleCall_2; }
		
		//OP_LE
		public RuleCall getOP_LETerminalRuleCall_3() { return cOP_LETerminalRuleCall_3; }
		
		//OP_LT
		public RuleCall getOP_LTTerminalRuleCall_4() { return cOP_LTTerminalRuleCall_4; }
		
		//OP_NE
		public RuleCall getOP_NETerminalRuleCall_5() { return cOP_NETerminalRuleCall_5; }
	}
	
	
	private final AStartElements pAStart;
	private final AbstractElementElements pAbstractElement;
	private final APackageDeclarationElements pAPackageDeclaration;
	private final AImportElements pAImport;
	private final AExternalFunctionDeclarationElements pAExternalFunctionDeclaration;
	private final AExternalFunctionElements pAExternalFunction;
	private final AAffineSystemElements pAAffineSystem;
	private final AVariableDeclarationElements pAVariableDeclaration;
	private final AVariableListElements pAVariableList;
	private final AVariableElements pAVariable;
	private final AFuzzyVariableDeclarationElements pAFuzzyVariableDeclaration;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final SystemNameElements pSystemName;
	private final IndexNameElements pIndexName;
	private final AIndexDimensionElements pAIndexDimension;
	private final AIndexListElements pAIndexList;
	private final ADomainExpressionElements pADomainExpression;
	private final ADomainTerminalElements pADomainTerminal;
	private final AISLDomainElements pAISLDomain;
	private final AVariableDomainElements pAVariableDomain;
	private final ADomainProductElements pADomainProduct;
	private final ADomainElements pADomain;
	private final AParamDomainElements pAParamDomain;
	private final ARelationElements pARelation;
	private final ISLStringElements pISLString;
	private final AEquationElements pAEquation;
	private final AUseEquationElements pAUseEquation;
	private final AAlphaExpressionElements pAAlphaExpression;
	private final AAlphabetsTerminalExpressionElements pAAlphabetsTerminalExpression;
	private final AParanthesizedAlphabetsExpressionElements pAParanthesizedAlphabetsExpression;
	private final AOrExpressionElements pAOrExpression;
	private final AAndExpressionElements pAAndExpression;
	private final ARelationalExpressionElements pARelationalExpression;
	private final AAdditiveExpressionElements pAAdditiveExpression;
	private final AMultiplicativeExpressionElements pAMultiplicativeExpression;
	private final AMinMaxExpressionElements pAMinMaxExpression;
	private final AUnaryOrTerminalExpressionElements pAUnaryOrTerminalExpression;
	private final AUnaryExpressionElements pAUnaryExpression;
	private final ANotExpressionElements pANotExpression;
	private final ANegateExpressionElements pANegateExpression;
	private final ACaseExpressionElements pACaseExpression;
	private final ADependenceExpressionElements pADependenceExpression;
	private final ADependenceInArrayNotationElements pADependenceInArrayNotation;
	private final AIfExpressionElements pAIfExpression;
	private final AIndexExpressionElements pAIndexExpression;
	private final AReduceExpressionElements pAReduceExpression;
	private final AArgReduceExpressionElements pAArgReduceExpression;
	private final ARestrictExpressionElements pARestrictExpression;
	private final AVariableExpressionElements pAVariableExpression;
	private final AConstantExpressionElements pAConstantExpression;
	private final ABooleanExpressionElements pABooleanExpression;
	private final AIntegerExpressionElements pAIntegerExpression;
	private final ARealExpressionElements pARealExpression;
	private final AMultiArgExpressionElements pAMultiArgExpression;
	private final AMultiArgArithmeticExpressionElements pAMultiArgArithmeticExpression;
	private final AMultiArgLogicalExpressionElements pAMultiArgLogicalExpression;
	private final AExternalFunctionCallElements pAExternalFunctionCall;
	private final IndexAffineExpressionElements pIndexAffineExpression;
	private final IndexAffineExpressionTerminalElements pIndexAffineExpressionTerminal;
	private final AIndexAffineExpressionListElements pAIndexAffineExpressionList;
	private final AFunctionElements pAFunction;
	private final AFunctionInArrayNotationElements pAFunctionInArrayNotation;
	private final AReductionOperatorElements pAReductionOperator;
	private final ARITHMETIC_OPElements pARITHMETIC_OP;
	private final LOGICAL_OPElements pLOGICAL_OP;
	private final REDUCTION_OPElements pREDUCTION_OP;
	private final ARITHMETIC_REDUCTION_OPElements pARITHMETIC_REDUCTION_OP;
	private final LOGICAL_REDUCTION_OPElements pLOGICAL_REDUCTION_OP;
	private final ARITHMETIC_NONREDUCTION_OPElements pARITHMETIC_NONREDUCTION_OP;
	private final LOGICAL_NONREDUCTION_OPElements pLOGICAL_NONREDUCTION_OP;
	private final RELATIONAL_OPElements pRELATIONAL_OP;
	private final TerminalRule tOP_AND;
	private final TerminalRule tOP_MAX;
	private final TerminalRule tOP_MIN;
	private final TerminalRule tOP_MUL;
	private final TerminalRule tOP_OR;
	private final TerminalRule tOP_XOR;
	private final TerminalRule tOP_PLUS;
	private final TerminalRule tOP_MINUS;
	private final TerminalRule tOP_DIV;
	private final TerminalRule tOP_MOD;
	private final TerminalRule tOP_NAND;
	private final TerminalRule tOP_EQ;
	private final TerminalRule tOP_GE;
	private final TerminalRule tOP_GT;
	private final TerminalRule tOP_LE;
	private final TerminalRule tOP_LT;
	private final TerminalRule tOP_NE;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tREAL;
	private final TerminalRule tINTERSECTION;
	private final TerminalRule tUNION;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AlphaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAStart = new AStartElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pAPackageDeclaration = new APackageDeclarationElements();
		this.pAImport = new AImportElements();
		this.pAExternalFunctionDeclaration = new AExternalFunctionDeclarationElements();
		this.pAExternalFunction = new AExternalFunctionElements();
		this.pAAffineSystem = new AAffineSystemElements();
		this.pAVariableDeclaration = new AVariableDeclarationElements();
		this.pAVariableList = new AVariableListElements();
		this.pAVariable = new AVariableElements();
		this.pAFuzzyVariableDeclaration = new AFuzzyVariableDeclarationElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pSystemName = new SystemNameElements();
		this.pIndexName = new IndexNameElements();
		this.pAIndexDimension = new AIndexDimensionElements();
		this.pAIndexList = new AIndexListElements();
		this.pADomainExpression = new ADomainExpressionElements();
		this.pADomainTerminal = new ADomainTerminalElements();
		this.pAISLDomain = new AISLDomainElements();
		this.pAVariableDomain = new AVariableDomainElements();
		this.pADomainProduct = new ADomainProductElements();
		this.pADomain = new ADomainElements();
		this.pAParamDomain = new AParamDomainElements();
		this.pARelation = new ARelationElements();
		this.pISLString = new ISLStringElements();
		this.pAEquation = new AEquationElements();
		this.pAUseEquation = new AUseEquationElements();
		this.pAAlphaExpression = new AAlphaExpressionElements();
		this.pAAlphabetsTerminalExpression = new AAlphabetsTerminalExpressionElements();
		this.pAParanthesizedAlphabetsExpression = new AParanthesizedAlphabetsExpressionElements();
		this.pAOrExpression = new AOrExpressionElements();
		this.pAAndExpression = new AAndExpressionElements();
		this.pARelationalExpression = new ARelationalExpressionElements();
		this.pAAdditiveExpression = new AAdditiveExpressionElements();
		this.pAMultiplicativeExpression = new AMultiplicativeExpressionElements();
		this.pAMinMaxExpression = new AMinMaxExpressionElements();
		this.pAUnaryOrTerminalExpression = new AUnaryOrTerminalExpressionElements();
		this.pAUnaryExpression = new AUnaryExpressionElements();
		this.pANotExpression = new ANotExpressionElements();
		this.pANegateExpression = new ANegateExpressionElements();
		this.pACaseExpression = new ACaseExpressionElements();
		this.pADependenceExpression = new ADependenceExpressionElements();
		this.pADependenceInArrayNotation = new ADependenceInArrayNotationElements();
		this.pAIfExpression = new AIfExpressionElements();
		this.pAIndexExpression = new AIndexExpressionElements();
		this.pAReduceExpression = new AReduceExpressionElements();
		this.pAArgReduceExpression = new AArgReduceExpressionElements();
		this.pARestrictExpression = new ARestrictExpressionElements();
		this.pAVariableExpression = new AVariableExpressionElements();
		this.pAConstantExpression = new AConstantExpressionElements();
		this.pABooleanExpression = new ABooleanExpressionElements();
		this.pAIntegerExpression = new AIntegerExpressionElements();
		this.pARealExpression = new ARealExpressionElements();
		this.pAMultiArgExpression = new AMultiArgExpressionElements();
		this.pAMultiArgArithmeticExpression = new AMultiArgArithmeticExpressionElements();
		this.pAMultiArgLogicalExpression = new AMultiArgLogicalExpressionElements();
		this.pAExternalFunctionCall = new AExternalFunctionCallElements();
		this.pIndexAffineExpression = new IndexAffineExpressionElements();
		this.pIndexAffineExpressionTerminal = new IndexAffineExpressionTerminalElements();
		this.pAIndexAffineExpressionList = new AIndexAffineExpressionListElements();
		this.pAFunction = new AFunctionElements();
		this.pAFunctionInArrayNotation = new AFunctionInArrayNotationElements();
		this.pAReductionOperator = new AReductionOperatorElements();
		this.pARITHMETIC_OP = new ARITHMETIC_OPElements();
		this.pLOGICAL_OP = new LOGICAL_OPElements();
		this.pREDUCTION_OP = new REDUCTION_OPElements();
		this.pARITHMETIC_REDUCTION_OP = new ARITHMETIC_REDUCTION_OPElements();
		this.pLOGICAL_REDUCTION_OP = new LOGICAL_REDUCTION_OPElements();
		this.pARITHMETIC_NONREDUCTION_OP = new ARITHMETIC_NONREDUCTION_OPElements();
		this.pLOGICAL_NONREDUCTION_OP = new LOGICAL_NONREDUCTION_OPElements();
		this.pRELATIONAL_OP = new RELATIONAL_OPElements();
		this.tOP_AND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_AND");
		this.tOP_MAX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_MAX");
		this.tOP_MIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_MIN");
		this.tOP_MUL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_MUL");
		this.tOP_OR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_OR");
		this.tOP_XOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_XOR");
		this.tOP_PLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_PLUS");
		this.tOP_MINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_MINUS");
		this.tOP_DIV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_DIV");
		this.tOP_MOD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_MOD");
		this.tOP_NAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_NAND");
		this.tOP_EQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_EQ");
		this.tOP_GE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_GE");
		this.tOP_GT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_GT");
		this.tOP_LE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_LE");
		this.tOP_LT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_LT");
		this.tOP_NE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.OP_NE");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.BOOLEAN");
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.REAL");
		this.tINTERSECTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.INTERSECTION");
		this.tUNION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.UNION");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "alpha.Alpha.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("alpha.Alpha".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AStart:
	//	elements+=AbstractElement*;
	public AStartElements getAStartAccess() {
		return pAStart;
	}
	
	public ParserRule getAStartRule() {
		return getAStartAccess().getRule();
	}
	
	//AbstractElement:
	//	APackageDeclaration | AAffineSystem | AImport | AExternalFunctionDeclaration;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//APackageDeclaration:
	//	'package' name=QualifiedName '{'
	//	elements+=AbstractElement*
	//	'}';
	public APackageDeclarationElements getAPackageDeclarationAccess() {
		return pAPackageDeclaration;
	}
	
	public ParserRule getAPackageDeclarationRule() {
		return getAPackageDeclarationAccess().getRule();
	}
	
	//AImport:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public AImportElements getAImportAccess() {
		return pAImport;
	}
	
	public ParserRule getAImportRule() {
		return getAImportAccess().getRule();
	}
	
	//AExternalFunctionDeclaration:
	//	'external' AExternalFunction ';';
	public AExternalFunctionDeclarationElements getAExternalFunctionDeclarationAccess() {
		return pAExternalFunctionDeclaration;
	}
	
	public ParserRule getAExternalFunctionDeclarationRule() {
		return getAExternalFunctionDeclarationAccess().getRule();
	}
	
	//AExternalFunction:
	//	name=ID '(' inputCardinarity=INT ')';
	public AExternalFunctionElements getAExternalFunctionAccess() {
		return pAExternalFunction;
	}
	
	public ParserRule getAExternalFunctionRule() {
		return getAExternalFunctionAccess().getRule();
	}
	
	//AAffineSystem:
	//	'affine' name=SystemName parameters=AParamDomain ('inputs' inputDeclarations+=AVariableDeclaration*)? ('outputs'
	//	outputDeclarations+=AVariableDeclaration*)? ('locals' localvarDeclarations+=AVariableDeclaration*)? ('fuzzy'
	//	fuzzyVariables+=AFuzzyVariableDeclaration*)? ('let'
	//	useEquations+=AUseEquation*
	//	equations+=AEquation*)?
	//	'.';
	public AAffineSystemElements getAAffineSystemAccess() {
		return pAAffineSystem;
	}
	
	public ParserRule getAAffineSystemRule() {
		return getAAffineSystemAccess().getRule();
	}
	
	//AVariableDeclaration:
	//	varList+=AVariableList domain=ADomainExpression? ';';
	public AVariableDeclarationElements getAVariableDeclarationAccess() {
		return pAVariableDeclaration;
	}
	
	public ParserRule getAVariableDeclarationRule() {
		return getAVariableDeclarationAccess().getRule();
	}
	
	//AVariableList:
	//	vars+=AVariable (',' vars+=AVariable)*;
	public AVariableListElements getAVariableListAccess() {
		return pAVariableList;
	}
	
	public ParserRule getAVariableListRule() {
		return getAVariableListAccess().getRule();
	}
	
	//AVariable:
	//	name=ID;
	public AVariableElements getAVariableAccess() {
		return pAVariable;
	}
	
	public ParserRule getAVariableRule() {
		return getAVariableAccess().getRule();
	}
	
	//AFuzzyVariableDeclaration:
	//	varList+=AVariableList relation=ARelation ';';
	public AFuzzyVariableDeclarationElements getAFuzzyVariableDeclarationAccess() {
		return pAFuzzyVariableDeclaration;
	}
	
	public ParserRule getAFuzzyVariableDeclarationRule() {
		return getAFuzzyVariableDeclarationAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//SystemName:
	//	ID // ('-' ID)*
	//;
	public SystemNameElements getSystemNameAccess() {
		return pSystemName;
	}
	
	public ParserRule getSystemNameRule() {
		return getSystemNameAccess().getRule();
	}
	
	//IndexName:
	//	ID '\''*;
	public IndexNameElements getIndexNameAccess() {
		return pIndexName;
	}
	
	public ParserRule getIndexNameRule() {
		return getIndexNameAccess().getRule();
	}
	
	//AIndexDimension:
	//	name=IndexName;
	public AIndexDimensionElements getAIndexDimensionAccess() {
		return pAIndexDimension;
	}
	
	public ParserRule getAIndexDimensionRule() {
		return getAIndexDimensionAccess().getRule();
	}
	
	//AIndexList:
	//	{AIndexList} (ids+=AIndexDimension (',' ids+=AIndexDimension)*)?;
	public AIndexListElements getAIndexListAccess() {
		return pAIndexList;
	}
	
	public ParserRule getAIndexListRule() {
		return getAIndexListAccess().getRule();
	}
	
	////
	////////// Domains ////////
	//ADomainExpression:
	//	ADomainProduct | ADomainTerminal;
	public ADomainExpressionElements getADomainExpressionAccess() {
		return pADomainExpression;
	}
	
	public ParserRule getADomainExpressionRule() {
		return getADomainExpressionAccess().getRule();
	}
	
	//ADomainTerminal:
	//	AISLDomain | AVariableDomain;
	public ADomainTerminalElements getADomainTerminalAccess() {
		return pADomainTerminal;
	}
	
	public ParserRule getADomainTerminalRule() {
		return getADomainTerminalAccess().getRule();
	}
	
	//AISLDomain:
	//	'{' ('[' dims=AIndexList ']')? ':' constraintString=ISLString '}';
	public AISLDomainElements getAISLDomainAccess() {
		return pAISLDomain;
	}
	
	public ParserRule getAISLDomainRule() {
		return getAISLDomainAccess().getRule();
	}
	
	//AVariableDomain:
	//	'D' '(' var=[AVariable] ')';
	public AVariableDomainElements getAVariableDomainAccess() {
		return pAVariableDomain;
	}
	
	public ParserRule getAVariableDomainRule() {
		return getAVariableDomainAccess().getRule();
	}
	
	//ADomainProduct:
	//	extension=ADomainTerminal 'times' base=ADomainExpression;
	public ADomainProductElements getADomainProductAccess() {
		return pADomainProduct;
	}
	
	public ParserRule getADomainProductRule() {
		return getADomainProductAccess().getRule();
	}
	
	////Domains are unions of single polyhedron
	//ADomain:
	//	'{' ('[' dims=AIndexList ']')? ':' constraintString=ISLString '}';
	public ADomainElements getADomainAccess() {
		return pADomain;
	}
	
	public ParserRule getADomainRule() {
		return getADomainAccess().getRule();
	}
	
	//AParamDomain:
	//	'[' dims=AIndexList ']' '->' '{' ':' constraintString=ISLString '}';
	public AParamDomainElements getAParamDomainAccess() {
		return pAParamDomain;
	}
	
	public ParserRule getAParamDomainRule() {
		return getAParamDomainAccess().getRule();
	}
	
	//ARelation:
	//	'{' '[' inDims=AIndexList ']' '->' '[' outDims=AIndexList ']' constraintStr=ISLString '}';
	public ARelationElements getARelationAccess() {
		return pARelation;
	}
	
	public ParserRule getARelationRule() {
		return getARelationAccess().getRule();
	}
	
	//ISLString:
	//	(IndexName | INT | OP_PLUS | OP_MINUS | OP_MUL | OP_DIV | OP_AND | OP_OR | '[' | ']' | '(' | ')' | ',' | ':' |
	//	INTERSECTION | UNION | WS | RELATIONAL_OP)*;
	public ISLStringElements getISLStringAccess() {
		return pISLString;
	}
	
	public ParserRule getISLStringRule() {
		return getISLStringAccess().getRule();
	}
	
	/////////// Equations //////
	//AEquation:
	//	var=[AVariable] ('[' indexes=AIndexList ']')? OP_EQ expr=AAlphaExpression ';';
	public AEquationElements getAEquationAccess() {
		return pAEquation;
	}
	
	public ParserRule getAEquationRule() {
		return getAEquationAccess().getRule();
	}
	
	//AUseEquation:
	//	'over' instantiationDomain=ADomain ('with' '[' subsystemDims=AIndexList ']')? ':' '(' (outputExprs+=AAlphaExpression
	//	(',' outputExprs+=AAlphaExpression)*)? ')'
	//	OP_EQ
	//	system=[AAffineSystem] '[' callParams=AIndexList ']'
	//	'(' (inputExprs+=AAlphaExpression (',' inputExprs+=AAlphaExpression)*)? ')'
	//	';';
	public AUseEquationElements getAUseEquationAccess() {
		return pAUseEquation;
	}
	
	public ParserRule getAUseEquationRule() {
		return getAUseEquationAccess().getRule();
	}
	
	////////// Expressions //////
	//AAlphaExpression:
	//	AIfExpression | ARestrictExpression | AOrExpression;
	public AAlphaExpressionElements getAAlphaExpressionAccess() {
		return pAAlphaExpression;
	}
	
	public ParserRule getAAlphaExpressionRule() {
		return getAAlphaExpressionAccess().getRule();
	}
	
	//AAlphabetsTerminalExpression AAlphaExpression:
	//	AParanthesizedAlphabetsExpression | ACaseExpression | AReduceExpression | AArgReduceExpression | AMultiArgExpression |
	//	AConstantExpression | AVariableExpression | AIndexExpression | ADependenceExpression | ADependenceInArrayNotation;
	public AAlphabetsTerminalExpressionElements getAAlphabetsTerminalExpressionAccess() {
		return pAAlphabetsTerminalExpression;
	}
	
	public ParserRule getAAlphabetsTerminalExpressionRule() {
		return getAAlphabetsTerminalExpressionAccess().getRule();
	}
	
	//AParanthesizedAlphabetsExpression AAlphaExpression:
	//	"(" AAlphaExpression ")";
	public AParanthesizedAlphabetsExpressionElements getAParanthesizedAlphabetsExpressionAccess() {
		return pAParanthesizedAlphabetsExpression;
	}
	
	public ParserRule getAParanthesizedAlphabetsExpressionRule() {
		return getAParanthesizedAlphabetsExpressionAccess().getRule();
	}
	
	//AOrExpression AAlphaExpression:
	//	AAndExpression ({AOrExpression.left=current} operator=(OP_OR | OP_XOR) right=AAndExpression)*;
	public AOrExpressionElements getAOrExpressionAccess() {
		return pAOrExpression;
	}
	
	public ParserRule getAOrExpressionRule() {
		return getAOrExpressionAccess().getRule();
	}
	
	//AAndExpression AAlphaExpression:
	//	ARelationalExpression ({AAndExpression.left=current} operator=(OP_AND | OP_NAND) right=ARelationalExpression)*;
	public AAndExpressionElements getAAndExpressionAccess() {
		return pAAndExpression;
	}
	
	public ParserRule getAAndExpressionRule() {
		return getAAndExpressionAccess().getRule();
	}
	
	//ARelationalExpression AAlphaExpression:
	//	AAdditiveExpression ({ARelationalExpression.left=current} operator=RELATIONAL_OP right=AAdditiveExpression)*;
	public ARelationalExpressionElements getARelationalExpressionAccess() {
		return pARelationalExpression;
	}
	
	public ParserRule getARelationalExpressionRule() {
		return getARelationalExpressionAccess().getRule();
	}
	
	//AAdditiveExpression AAlphaExpression:
	//	AMultiplicativeExpression ({AAdditiveExpression.left=current} op=(OP_PLUS | OP_MINUS)
	//	right=AMultiplicativeExpression)*;
	public AAdditiveExpressionElements getAAdditiveExpressionAccess() {
		return pAAdditiveExpression;
	}
	
	public ParserRule getAAdditiveExpressionRule() {
		return getAAdditiveExpressionAccess().getRule();
	}
	
	//AMultiplicativeExpression AAlphaExpression:
	//	AMinMaxExpression ({AMultiplicativeExpression.left=current} op=(OP_MUL | OP_DIV) right=AMinMaxExpression)*;
	public AMultiplicativeExpressionElements getAMultiplicativeExpressionAccess() {
		return pAMultiplicativeExpression;
	}
	
	public ParserRule getAMultiplicativeExpressionRule() {
		return getAMultiplicativeExpressionAccess().getRule();
	}
	
	//AMinMaxExpression AAlphaExpression:
	//	AUnaryOrTerminalExpression ({AMinMaxExpression.left=current} op=(OP_MIN | OP_MAX) right=AUnaryOrTerminalExpression)*;
	public AMinMaxExpressionElements getAMinMaxExpressionAccess() {
		return pAMinMaxExpression;
	}
	
	public ParserRule getAMinMaxExpressionRule() {
		return getAMinMaxExpressionAccess().getRule();
	}
	
	//AUnaryOrTerminalExpression AAlphaExpression:
	//	AUnaryExpression | AAlphabetsTerminalExpression;
	public AUnaryOrTerminalExpressionElements getAUnaryOrTerminalExpressionAccess() {
		return pAUnaryOrTerminalExpression;
	}
	
	public ParserRule getAUnaryOrTerminalExpressionRule() {
		return getAUnaryOrTerminalExpressionAccess().getRule();
	}
	
	//AUnaryExpression AAlphaExpression:
	//	ANotExpression | ANegateExpression;
	public AUnaryExpressionElements getAUnaryExpressionAccess() {
		return pAUnaryExpression;
	}
	
	public ParserRule getAUnaryExpressionRule() {
		return getAUnaryExpressionAccess().getRule();
	}
	
	//ANotExpression:
	//	op='not' expr=AAlphabetsTerminalExpression;
	public ANotExpressionElements getANotExpressionAccess() {
		return pANotExpression;
	}
	
	public ParserRule getANotExpressionRule() {
		return getANotExpressionAccess().getRule();
	}
	
	//ANegateExpression:
	//	op=OP_MINUS expr=AAlphabetsTerminalExpression;
	public ANegateExpressionElements getANegateExpressionAccess() {
		return pANegateExpression;
	}
	
	public ParserRule getANegateExpressionRule() {
		return getANegateExpressionAccess().getRule();
	}
	
	////////// Expressions //////	
	//ACaseExpression:
	//	'case' name=ID? '{' (exprs+=AAlphaExpression ';')+
	//	'}';
	public ACaseExpressionElements getACaseExpressionAccess() {
		return pACaseExpression;
	}
	
	public ParserRule getACaseExpressionRule() {
		return getACaseExpressionAccess().getRule();
	}
	
	//ADependenceExpression:
	//	func=AFunction '@' expr=AAlphabetsTerminalExpression;
	public ADependenceExpressionElements getADependenceExpressionAccess() {
		return pADependenceExpression;
	}
	
	public ParserRule getADependenceExpressionRule() {
		return getADependenceExpressionAccess().getRule();
	}
	
	//////Array notation for AShow type syntax
	//ADependenceInArrayNotation:
	//	var=[AVariable] '[' dep=AIndexAffineExpressionList ']';
	public ADependenceInArrayNotationElements getADependenceInArrayNotationAccess() {
		return pADependenceInArrayNotation;
	}
	
	public ParserRule getADependenceInArrayNotationRule() {
		return getADependenceInArrayNotationAccess().getRule();
	}
	
	//AIfExpression:
	//	'if' cond=AAlphaExpression 'then' then=AAlphaExpression 'else' else=AAlphaExpression;
	public AIfExpressionElements getAIfExpressionAccess() {
		return pAIfExpression;
	}
	
	public ParserRule getAIfExpressionRule() {
		return getAIfExpressionAccess().getRule();
	}
	
	//AIndexExpression:
	//	'[' func=IndexAffineExpressionTerminal ']' | 'val(' indexes=AIndexList '->' func=IndexAffineExpressionTerminal ')';
	public AIndexExpressionElements getAIndexExpressionAccess() {
		return pAIndexExpression;
	}
	
	public ParserRule getAIndexExpressionRule() {
		return getAIndexExpressionAccess().getRule();
	}
	
	//AReduceExpression:
	//	'reduce' '(' op=AReductionOperator ',' projection=(AFunction | AFunctionInArrayNotation) ',' expr=AAlphaExpression
	//	')';
	public AReduceExpressionElements getAReduceExpressionAccess() {
		return pAReduceExpression;
	}
	
	public ParserRule getAReduceExpressionRule() {
		return getAReduceExpressionAccess().getRule();
	}
	
	//AArgReduceExpression:
	//	'argreduce' '(' op=AReductionOperator ',' projection=(AFunction | AFunctionInArrayNotation) ',' expr=AAlphaExpression
	//	')';
	public AArgReduceExpressionElements getAArgReduceExpressionAccess() {
		return pAArgReduceExpression;
	}
	
	public ParserRule getAArgReduceExpressionRule() {
		return getAArgReduceExpressionAccess().getRule();
	}
	
	//ARestrictExpression:
	//	domain=ADomain ':' expr=AAlphaExpression;
	public ARestrictExpressionElements getARestrictExpressionAccess() {
		return pARestrictExpression;
	}
	
	public ParserRule getARestrictExpressionRule() {
		return getARestrictExpressionAccess().getRule();
	}
	
	//AVariableExpression:
	//	var=[AVariable];
	public AVariableExpressionElements getAVariableExpressionAccess() {
		return pAVariableExpression;
	}
	
	public ParserRule getAVariableExpressionRule() {
		return getAVariableExpressionAccess().getRule();
	}
	
	//AConstantExpression:
	//	ABooleanExpression | ARealExpression | AIntegerExpression;
	public AConstantExpressionElements getAConstantExpressionAccess() {
		return pAConstantExpression;
	}
	
	public ParserRule getAConstantExpressionRule() {
		return getAConstantExpressionAccess().getRule();
	}
	
	//ABooleanExpression:
	//	value=BOOLEAN;
	public ABooleanExpressionElements getABooleanExpressionAccess() {
		return pABooleanExpression;
	}
	
	public ParserRule getABooleanExpressionRule() {
		return getABooleanExpressionAccess().getRule();
	}
	
	//AIntegerExpression:
	//	value=INT;
	public AIntegerExpressionElements getAIntegerExpressionAccess() {
		return pAIntegerExpression;
	}
	
	public ParserRule getAIntegerExpressionRule() {
		return getAIntegerExpressionAccess().getRule();
	}
	
	//ARealExpression:
	//	value=REAL;
	public ARealExpressionElements getARealExpressionAccess() {
		return pARealExpression;
	}
	
	public ParserRule getARealExpressionRule() {
		return getARealExpressionAccess().getRule();
	}
	
	//AMultiArgExpression:
	//	AMultiArgArithmeticExpression | AMultiArgLogicalExpression | AExternalFunctionCall;
	public AMultiArgExpressionElements getAMultiArgExpressionAccess() {
		return pAMultiArgExpression;
	}
	
	public ParserRule getAMultiArgExpressionRule() {
		return getAMultiArgExpressionAccess().getRule();
	}
	
	//AMultiArgArithmeticExpression:
	//	op=ARITHMETIC_REDUCTION_OP '(' exprs+=AAlphaExpression (',' exprs+=AAlphaExpression)+ ')';
	public AMultiArgArithmeticExpressionElements getAMultiArgArithmeticExpressionAccess() {
		return pAMultiArgArithmeticExpression;
	}
	
	public ParserRule getAMultiArgArithmeticExpressionRule() {
		return getAMultiArgArithmeticExpressionAccess().getRule();
	}
	
	//AMultiArgLogicalExpression:
	//	op=LOGICAL_REDUCTION_OP '(' exprs+=AAlphaExpression (',' exprs+=AAlphaExpression)+ ')';
	public AMultiArgLogicalExpressionElements getAMultiArgLogicalExpressionAccess() {
		return pAMultiArgLogicalExpression;
	}
	
	public ParserRule getAMultiArgLogicalExpressionRule() {
		return getAMultiArgLogicalExpressionAccess().getRule();
	}
	
	//AExternalFunctionCall:
	//	func=[AExternalFunction] '(' (exprs+=AAlphaExpression (',' exprs+=AAlphaExpression)*)? ')';
	public AExternalFunctionCallElements getAExternalFunctionCallAccess() {
		return pAExternalFunctionCall;
	}
	
	public ParserRule getAExternalFunctionCallRule() {
		return getAExternalFunctionCallAccess().getRule();
	}
	
	////////////////////////////////////////////////////////////
	////////// Dependence functions and IndexExpressions ///////
	////////////////////////////////////////////////////////////
	//IndexAffineExpression:
	//	IndexAffineExpressionTerminal ((OP_PLUS | OP_MINUS) IndexAffineExpressionTerminal)*;
	public IndexAffineExpressionElements getIndexAffineExpressionAccess() {
		return pIndexAffineExpression;
	}
	
	public ParserRule getIndexAffineExpressionRule() {
		return getIndexAffineExpressionAccess().getRule();
	}
	
	//IndexAffineExpressionTerminal:
	//	OP_MINUS? (INT | INT? IndexName);
	public IndexAffineExpressionTerminalElements getIndexAffineExpressionTerminalAccess() {
		return pIndexAffineExpressionTerminal;
	}
	
	public ParserRule getIndexAffineExpressionTerminalRule() {
		return getIndexAffineExpressionTerminalAccess().getRule();
	}
	
	//AIndexAffineExpressionList:
	//	{AIndexAffineExpressionList} (exprs+=IndexAffineExpression (',' exprs+=IndexAffineExpression)*)?;
	public AIndexAffineExpressionListElements getAIndexAffineExpressionListAccess() {
		return pAIndexAffineExpressionList;
	}
	
	public ParserRule getAIndexAffineExpressionListRule() {
		return getAIndexAffineExpressionListAccess().getRule();
	}
	
	//AFunction:
	//	'(' indexes=AIndexList '->' func=AIndexAffineExpressionList ')';
	public AFunctionElements getAFunctionAccess() {
		return pAFunction;
	}
	
	public ParserRule getAFunctionRule() {
		return getAFunctionAccess().getRule();
	}
	
	//////Array notation for AShow type syntax
	//AFunctionInArrayNotation:
	//	'[' newIds=AIndexAffineExpressionList ']';
	public AFunctionInArrayNotationElements getAFunctionInArrayNotationAccess() {
		return pAFunctionInArrayNotation;
	}
	
	public ParserRule getAFunctionInArrayNotationRule() {
		return getAFunctionInArrayNotationAccess().getRule();
	}
	
	//AReductionOperator:
	//	op=[AExternalFunction] | builtin=REDUCTION_OP;
	public AReductionOperatorElements getAReductionOperatorAccess() {
		return pAReductionOperator;
	}
	
	public ParserRule getAReductionOperatorRule() {
		return getAReductionOperatorAccess().getRule();
	}
	
	/////// Tokens /////
	////AType: unsigned=('unsigned')? type=(ATypeInteger|ATypeFloat|ATypeBoolean|ATypeChar);
	////
	////ATypeInteger:
	////	'int' | 'longlong' | 'long' | 'short';
	////ATypeBoolean:
	////	'bool';
	////ATypeFloat:
	////	'float' | 'double';
	////ATypeChar:
	////	'char';	
	//ARITHMETIC_OP:
	//	ARITHMETIC_REDUCTION_OP | ARITHMETIC_NONREDUCTION_OP;
	public ARITHMETIC_OPElements getARITHMETIC_OPAccess() {
		return pARITHMETIC_OP;
	}
	
	public ParserRule getARITHMETIC_OPRule() {
		return getARITHMETIC_OPAccess().getRule();
	}
	
	//LOGICAL_OP:
	//	LOGICAL_REDUCTION_OP | LOGICAL_NONREDUCTION_OP;
	public LOGICAL_OPElements getLOGICAL_OPAccess() {
		return pLOGICAL_OP;
	}
	
	public ParserRule getLOGICAL_OPRule() {
		return getLOGICAL_OPAccess().getRule();
	}
	
	//REDUCTION_OP:
	//	ARITHMETIC_REDUCTION_OP | LOGICAL_REDUCTION_OP;
	public REDUCTION_OPElements getREDUCTION_OPAccess() {
		return pREDUCTION_OP;
	}
	
	public ParserRule getREDUCTION_OPRule() {
		return getREDUCTION_OPAccess().getRule();
	}
	
	//ARITHMETIC_REDUCTION_OP:
	//	OP_MAX | OP_MIN | OP_MUL | OP_PLUS;
	public ARITHMETIC_REDUCTION_OPElements getARITHMETIC_REDUCTION_OPAccess() {
		return pARITHMETIC_REDUCTION_OP;
	}
	
	public ParserRule getARITHMETIC_REDUCTION_OPRule() {
		return getARITHMETIC_REDUCTION_OPAccess().getRule();
	}
	
	//LOGICAL_REDUCTION_OP:
	//	OP_AND | OP_OR | OP_XOR;
	public LOGICAL_REDUCTION_OPElements getLOGICAL_REDUCTION_OPAccess() {
		return pLOGICAL_REDUCTION_OP;
	}
	
	public ParserRule getLOGICAL_REDUCTION_OPRule() {
		return getLOGICAL_REDUCTION_OPAccess().getRule();
	}
	
	//ARITHMETIC_NONREDUCTION_OP:
	//	OP_MINUS | OP_DIV | OP_MOD;
	public ARITHMETIC_NONREDUCTION_OPElements getARITHMETIC_NONREDUCTION_OPAccess() {
		return pARITHMETIC_NONREDUCTION_OP;
	}
	
	public ParserRule getARITHMETIC_NONREDUCTION_OPRule() {
		return getARITHMETIC_NONREDUCTION_OPAccess().getRule();
	}
	
	//LOGICAL_NONREDUCTION_OP:
	//	OP_NAND;
	public LOGICAL_NONREDUCTION_OPElements getLOGICAL_NONREDUCTION_OPAccess() {
		return pLOGICAL_NONREDUCTION_OP;
	}
	
	public ParserRule getLOGICAL_NONREDUCTION_OPRule() {
		return getLOGICAL_NONREDUCTION_OPAccess().getRule();
	}
	
	//RELATIONAL_OP:
	//	OP_EQ | OP_GE | OP_GT | OP_LE | OP_LT | OP_NE;
	public RELATIONAL_OPElements getRELATIONAL_OPAccess() {
		return pRELATIONAL_OP;
	}
	
	public ParserRule getRELATIONAL_OPRule() {
		return getRELATIONAL_OPAccess().getRule();
	}
	
	//terminal OP_AND:
	//	'and';
	public TerminalRule getOP_ANDRule() {
		return tOP_AND;
	}
	
	//terminal OP_MAX:
	//	'max';
	public TerminalRule getOP_MAXRule() {
		return tOP_MAX;
	}
	
	//terminal OP_MIN:
	//	'min';
	public TerminalRule getOP_MINRule() {
		return tOP_MIN;
	}
	
	//terminal OP_MUL:
	//	'*';
	public TerminalRule getOP_MULRule() {
		return tOP_MUL;
	}
	
	//terminal OP_OR:
	//	'or';
	public TerminalRule getOP_ORRule() {
		return tOP_OR;
	}
	
	//terminal OP_XOR:
	//	'xor';
	public TerminalRule getOP_XORRule() {
		return tOP_XOR;
	}
	
	//terminal OP_PLUS:
	//	'+';
	public TerminalRule getOP_PLUSRule() {
		return tOP_PLUS;
	}
	
	//terminal OP_MINUS:
	//	'-';
	public TerminalRule getOP_MINUSRule() {
		return tOP_MINUS;
	}
	
	//terminal OP_DIV:
	//	'/';
	public TerminalRule getOP_DIVRule() {
		return tOP_DIV;
	}
	
	//terminal OP_MOD:
	//	'%';
	public TerminalRule getOP_MODRule() {
		return tOP_MOD;
	}
	
	//terminal OP_NAND:
	//	'nand';
	public TerminalRule getOP_NANDRule() {
		return tOP_NAND;
	}
	
	//terminal OP_EQ:
	//	'=';
	public TerminalRule getOP_EQRule() {
		return tOP_EQ;
	}
	
	//terminal OP_GE:
	//	'>=';
	public TerminalRule getOP_GERule() {
		return tOP_GE;
	}
	
	//terminal OP_GT:
	//	'>';
	public TerminalRule getOP_GTRule() {
		return tOP_GT;
	}
	
	//terminal OP_LE:
	//	'<=';
	public TerminalRule getOP_LERule() {
		return tOP_LE;
	}
	
	//terminal OP_LT:
	//	'<';
	public TerminalRule getOP_LTRule() {
		return tOP_LT;
	}
	
	//terminal OP_NE:
	//	'!=';
	public TerminalRule getOP_NERule() {
		return tOP_NE;
	}
	
	//terminal BOOLEAN:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal REAL:
	//	'0'..'9'+ '.' '0'..'9'+;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//terminal INTERSECTION:
	//	'&&';
	public TerminalRule getINTERSECTIONRule() {
		return tINTERSECTION;
	}
	
	//terminal UNION:
	//	'||';
	public TerminalRule getUNIONRule() {
		return tUNION;
	}
	
	//@ Override terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
