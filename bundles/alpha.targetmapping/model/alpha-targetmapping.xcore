@GenModel(
	operationReflection="false",
	loadInitialization="false",
	literalsInterface="true")
package alpha.targetmapping

import alpha.model.AlphaScheduleTarget
import alpha.model.AlphaSystem
import alpha.model.JNIDomain
import alpha.model.JNIDomainInArrayNotation
import alpha.model.JNIFunctionInArrayNotation
import alpha.model.JNIRelation
import alpha.model.SystemBody
import alpha.model.POLY_OBJECT_TYPE
import fr.irisa.cairn.jnimap.isl.ISLASTLoopType
import fr.irisa.cairn.jnimap.isl.ISL_FORMAT
import fr.irisa.cairn.jnimap.isl.ISLMultiAff
import fr.irisa.cairn.jnimap.isl.ISLPWQPolynomial
import fr.irisa.cairn.jnimap.isl.ISLSet
import fr.irisa.cairn.jnimap.isl.ISLMap
import fr.irisa.cairn.jnimap.runtime.JNIObject

type JNIObject wraps JNIObject
type JNIISLSet wraps ISLSet
type JNIISLMap wraps ISLMap
type JNIISLMultiAff wraps ISLMultiAff
type JNIISLPWQPolynomial wraps ISLPWQPolynomial
type ISL_FORMAT wraps ISL_FORMAT
type ISLASTLoopType wraps ISLASTLoopType


interface TargetMappingNode {}

/**
 * Interface for TargetMappingVisitor
 * 
 */
interface TargetMappingVisitable {
	op void accept(TargetMappingVisitor visitor)
}

/**
 * See visitor in the Alpha model for how visitors work in Alpha related projects.
 * The one for TargetMapping is (currently) simpler, since it only uses one visitor
 * for the model. This may change when memory mappings are added.
 * 
 */
class TargetMappingVisitor {
	
	/* visit */
	op void visitTargetMapping(TargetMapping tm)
	op void visitTargetMappingForSystemBody(TargetMappingForSystemBody tm)
	
	op void visitScheduleTreeExpression(ScheduleTreeExpression ste)
	
	op void visitContextExpression(ContextExpression ce)
	op void visitSetExpression(SetExpression se)
	op void visitSequenceExpression(SequenceExpression se)
	op void visitFilterExpression(FilterExpression fe)
	op void visitGuardExpression(GuardExpression ge)
	op void visitMarkExpression(MarkExpression me)
	op void visitBandExpression(BandExpression be)
	op void visitExtensionExpression(ExtensionExpression ee)
	
	
	/* in */
	op void inTargetMapping(TargetMapping tm)
	op void inTargetMappingForSystemBody(TargetMappingForSystemBody tm)
	
	op void inScheduleTreeExpression(ScheduleTreeExpression ste)
	
	op void inContextExpression(ContextExpression ce)
	op void inSetExpression(SetExpression se)
	op void inSequenceExpression(SequenceExpression se)
	op void inFilterExpression(FilterExpression fe)
	op void inGuardExpression(GuardExpression ge)
	op void inMarkExpression(MarkExpression me)
	op void inBandExpression(BandExpression be)
	op void inExtensionExpression(ExtensionExpression ee)
	
	
	/* out */
	op void outTargetMapping(TargetMapping tm)
	op void outTargetMappingForSystemBody(TargetMappingForSystemBody tm)
	
	op void outScheduleTreeExpression(ScheduleTreeExpression ste)
	
	op void outContextExpression(ContextExpression ce)
	op void outSetExpression(SetExpression se)
	op void outSequenceExpression(SequenceExpression se)
	op void outFilterExpression(FilterExpression fe)
	op void outGuardExpression(GuardExpression ge)
	op void outMarkExpression(MarkExpression me)
	op void outBandExpression(BandExpression be)
	op void outExtensionExpression(ExtensionExpression ee)
}

interface ScopingEntity {}

class TargetMapping extends TargetMappingNode, TargetMappingVisitable, ScopingEntity {
	refers AlphaSystem targetSystem
	contains TargetMappingForSystemBody[] systemBodyTMs
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitTargetMapping(this)
	}
}

class TargetMappingForSystemBody extends TargetMappingNode, TargetMappingVisitable, ScopingEntity {
	refers SystemBody targetBody
	contains ScheduleTreeExpression scheduleTreeRoot
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitTargetMappingForSystemBody(this)
	}
}

abstract class ScheduleTreeExpression extends TargetMappingNode, TargetMappingVisitable {

}

class ContextExpression extends ScheduleTreeExpression {
	contains JNIDomain contextDomainExpr
	
	contains ScheduleTreeExpression child
	
	op JNIISLSet getContextDomain() {
		if (contextDomainExpr.^type != POLY_OBJECT_TYPE.SET ) null
		else contextDomainExpr.ISLObject as ISLSet
	}
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitContextExpression(this)
	}
}

class SetExpression extends ScheduleTreeExpression {
	contains ScheduleTreeExpression[] children
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitSetExpression(this)
	}
}

class SequenceExpression extends ScheduleTreeExpression {
	contains ScheduleTreeExpression[] children
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitSequenceExpression(this)
	}
}

class FilterExpression extends ScheduleTreeExpression, ScopingEntity {
	contains ScheduleTargetRestrictDomain[] filterDomains
	contains ScheduleTreeExpression child
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitFilterExpression(this)
	}
}

class ScheduleTargetRestrictDomain {
	refers AlphaScheduleTarget scheduleTarget
	String[] indexNames
	
	contains JNIDomainInArrayNotation restrictDomainExpr
	
	op JNIISLSet getRestrictDomain() {
		if (restrictDomainExpr.^type != POLY_OBJECT_TYPE.SET ) null
		else restrictDomainExpr.ISLObject as ISLSet
	}
}

class GuardExpression extends ScheduleTreeExpression {
	contains JNIDomain guardDomainExpr
	contains ScheduleTreeExpression child
	
	op JNIISLSet getGuardDomain() {
		if (guardDomainExpr.^type != POLY_OBJECT_TYPE.SET ) null
		else guardDomainExpr.ISLObject as ISLSet
	}
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitGuardExpression(this)
	}
}

class MarkExpression extends ScheduleTreeExpression {
	String identifier
	contains ScheduleTreeExpression child
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitMarkExpression(this)
	}
}

class BandExpression extends ScheduleTreeExpression {
	contains BandPiece[] bandPieces
	contains ScheduleTreeExpression child
	
	boolean tile
	boolean parallel 

	contains LoopTypeSpecification[] loopTypeSpecifications
	contains IsolateSpecification isolateSpecification
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitBandExpression(this)
	}
}
class BandPiece {
	contains ScheduleTargetRestrictDomain pieceDomain
	contains JNIFunctionInArrayNotation partialScheduleExpr
	
	op JNIISLMultiAff getPartialSchedule() {
		if (partialScheduleExpr.^type != POLY_OBJECT_TYPE.FUNCTION ) null
		else partialScheduleExpr.ISLObject as ISLMultiAff
	}
}
class LoopTypeSpecification {
	int dimension
	ISLASTLoopType loopType
}
class IsolateSpecification {
	contains JNIDomain isolateDomainExpr
	contains LoopTypeSpecification[] loopTypeSpecifications
	
	op JNIISLSet getIsolateDomain() {
		if (isolateDomainExpr.^type != POLY_OBJECT_TYPE.SET ) null
		else isolateDomainExpr.ISLObject as ISLSet
	}
	
}
class BandPieceForReductionBody extends BandPiece {
	String reductionInitialization
}

class ExtensionExpression extends ScheduleTreeExpression, ScopingEntity {
	contains ExtensionTarget[] extensionTargets
	contains ScheduleTreeExpression child 
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitExtensionExpression(this)
	}
}

class ExtensionTarget extends AlphaScheduleTarget {
	refers AlphaScheduleTarget source
	
	String name
	String[] indexNames
	contains JNIRelation extensionMapExpr
	
	op JNIISLMap getExtensionMap() {
		if (extensionMapExpr.^type != POLY_OBJECT_TYPE.MAP ) null
		else extensionMapExpr.ISLObject as ISLMap
	}
}
