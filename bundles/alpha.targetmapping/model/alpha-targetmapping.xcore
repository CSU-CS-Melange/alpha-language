@GenModel(
	operationReflection="false",
	loadInitialization="false",
	literalsInterface="true")
package alpha.targetmapping

import alpha.model.AlphaScheduleTarget
import alpha.model.AlphaSystem
import alpha.model.JNIDomain
import alpha.model.JNIDomainInArrayNotation
import alpha.model.JNIFunction
import alpha.model.JNIRelation
import alpha.model.POLY_OBJECT_TYPE
import alpha.model.SystemBody
import alpha.targetmapping.util.TargetMappingUtil
import org.eclipse.xtext.EcoreUtil2
import fr.irisa.cairn.jnimap.isl.ISLASTLoopType
import fr.irisa.cairn.jnimap.isl.ISLMap
import fr.irisa.cairn.jnimap.isl.ISLMultiAff
import fr.irisa.cairn.jnimap.isl.ISLPWQPolynomial
import fr.irisa.cairn.jnimap.isl.ISLSet
import fr.irisa.cairn.jnimap.isl.ISL_FORMAT
import fr.irisa.cairn.jnimap.isl.ISLDimType
import fr.irisa.cairn.jnimap.runtime.JNIObject

type JNIObject wraps JNIObject
type JNIISLSet wraps ISLSet
type JNIISLMap wraps ISLMap
type JNIISLMultiAff wraps ISLMultiAff
type JNIISLPWQPolynomial wraps ISLPWQPolynomial
type ISL_FORMAT wraps ISL_FORMAT
type ISLASTLoopType wraps ISLASTLoopType


interface TargetMappingNode {}

/**
 * Interface for TargetMappingVisitor
 * 
 */
interface TargetMappingVisitable {
	op void accept(TargetMappingVisitor visitor)
}

/**
 * See visitor in the Alpha model for how visitors work in Alpha related projects.
 * The one for TargetMapping is (currently) simpler, since it only uses one visitor
 * for the model. This may change when memory mappings are added.
 * 
 */
class TargetMappingVisitor {
	
	/* visit */
	op void visitTargetMapping(TargetMapping tm)
	op void visitTargetMappingForSystemBody(TargetMappingForSystemBody tm)
	
	op void visitScheduleTreeExpression(ScheduleTreeExpression ste)
	
	op void visitContextExpression(ContextExpression ce)
	op void visitSetExpression(SetExpression se)
	op void visitSequenceExpression(SequenceExpression se)
	op void visitFilterExpression(FilterExpression fe)
	op void visitGuardExpression(GuardExpression ge)
	op void visitMarkExpression(MarkExpression me)
	op void visitBandExpression(BandExpression be)
	op void visitTileBandExpression(TileBandExpression tbe)
	op void visitExtensionExpression(ExtensionExpression ee)
	
	
	/* in */
	op void inTargetMapping(TargetMapping tm)
	op void inTargetMappingForSystemBody(TargetMappingForSystemBody tm)
	
	op void inScheduleTreeExpression(ScheduleTreeExpression ste)
	
	op void inContextExpression(ContextExpression ce)
	op void inSetExpression(SetExpression se)
	op void inSequenceExpression(SequenceExpression se)
	op void inFilterExpression(FilterExpression fe)
	op void inGuardExpression(GuardExpression ge)
	op void inMarkExpression(MarkExpression me)
	op void inAbstractBandExpression(AbstractBandExpression abe)
	op void inBandExpression(BandExpression be)
	op void inTileBandExpression(TileBandExpression tbe)
	op void inExtensionExpression(ExtensionExpression ee)
	
	
	/* out */
	op void outTargetMapping(TargetMapping tm)
	op void outTargetMappingForSystemBody(TargetMappingForSystemBody tm)
	
	op void outScheduleTreeExpression(ScheduleTreeExpression ste)
	
	op void outContextExpression(ContextExpression ce)
	op void outSetExpression(SetExpression se)
	op void outSequenceExpression(SequenceExpression se)
	op void outFilterExpression(FilterExpression fe)
	op void outGuardExpression(GuardExpression ge)
	op void outMarkExpression(MarkExpression me)
	op void outAbstractBandExpression(AbstractBandExpression abe)
	op void outBandExpression(BandExpression be)
	op void outTileBandExpression(TileBandExpression tbe)
	op void outExtensionExpression(ExtensionExpression ee)
}

/**
 * ScopingEntity defines scopes for schedule targets.
 * Initially, the scope is defined by the target SystemBody,
 * which includes all the equations defined.
 * 
 * FilterExpression and ExtensionExpression are
 * ScopingEntities within TargetMapping that modifies the scope.
 * 
 */
interface ScopingEntity {}

/**
 * Top-Level for TargetMapping
 */
class TargetMapping extends TargetMappingNode, TargetMappingVisitable, ScopingEntity {
	refers AlphaSystem targetSystem
	contains TargetMappingForSystemBody[] systemBodyTMs opposite targetMapping
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitTargetMapping(this)
	}
}

class TargetMappingForSystemBody extends TargetMappingNode, TargetMappingVisitable, ScopingEntity {
	refers SystemBody targetBody
	refers TargetMapping targetMapping opposite systemBodyTMs
	
	contains ScheduleTreeExpression scheduleTreeRoot
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitTargetMappingForSystemBody(this)
	}
}

abstract class ScheduleTreeExpression extends TargetMappingNode, TargetMappingVisitable {

}

class ContextExpression extends ScheduleTreeExpression {
	contains JNIDomainInArrayNotation contextDomainExpr
	
	contains ScheduleTreeExpression child
	
	op JNIISLSet getContextDomain() {
		if (contextDomainExpr.^type != POLY_OBJECT_TYPE.SET ) null
		else contextDomainExpr.ISLObject as ISLSet
	}
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitContextExpression(this)
	}
}

class SetExpression extends ScheduleTreeExpression {
	contains ScheduleTreeExpression[] children
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitSetExpression(this)
	}
}

class SequenceExpression extends ScheduleTreeExpression {
	contains ScheduleTreeExpression[] children
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitSequenceExpression(this)
	}
}

class FilterExpression extends ScheduleTreeExpression, ScopingEntity {
	contains ScheduleTargetRestrictDomain[] filterDomains
	contains ScheduleTreeExpression child
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitFilterExpression(this)
	}
}

class ScheduleTargetRestrictDomain extends TargetMappingNode {
	refers AlphaScheduleTarget scheduleTarget
	String[] indexNames
	
	contains JNIDomain restrictDomainExpr
	
	op JNIISLSet getRestrictDomain() {
		if (restrictDomainExpr.^type != POLY_OBJECT_TYPE.SET ) null
		else restrictDomainExpr.ISLObject as ISLSet
	}
}

class GuardExpression extends ScheduleTreeExpression {
	contains JNIDomain guardDomainExpr
	contains ScheduleTreeExpression child
	
	op JNIISLSet getGuardDomain() {
		if (guardDomainExpr.^type != POLY_OBJECT_TYPE.SET ) null
		else guardDomainExpr.ISLObject as ISLSet
	}
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitGuardExpression(this)
	}
}

class MarkExpression extends ScheduleTreeExpression {
	String identifier
	contains ScheduleTreeExpression child
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitMarkExpression(this)
	}
}
/**
 * BandExpression defines a band in ISL ScheduleTree,
 * which is a multi-dimensional ordering of domains that
 * reach the band node. Each BandPiece specifies an affine
 * function for a schedule target, where the RHS is the 
 * schedule time stamp. All BandPieces must have the same number
 * of dimensions in its RHS. The space on the RHS of these
 * schedule functions is called the schedule space, and its 
 * dimensions may be named with scheduleDimensionNames. These 
 * names are used for interpreting array notation in the
 * sub-tree within its scope.
 * 
 * There are two different BandExpressions in TargetMapping:
 *   - BandExpression: the standard one, which directly corresponds to band_node in ISL
 *   - TileBandExpression: a variant to specify (nested) tiling
 */
abstract class AbstractBandExpression extends ScheduleTreeExpression {
	contains BandPiece[] bandPieces
	String[] scheduleDimensionNames
	
	op int bandSize() {
		val bandSizes = bandPieces.map[bp|bp.partialSchedule].map[ps|ps.nbOutputs].toSet
		
		if (bandSizes.size != 1 || bandSizes.head == -1)
			throw new RuntimeException("This case should not be reached if consistency checks are working properly.")
			
		return bandSizes.head
	}
}

/**
 * LoopTypes and Isolate are used to specify finer-grained control
 * over generated loops. Some of the loop types correspond to those
 * in ISL, which is reflected at code generation. Other loop types
 * only result in annotations in the resulting AST, to be used
 * during post-processing passes.
 */
class BandExpression extends AbstractBandExpression {
	
	contains LoopTypeSpecification[] loopTypeSpecifications
	contains IsolateSpecification isolateSpecification
	
	contains ScheduleTreeExpression child
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitBandExpression(this)
	}
}
class BandPiece extends TargetMappingNode {
	contains ScheduleTargetRestrictDomain pieceDomain
	contains JNIFunction partialScheduleExpr
	
	op JNIISLMultiAff getPartialSchedule() {
		if (partialScheduleExpr.^type != POLY_OBJECT_TYPE.FUNCTION ) null
		else partialScheduleExpr.ISLObject as ISLMultiAff
	}
}
abstract class LoopTypeSpecification extends TargetMappingNode {
	int dimension
	
	op String getName()
	op String unparseString()
}
class ISLLoopTypeSpecification extends LoopTypeSpecification {
	ISLASTLoopType loopType
	
	op String getName() { loopType.name }
	op String unparseString() { TargetMappingUtil.toString(loopType) }
}
class AlphaLoopTypeSpecification extends LoopTypeSpecification {
	ALPHA_LOOP_TYPE loopType
	
	op String getName() { loopType.literal }
	op String unparseString() { loopType.literal }
}
enum ALPHA_LOOP_TYPE {
	PARALLEL as "parallel"
}


class IsolateSpecification extends TargetMappingNode {
	contains JNIDomain isolateDomainExpr
	contains LoopTypeSpecification[] loopTypeSpecifications
	
	op JNIISLSet getIsolateDomain() {
		if (isolateDomainExpr.^type != POLY_OBJECT_TYPE.SET ) null
		else isolateDomainExpr.ISLObject as ISLSet
	}
	
	/**
	 * Gives a view of the isolate domain expected by ISL.
	 * ISL expects a relation where the input dims correspond to
	 * outer schedule dimensions.
	 */
	op JNIISLMap getIsolateMap() {
		val isolateDom = getIsolateDomain()
		if (isolateDom === null) return null
		
		val abe = EcoreUtil2.getContainerOfType(this, AbstractBandExpression)
		val bandSize = abe.bandSize
		val dims = isolateDom.nbIndices
		val dimsToMove = dims - bandSize
		
		val map = ISLMap.buildFromRange(isolateDom)
		
		map.moveDims(ISLDimType.isl_dim_in, 0, ISLDimType.isl_dim_out, 0, dimsToMove);
	}
	
}

/**
 * TileBandExpression is a more complicated variant of the BandExpression to handle tiling.
 * 
 * TileBandExpression is always the leaf of the ScheduleTree, but has a chain of 
 * TilingSpecifications that are used to expressed d-dimensional loop nests that correspond
 * to either tile or point loops, given a d-dimensional TileBand.
 * 
 * Each TileSpecification specifies the additional transformation on the loop (e.g., for skewing
 * the tiles), tile sizes for tile loops, and loop types for the point loops.  
 * 
 */
class TileBandExpression extends AbstractBandExpression {

	TILING_TYPE tilingType
	contains TilingSpecification tilingSpecification
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitTileBandExpression(this)
	}
}
abstract class TilingSpecification extends TargetMappingNode {
	contains JNIFunction loopScheduleExpr
	
	op JNIISLMultiAff getLoopSchedule() {
		if (loopScheduleExpr.^type != POLY_OBJECT_TYPE.FUNCTION ) null
		else loopScheduleExpr.ISLObject as ISLMultiAff
	}
}
class TileLoopSpecification extends TilingSpecification {
	boolean parallel

	contains TileSizeSpecification[] tileSizeSpecifications
	contains TilingSpecification tilingSpecification
}
class PointLoopSpecification extends TilingSpecification {
	contains LoopTypeSpecification[] loopTypeSpecifications
	contains IsolateSpecification isolateSpecification
}

enum TILING_TYPE {
	FIXED_SIZE as "fixed-size"
	PARAMETRIC as "parametric"
	COMPILE_TIME_CONSTANT as "compile-time-constant"
}

abstract class TileSizeSpecification extends TargetMappingNode {
	op String unparseString()
}
class FixedTileSize extends TileSizeSpecification {
	int tileSize
	
	op String unparseString() { Integer.toString(tileSize) }
}
class ParametricTileSize extends TileSizeSpecification {
	String tileSizeName
	
	op String uparseString() { tileSizeName }
}
class CompileTimeConstantTileSize extends TileSizeSpecification {
	String tileSizeName
	int defaultValue
	
	op String unparseString() { String.format("%s=%d", tileSizeName, defaultValue) }
}

class ExtensionExpression extends ScheduleTreeExpression, ScopingEntity {
	contains ExtensionTarget[] extensionTargets
	contains ScheduleTreeExpression child 
	
	op void accept(TargetMappingVisitor visitor) {
		visitor.visitExtensionExpression(this)
	}
}

class ExtensionTarget extends AlphaScheduleTarget, TargetMappingNode {
	String name
	String[] indexNames
	contains JNIRelation extensionMapExpr
	
	op JNIISLMap getExtensionMap() {
		if (extensionMapExpr.^type != POLY_OBJECT_TYPE.MAP ) null
		else extensionMapExpr.ISLObject as ISLMap
	}
}

/**
 * An additional type of function that is interpreted with identity
 * once the context is known. In Alpha, it is not possible to have
 * such "identity given context" because the Show notation requires
 * all polyhedral objects to be interpreted without any context information.
 * (It also has little use for writing Alpha)
 * 
 * JNIIdentityFunction was introduced in TargetMapping, because there are
 * situations where identity schedule/memory map would be given. In particular,
 * schedule of tile/point loops after tiling is often untouched. In such cases,
 * the grammar allows the schedule to be unspecified, which will leave the 
 * schedule as null. A post-processing hook in the parser automatically creates
 * JNIIdentityFunction so that null objects are avoided to prevent having
 * != null checks everywhere.
 * 
 * 
 */
class JNIIdentityFunction extends JNIFunction {
	op String plainToString() {
		'Id'
	}
}

