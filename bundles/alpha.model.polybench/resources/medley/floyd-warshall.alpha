// Author: Tomofumi Yuki
//Alpha version: Jonathon Y.

//Floyd-Warshall algorithm for computing shortest paths
affine floyd_warshall [N] -> {: N > 0}
	inputs
		//weight of the edge from node i to j
		// infinity if there is no edge
		weight: {[i, j]: 0 <= i, j < N};
	outputs
		//length of the shortest path from node i to j
		shortestPaths: {[i, j]: 0 <= i, j < N};
		
	locals
		paths: {[k, i, j]: 0 <= i, j < N && -1 <= k < N};
	let
		paths[k,i,j] = case {
				{[k, i, j]: k == -1} : weight[i, j];
				{: k >= 0}  : min(paths[k - 1, i, j], paths[k - 1, i, k] + paths[k - 1, k, j]);
		};
		
		shortestPaths[i,j] = paths[N - 1, i, j];
.