affine durbin [N] -> {: N > 0}
inputs
	r: {[i]: 1 <= i <= N };
outputs
	y: {[i, j]: 1<= i <= j + 1 && 0 <= j < N};
locals
	z: {[i, j]: 1 <= i <= j && 1 <= j < N};
	alpha: {[i]: 0 <= i < N};
	beta: {[i]: 0 <= i < N};
let
	//equations
	beta[i] = case {
		{[i]: i == 0}: 1[];
		{[i]: i > 0}: (1[] - (alpha[i - 1] * alpha[i - 1])) * beta[i - 1];
	};
	
	alpha = case {
		{[i]: i == 0}: (i -> 1)@r;
		{[i]: i > 0}: -((i->i+1)@r + reduce(+, (i,p->i), {[i, p]: 1 <= p <= i}: (i, p -> i - p + 1)@r * (i, p -> p, i - 1)@y)) / (i -> i)@beta;
	};
	
	z = {[p,j]: p <= j}: (p, j -> p, j - 1)@y + (p, j -> j)@alpha*(p, j -> j - p + 1, j - 1)@y;
	
	y = case {
		{[i, j]: i == 1 && j == 0}: -((i, j -> 1)@r);
		{[i, j]: i <= j && j > 0}: (i, j -> i, j)@z;
		{[i, j]: i == j + 1 && j > 0}: (i, j -> j)@alpha;
	}; 
.