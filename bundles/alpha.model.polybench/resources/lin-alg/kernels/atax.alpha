// Author: Waruna Ranasinghe
//Alpha version: Jonathon Y.

//(transpose of A).A.x (A_T times A.x)
affine atax [M,N] -> {: M, N > 0}
	inputs
		A: {[i, j]: 0 <= i < M && 0 <= j < N};
		x: {[i]: 0 <= i < N};
	outputs
		y: {[i]: 0 <= i < N};
	locals
		temp: {[i]: 0 <= i < M};
	let
		temp[i] = reduce(+, [j], A[i,j] * x[j]);
		y[k]    = reduce(+, [i], A[i,k] * temp[i]);
.