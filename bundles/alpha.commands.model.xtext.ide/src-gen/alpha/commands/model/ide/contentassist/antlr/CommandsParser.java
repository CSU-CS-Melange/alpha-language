/*
 * generated by Xtext 2.15.0
 */
package alpha.commands.model.ide.contentassist.antlr;

import alpha.commands.model.ide.contentassist.antlr.internal.InternalCommandsParser;
import alpha.commands.model.services.CommandsGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CommandsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CommandsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CommandsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCommandBindingAccess().getAlternatives_4(), "rule__CommandBinding__Alternatives_4");
			builder.put(grammarAccess.getCommandBindingAccess().getAlternatives_5_1(), "rule__CommandBinding__Alternatives_5_1");
			builder.put(grammarAccess.getCommandArgumentSpecializationAccess().getAlternatives(), "rule__CommandArgumentSpecialization__Alternatives");
			builder.put(grammarAccess.getArgumentTypeAccess().getAlternatives(), "rule__ArgumentType__Alternatives");
			builder.put(grammarAccess.getAlphaCommandCategoryAccess().getGroup(), "rule__AlphaCommandCategory__Group__0");
			builder.put(grammarAccess.getAlphaCommandAccess().getGroup(), "rule__AlphaCommand__Group__0");
			builder.put(grammarAccess.getAlphaCommandAccess().getGroup_1(), "rule__AlphaCommand__Group_1__0");
			builder.put(grammarAccess.getCommandBindingAccess().getGroup(), "rule__CommandBinding__Group__0");
			builder.put(grammarAccess.getCommandBindingAccess().getGroup_5(), "rule__CommandBinding__Group_5__0");
			builder.put(grammarAccess.getArgumentBindingAccess().getGroup(), "rule__ArgumentBinding__Group__0");
			builder.put(grammarAccess.getArgumentBindingAccess().getGroup_4(), "rule__ArgumentBinding__Group_4__0");
			builder.put(grammarAccess.getArgumentRenamingAccess().getGroup(), "rule__ArgumentRenaming__Group__0");
			builder.put(grammarAccess.getAlphaCommandSignatureAccess().getGroup(), "rule__AlphaCommandSignature__Group__0");
			builder.put(grammarAccess.getAlphaCommandSignatureAccess().getGroup_2(), "rule__AlphaCommandSignature__Group_2__0");
			builder.put(grammarAccess.getAlphaCommandSignatureAccess().getGroup_2_1(), "rule__AlphaCommandSignature__Group_2_1__0");
			builder.put(grammarAccess.getAlphaCommandSignatureAccess().getGroup_4(), "rule__AlphaCommandSignature__Group_4__0");
			builder.put(grammarAccess.getAlphaCommandSpecializationAccess().getGroup(), "rule__AlphaCommandSpecialization__Group__0");
			builder.put(grammarAccess.getAlphaCommandSpecializationAccess().getGroup_3(), "rule__AlphaCommandSpecialization__Group_3__0");
			builder.put(grammarAccess.getAlphaCommandSpecializationAccess().getGroup_3_1(), "rule__AlphaCommandSpecialization__Group_3_1__0");
			builder.put(grammarAccess.getAlphaCommandArgumentAccess().getGroup(), "rule__AlphaCommandArgument__Group__0");
			builder.put(grammarAccess.getOverrideArgumentAccess().getGroup(), "rule__OverrideArgument__Group__0");
			builder.put(grammarAccess.getSameAsParentArgumentAccess().getGroup(), "rule__SameAsParentArgument__Group__0");
			builder.put(grammarAccess.getAlphaCommandsRootAccess().getCategoriesAssignment(), "rule__AlphaCommandsRoot__CategoriesAssignment");
			builder.put(grammarAccess.getAlphaCommandCategoryAccess().getNameAssignment_0(), "rule__AlphaCommandCategory__NameAssignment_0");
			builder.put(grammarAccess.getAlphaCommandCategoryAccess().getCommandsAssignment_2(), "rule__AlphaCommandCategory__CommandsAssignment_2");
			builder.put(grammarAccess.getAlphaCommandAccess().getBindingAssignment_0(), "rule__AlphaCommand__BindingAssignment_0");
			builder.put(grammarAccess.getAlphaCommandAccess().getLabelAssignment_1_0(), "rule__AlphaCommand__LabelAssignment_1_0");
			builder.put(grammarAccess.getAlphaCommandAccess().getNameAssignment_2(), "rule__AlphaCommand__NameAssignment_2");
			builder.put(grammarAccess.getAlphaCommandAccess().getSignatureAssignment_3(), "rule__AlphaCommand__SignatureAssignment_3");
			builder.put(grammarAccess.getAlphaCommandAccess().getSpecializationsAssignment_4(), "rule__AlphaCommand__SpecializationsAssignment_4");
			builder.put(grammarAccess.getCommandBindingAccess().getBindTargetCommandAssignment_2(), "rule__CommandBinding__BindTargetCommandAssignment_2");
			builder.put(grammarAccess.getCommandBindingAccess().getArgumentBindingsAssignment_4_0(), "rule__CommandBinding__ArgumentBindingsAssignment_4_0");
			builder.put(grammarAccess.getCommandBindingAccess().getArgumentRenamingsAssignment_4_1(), "rule__CommandBinding__ArgumentRenamingsAssignment_4_1");
			builder.put(grammarAccess.getCommandBindingAccess().getArgumentBindingsAssignment_5_1_0(), "rule__CommandBinding__ArgumentBindingsAssignment_5_1_0");
			builder.put(grammarAccess.getCommandBindingAccess().getArgumentRenamingsAssignment_5_1_1(), "rule__CommandBinding__ArgumentRenamingsAssignment_5_1_1");
			builder.put(grammarAccess.getArgumentBindingAccess().getBindTargetAssignment_0(), "rule__ArgumentBinding__BindTargetAssignment_0");
			builder.put(grammarAccess.getArgumentBindingAccess().getBindSourceAssignment_3(), "rule__ArgumentBinding__BindSourceAssignment_3");
			builder.put(grammarAccess.getArgumentBindingAccess().getBindSourceAssignment_4_1(), "rule__ArgumentBinding__BindSourceAssignment_4_1");
			builder.put(grammarAccess.getArgumentRenamingAccess().getBindTargetAssignment_0(), "rule__ArgumentRenaming__BindTargetAssignment_0");
			builder.put(grammarAccess.getArgumentRenamingAccess().getBindSourceAssignment_2(), "rule__ArgumentRenaming__BindSourceAssignment_2");
			builder.put(grammarAccess.getAlphaCommandSignatureAccess().getArgumentsAssignment_2_0(), "rule__AlphaCommandSignature__ArgumentsAssignment_2_0");
			builder.put(grammarAccess.getAlphaCommandSignatureAccess().getArgumentsAssignment_2_1_1(), "rule__AlphaCommandSignature__ArgumentsAssignment_2_1_1");
			builder.put(grammarAccess.getAlphaCommandSignatureAccess().getReturnTypeAssignment_4_1(), "rule__AlphaCommandSignature__ReturnTypeAssignment_4_1");
			builder.put(grammarAccess.getAlphaCommandSpecializationAccess().getArgumentsAssignment_3_0(), "rule__AlphaCommandSpecialization__ArgumentsAssignment_3_0");
			builder.put(grammarAccess.getAlphaCommandSpecializationAccess().getArgumentsAssignment_3_1_1(), "rule__AlphaCommandSpecialization__ArgumentsAssignment_3_1_1");
			builder.put(grammarAccess.getAlphaCommandArgumentAccess().getArgumentTypeAssignment_0(), "rule__AlphaCommandArgument__ArgumentTypeAssignment_0");
			builder.put(grammarAccess.getAlphaCommandArgumentAccess().getNameAssignment_1(), "rule__AlphaCommandArgument__NameAssignment_1");
			builder.put(grammarAccess.getOverrideArgumentAccess().getArgumentTypeAssignment_0(), "rule__OverrideArgument__ArgumentTypeAssignment_0");
			builder.put(grammarAccess.getOverrideArgumentAccess().getNameAssignment_1(), "rule__OverrideArgument__NameAssignment_1");
			builder.put(grammarAccess.getDefaultValueArgumentAccess().getValueAssignment(), "rule__DefaultValueArgument__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CommandsGrammarAccess grammarAccess;

	@Override
	protected InternalCommandsParser createParser() {
		InternalCommandsParser result = new InternalCommandsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CommandsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CommandsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
