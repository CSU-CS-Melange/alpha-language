external sqrt(1)

affine cholesky_withReduce [N]->{:N>2}
	inputs
		A : {[i,j]: 0<=i<N && 0<=j<N}
	outputs
		L : {[i,j]: 0<=j<=i<N}
	let
		L[i,j] = case {
			{:i=0 && j=0} :sqrt(A[i,j]);
			{:i>0 && j=0} : A[i,j]/L[j,j];
			{:i=j} :sqrt(A[j,j] - reduce(+, [k], {:0<=k<j}: L[j,k]*L[j,k]));
			{:j<i && j>0} : (A[i,j]-reduce(+, [k], {:0<=k<j}: L[i,k]*L[j,k]))/L[j,j];
		};
.

affine cholesky [N]->{:N>2}
	inputs
		A : {[i,j]: 0<=i<N && 0<=j<N}
	outputs
		L : {[i,j]: 0<=j<=i<N}
	locals
		Temp : {[i,j,k] : 0<j<=i<N && 0<=k<j}
	let
		L[i,j] = case {
			{:i=0 && j=0} :sqrt(A[i,j]);
			{:i>0 && j=0} : A[i,j]/L[j,j];
			{:0<i=j} :sqrt( A[j,j] - Temp[i,j,j-1] );
			{:0<j<i} : ( A[i,j]-Temp[i,j,j-1] ) / L[j,j];
		};
		Temp[i,j,k] = case {
			{: k=0 } : L[i,0]*L[j,0];
			{: k>0 } : Temp[i,j,k-1] + L[i,k]*L[j,k]+val[0];
		};
.
