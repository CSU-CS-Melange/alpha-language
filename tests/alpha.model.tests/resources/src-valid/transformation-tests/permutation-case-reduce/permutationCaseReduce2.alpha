/**
 * Test for PermutationCaseReduce.
 *
 * All reductions should not have CaseExpression as its body after the transformation.
 */
 package tests.valid.trans.permutationCaseReduce {
	
affine permutationCaseReduce2a [N] -> { : N>0}
	inputs
		Y : {}
	outputs
		X : {}
	let
		X = reduce(+, [i], {:0<=i<N} : case {
			{:i=0} : 0[];
			auto : Y[];
		} );
.

affine permutationCaseReduce2b [N] -> { : N>0}
	inputs
		Y : {}
	outputs
		X : {}
	let
		X = reduce(+, [i], {:0<=i<N} : case {
			{:i=0} : 0[];
			{:i=1} : 1[];
			auto : Y[];
		} );
.

affine permutationCaseReduce2c [N] -> { : N>0}
	inputs
		Y : {}
	outputs
		X : [N]
	let
		X[i] = reduce(+, [j], {:0<=j<N} : case {
			{:i<10 and 0<=j<N} : 0[];
			{:i>=10 and 0<=j<N} : Y[];
		} );
.

affine permutationCaseReduce2d [N] -> { : N>0}
	inputs
		Y : {}
	outputs
		X : [N]
	let
		X[i] = reduce(+, [j], {:0<=j<N} : case {
			{:i<20 and 0<=j<10} : 0[];
			{:i>=10 and 10<=j<N} : 1[];
			auto : Y[];
		} );
.


}